<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Cloud Alibaba（四）</title>
      <link href="/posts/c88001ad.html"/>
      <url>/posts/c88001ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-Seata"><a href="#Spring-Cloud-Alibaba-Seata" class="headerlink" title="Spring Cloud Alibaba Seata"></a>Spring Cloud <code>Alibaba Seata</code></h1><blockquote><p>代码地址：<a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba">https://github.com/wicksonZhang/Spring-Cloud-Alibaba</a></p></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Seata-解决了什么问题"><span class="post-title-index">1.1. </span><a href="#Seata-解决了什么问题" class="headerlink" title="Seata 解决了什么问题"></a>Seata 解决了什么问题</h3><p>Spring Cloud Alibaba Seata 主要解决了 <strong>分布式事务一致性</strong> 的问题。</p><p>例如在一个电商平台中，涉及到 订单服务 和 库存服务 两个微服务。在用户下单的时候，订单服务需要扣减库存。这会涉及到两个不同的服务之间的操作，因此需要保证在订单创建的过程中，需要保证库存的扣减是一个原子操作，要么全部成功，要么全部失败。</p><p>总体而言，Seata通过提供分布式事务管理的功能，解决了在这种复杂环境下可能出现的事务 <strong>一致性和可靠性</strong> 的问题。</p><h3 id="Seata-是什么？"><span class="post-title-index">1.2. </span><a href="#Seata-是什么？" class="headerlink" title="Seata 是什么？"></a>Seata 是什么？</h3><blockquote><p>官网地址：<a href="https://seata.apache.org/zh-cn/">https://seata.apache.org/zh-cn/</a></p><p>GIthub地址：<a href="https://github.com/apache/incubator-seata">https://github.com/apache/incubator-seata</a></p><p>Seata 大白话介绍：<a href="https://www.51cto.com/article/704718.html">https://www.51cto.com/article/704718.html</a></p></blockquote><p><strong>Spring Cloud Alibaba Seata</strong> 是一套分布式事务解决方案，它致力于解决分布式事务的 <strong>一致性</strong> 和 <strong>可靠性</strong> 问题。如下是 Seata 的核心组件：</p><ul><li><strong>TC（Transaction Coordinator）- 事务协调器：</strong> 负责全局事务的协调和控制，协调多个参与者的分支事务的执行。</li><li><strong>TM（Transaction Manager）- 事务管理器：</strong>管理全局事务的开始、提交和回滚，与 TC 协作，负责事务的边界控制。</li><li><strong>RM（Resource Manager）- 资源管理器：</strong>管理分支事务的资源，与 TM 协作，负责事务的实际操作，如数据库的操作。</li><li><strong>AT（AT mode, Automatic Two-Phase Commit） - 自动两阶段提交模式：</strong> 通过预留资源和提交阶段，实现全局事务的一致性。</li></ul><p><img src="https://user-images.githubusercontent.com/68344696/145942191-7a2d469f-94c8-4cd2-8c7e-46ad75683636.png" alt="image" style="zoom:50%;float:left"></p><h2 id="Seata-Server"><span class="post-title-index">2. </span><a href="#Seata-Server" class="headerlink" title="Seata Server"></a>Seata Server</h2><p>我们如果使用 <code>Seata</code> 还需如下的一些配置来帮助我们解决问题：</p><ul><li><strong>Seata Server：</strong>这是 Seata 的服务端组件，用于协调和管理分布式事务。</li><li><strong>配置配置文件：</strong>在 Seata Server 的配置文件（<code>application.yml</code>）中，指定 Nacos 作为注册中心。</li><li><strong>创建 Nacos 配置文件：</strong>在 Nacos 配置 Seata 相关的配置文件。</li><li><strong>创建数据库：</strong>Seata需要通过数据源代理来拦截数据库的操作，以实现分布式事务。</li></ul><h3 id="Seata-Server-下载"><span class="post-title-index">2.1. </span><a href="#Seata-Server-下载" class="headerlink" title="Seata Server 下载"></a>Seata Server 下载</h3><p>本次在官网中推荐使用的 Seata 稳定版本是 1.8.0 ，所以具体安装信息如下：</p><ul><li><p>下载地址：<a href="https://github.com/apache/incubator-seata/releases/download/v1.8.0/seata-server-1.8.0.zip">https://github.com/apache/incubator-seata/releases/download/v1.8.0/seata-server-1.8.0.zip</a></p></li><li><p>参考博文：<a href="https://blog.csdn.net/letterss/article/details/134269404">https://blog.csdn.net/letterss/article/details/134269404</a></p></li></ul><h3 id="修改配置文件"><span class="post-title-index">2.2. </span><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>文件地址：<code>seata-server-1.8.0\seata\conf\application.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="comment"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class="line">    <span class="comment"># 使用nacos作为配置中心</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># Nacos 注册中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">http://192.168.10.20:8001</span></span><br><span class="line">      <span class="comment"># Nacos 命名空间配置</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">fc1c8c25-c514-4430-9197-3148654af6ab</span></span><br><span class="line">      <span class="comment"># Nacos 分组信息配置</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_DEV_GROUP</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="comment"># Nacos中 的配置文件名称</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">spring-cloud-alibaba-seata-server.properties</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class="line">    <span class="comment"># Nacos 作为注册中心</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">http://192.168.10.20:8001</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_DEV_GROUP</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">fc1c8c25-c514-4430-9197-3148654af6ab</span></span><br><span class="line">      <span class="comment"># 此处注意,这的值要和 Nacos 配置文件 service.vgroupMapping.seata_tx_group 的值一样</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="comment">#store:</span></span><br><span class="line">    <span class="comment"># support: file 、 db 、 redis</span></span><br><span class="line">    <span class="comment">#mode: db</span></span><br><span class="line"><span class="comment">#  server:</span></span><br><span class="line"><span class="comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class="line">    <span class="attr">tokenValidityInMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">ignore:</span></span><br><span class="line">      <span class="attr">urls:</span> <span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login</span></span><br></pre></td></tr></table></figure><h3 id="创建-Nacos-配置文件"><span class="post-title-index">2.3. </span><a href="#创建-Nacos-配置文件" class="headerlink" title="创建 Nacos 配置文件"></a>创建 Nacos 配置文件</h3><ul><li>在 <code>Nacos</code> 中的 <strong>配置管理 -&gt; 配置列表</strong> 添加配置 <code>spring-cloud-alibaba-seata-server.properties</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402021752657.png" alt="image-20240202175220610" style="zoom:100%;float:left"></p><ul><li>配置信息如下</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service.vgroupMapping.seata_tx_group 和前面的配置 seata.registry.nacos.cluster 的值是一样的</span></span><br><span class="line"><span class="attr">service.vgroupMapping.seata_tx_group</span>=<span class="string">default</span></span><br><span class="line"><span class="comment">#这里的地址需要配置成seata所在服务器的地址</span></span><br><span class="line"><span class="attr">service.default.grouplist</span>=<span class="string">127.0.0.1:8091</span></span><br><span class="line"><span class="attr">service.enableDegrade</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">service.disableGlobalTransaction</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#此处对于数据存储使用的是数据库存储所以需要配置数据库的连接信息</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">#数据库驱动如果是mysql8使用这个，否则使用com.mysql.jdbc.Driver </span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver </span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://192.168.10.16:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">P@ssw0rd</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="comment">#此处有四张表的配置，所以需要在数据库中执行对应的SQL创建表</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.distributedLockTable</span>=<span class="string">distributed_lock</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#Transaction rule configuration, only for the server</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.distributedLockExpireTime</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">server.xaerNotaRetryTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">server.session.branchAsyncQueueSize</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">server.session.enableBranchAsyncRemove</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#Transaction rule configuration, only for the client</span></span><br><span class="line"><span class="attr">client.rm.asyncCommitBufferLimit</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">client.rm.lock.retryInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">client.rm.lock.retryTimes</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.rm.reportRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.rm.tableMetaCheckEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.rm.tableMetaCheckerInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">client.rm.sqlParserType</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">client.rm.reportSuccessEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.rm.sagaBranchRegisterEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.rm.sagaJsonParser</span>=<span class="string">fastjson</span></span><br><span class="line"><span class="attr">client.rm.tccActionInterceptorOrder</span>=<span class="string">-2147482648</span></span><br><span class="line"><span class="attr">client.tm.commitRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.tm.rollbackRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.tm.defaultGlobalTransactionTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">client.tm.degradeCheck</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.tm.degradeCheckAllowTimes</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">client.tm.degradeCheckPeriod</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">client.tm.interceptorOrder</span>=<span class="string">-2147482648</span></span><br><span class="line"><span class="attr">client.undo.dataValidation</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.logSerialization</span>=<span class="string">jackson</span></span><br><span class="line"><span class="attr">client.undo.onlyCareUpdateColumns</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="attr">client.undo.logTable</span>=<span class="string">undo_log</span></span><br><span class="line"><span class="attr">client.undo.compress.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.compress.type</span>=<span class="string">zip</span></span><br><span class="line"><span class="attr">client.undo.compress.threshold</span>=<span class="string">64k</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#For TCC transaction mode</span></span><br><span class="line"><span class="attr">tcc.fence.logTableName</span>=<span class="string">tcc_fence_log</span></span><br><span class="line"><span class="attr">tcc.fence.cleanPeriod</span>=<span class="string">1h</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#Log rule configuration, for client and server</span></span><br><span class="line"><span class="attr">log.exceptionRate</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">#Metrics configuration, only for the server</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">transport.type</span>=<span class="string">TCP</span></span><br><span class="line"><span class="attr">transport.server</span>=<span class="string">NIO</span></span><br><span class="line"><span class="attr">transport.heartbeat</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">transport.enableTmClientBatchSendRequest</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.enableRmClientBatchSendRequest</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">transport.enableTcServerBatchSendResponse</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.rpcRmRequestTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">transport.rpcTmRequestTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">transport.rpcTcRequestTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">transport.threadFactory.bossThreadPrefix</span>=<span class="string">NettyBoss</span></span><br><span class="line"><span class="attr">transport.threadFactory.workerThreadPrefix</span>=<span class="string">NettyServerNIOWorker</span></span><br><span class="line"><span class="attr">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class="string">NettyServerBizHandler</span></span><br><span class="line"><span class="attr">transport.threadFactory.shareBossWorker</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class="string">NettyClientSelector</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientSelectorThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class="string">NettyClientWorkerThread</span></span><br><span class="line"><span class="attr">transport.threadFactory.bossThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transport.threadFactory.workerThreadSize</span>=<span class="string">default</span></span><br><span class="line"><span class="attr">transport.shutdown.wait</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br></pre></td></tr></table></figure><h3 id="创建-Seata-数据库"><span class="post-title-index">2.4. </span><a href="#创建-Seata-数据库" class="headerlink" title="创建 Seata 数据库"></a>创建 Seata 数据库</h3><ul><li>数据库文件：<code>seata\script\server\db</code> 并导入相关数据库脚本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301754221.gif" alt="image" style="zoom:100%;float:left"></p><ul><li>在上面的基础上在创建一个 <code>undo_log</code> 表<ul><li>seata中默认使用的是<code>AT模式</code>，该模式需求每个客户端库内都存在一张<code>undo_log</code>表，用于回滚事务时临时记录数据。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">  `log_created` datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">  `log_modified` datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`),</span><br><span class="line">  KEY `ix_log_created` (`log_created`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;AT transaction mode undo table&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="启动-Seata-Server"><span class="post-title-index">2.5. </span><a href="#启动-Seata-Server" class="headerlink" title="启动 Seata Server"></a>启动 Seata Server</h3><ul><li>启动脚本：<code>\seata\bin\seata-server.bat</code></li><li>访问：<a href="http://localhost:7091">http://localhost:7091</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301758111.png" alt="image-20240130175846064"></p><ul><li><strong>验证是否成功</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401311053235.png" alt="image-20240131105359172"></p><ul><li><strong>服务管理 —&gt; 服务列表</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402021753798.png" alt="image-20240202175355757" style="zoom:100%;float:left"></p><h2 id="案例实现"><span class="post-title-index">3. </span><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h2><blockquote><p>案例来源：<a href="https://seata.apache.org/zh-cn/docs/v1.8/user/quickstart">https://seata.apache.org/zh-cn/docs/v1.8/user/quickstart</a></p><p>参考案例：<a href="https://github.com/apache/incubator-seata-samples/tree/master/seata-spring-boot-starter-samples">https://github.com/apache/incubator-seata-samples/tree/master/seata-spring-boot-starter-samples</a></p><p>本章节代码：<a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba">https://github.com/wicksonZhang/Spring-Cloud-Alibaba</a></p><ol><li>01-spring-cloud-alibaba-common</li><li>04-spring-cloud-alibaba-seata-business-2800</li><li>04-spring-cloud-alibaba-seata-storage-2900</li><li>04-spring-cloud-alibaba-seata-order-3000</li><li>04-spring-cloud-alibaba-seata-account-3100</li><li>04-spring-cloud-alibaba-seata-web-3200</li><li>05-spring-cloud-alibaba-gateway-server-9527</li></ol></blockquote><h3 id="环境选择"><span class="post-title-index">3.1. </span><a href="#环境选择" class="headerlink" title="环境选择"></a>环境选择</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">操作系统：Windows 11</span><br><span class="line">Nacos: 2.0.1</span><br><span class="line">Seata: 1.8.0</span><br><span class="line">SpringBoot: 2.6.3</span><br><span class="line">SpringCloud: 2021.0.1</span><br><span class="line">SpringCloudAlibaba: 2021.0.1.0</span><br></pre></td></tr></table></figure><h3 id="实现需求"><span class="post-title-index">3.2. </span><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h3><p>用户购买商品的业务逻辑。整个业务逻辑由4个微服务提供支持：</p><ul><li>业务服务：通过 Business 下单，调用订单服务、仓储服务。</li><li>仓储服务：对给定的商品扣除仓储数量。</li><li>订单服务：根据采购需求创建订单。</li><li>帐户服务：从用户帐户中扣除余额。</li></ul><p><img src="https://seata.apache.org/zh-cn/assets/images/architecture-6bdb120b83710010167e8b75448505ec.png" alt="Architecture" style="zoom:100%;"></p><h3 id="实现结果"><span class="post-title-index">3.3. </span><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h3><ul><li>我们测试的结果分为两种情况：正常情况、异常情况<ul><li>正常情况：当使用 @GlobalTransaction 进行分布式事务控制。</li><li>异常情况：当不使用 @GlobalTransaction 进行分布式事务控制。</li></ul></li></ul><h4 id="正常情况"><span class="post-title-index">3.3.1. </span><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h4><blockquote><p>正常情况下我们使用的是 @GlobalTransaction 进行控制分布式事务。我们分别从正常和异常两种情况进行测试</p></blockquote><p>当正常通过 Business 下单，调用订单服务、仓储服务。明显看到 库存服务、账户服务、订单服务 分别产生了如下数据。</p><ul><li><strong>库存服务：</strong>每日坚果的库存由 <strong>30</strong> 减少到了 <strong>20</strong>。</li><li><strong>订单服务</strong>：产生了一条新的订单</li><li><strong>账户服务：</strong>用户ID为 2 的用户，用于余额从 <strong>170.5</strong> 减少到了 <strong>70.5</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041350704.gif" alt="image" style="zoom:100%;float:left"></p><p>当我们再次下单，如果 <strong>当前账户余额不足</strong> 的情况下 <strong>是否会产生订单信息、库存是否为减少？</strong>。</p><ul><li>从如下结果可以看到 <strong>库存服务、账户服务、订单服务</strong> 数据并没有减少。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041400206.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="异常情况"><span class="post-title-index">3.3.2. </span><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h4><blockquote><p>异常情况：当不使用 @GlobalTransaction 进行分布式事务控制。我们分别从 <strong>正常</strong> 和 <strong>异常</strong> 两种情况进行测试</p></blockquote><p><strong>正常通过 Business 下单，调用订单服务、仓储服务</strong>，明显看到 库存服务、账户服务、订单服务 分别产生了如下数据：</p><ul><li><strong>库存服务：</strong>每日坚果的库存由 <strong>20</strong> 减少到了 <strong>19</strong>。</li><li><strong>订单服务</strong>：产生了一条新的订单。</li><li><strong>账户服务：</strong>用户ID为 2 的用户，用于余额从 <strong>70.5</strong> 减少到了 <strong>69.5</strong>。</li><li>只要代码不出问题还是可以正常运行的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041413149.gif" alt="image" style="zoom:80%;float:left"></p><p>当我们再次下单，如果 <strong>当前账户余额不足</strong> 的情况下 <strong>是否会产生订单信息、库存是否为减少？</strong></p><ul><li>问题已经复现了，当我们出现 <strong>当前账户余额不足</strong> 的情况下，依旧把我们的库存给减少了。</li><li><strong>库存服务：</strong>每日坚果 的库存从 19 减少到了 9。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041422531.gif" alt="image" style="zoom:80%;float:left"></p><h3 id="代码结构"><span class="post-title-index">3.4. </span><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><blockquote><p>由于本次是综合练习，所以准备使用 <strong>DDD（领域驱动设计）</strong> 进行开发。但为了避免代码过多，精简了一些代码。</p></blockquote><p>本次使用到的项目如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 01-spring-cloud-alibaba-common</span><br><span class="line">2. 04-spring-cloud-alibaba-seata-business-2800</span><br><span class="line">3. 04-spring-cloud-alibaba-seata-storage-2900</span><br><span class="line">4. 04-spring-cloud-alibaba-seata-order-3000</span><br><span class="line">5. 04-spring-cloud-alibaba-seata-account-3100</span><br><span class="line">6. 04-spring-cloud-alibaba-seata-web-3200</span><br><span class="line">7. 05-spring-cloud-alibaba-gateway-server-9527</span><br></pre></td></tr></table></figure><p>我们以订单服务 <strong>04-spring-cloud-alibaba-seata-order-3000</strong> 简单介绍一下代码结构</p><ul><li>具体信息参考代码：<a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba/tree/main/04-spring-cloud-alibaba-seata-order-3000/src/main/java/cn/wickson/cloud/alibaba/seata/order">04-spring-cloud-alibaba-seata-order-3000</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─cn.wickson.cloud.alibaba.seata.order</span><br><span class="line">│  │  │     ├─app.service # 应用服务层、应用服务抽象类</span><br><span class="line">│  │  │     │  └─impl  # 应用服务实现类</span><br><span class="line">│  │  │     ├─config  # 配置类</span><br><span class="line">│  │  │     ├─controller  # 控制类</span><br><span class="line">│  │  │     ├─convert     # 转换类</span><br><span class="line">│  │  │     ├─feign  # 远程调用</span><br><span class="line">│  │  │     │  └─fallback</span><br><span class="line">│  │  │     ├─mapper  # mapper 类</span><br><span class="line">│  │  │     ├─model  # 实体模型类</span><br><span class="line">│  │  │     │  └─entity</span><br><span class="line">│  │  │     └─repository  # 仓库类信息</span><br><span class="line">│  │  │        └─impl</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      └─mapper</span><br></pre></td></tr></table></figure><h3 id="数据库配置"><span class="post-title-index">3.5. </span><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>我们本次创建三个数据库，具体如下：</p><ul><li><p>order数据库：<a href="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041714369.sql">order.sql</a></p></li><li><p>storage数据库：<a href="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041716233.sql">storage.sql</a></p></li><li>order 数据库：<a href="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041717521.sql">account.sql</a></li></ul><h3 id="Nacos-配置"><span class="post-title-index">3.6. </span><a href="#Nacos-配置" class="headerlink" title="Nacos 配置"></a>Nacos 配置</h3><ul><li>点击下载 Nacos 配置信息：<a href="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041444042.zip">Nacos配置信息</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041443025.png" alt="image-20240204144345958"></p><h3 id="Seata-Server-配置"><span class="post-title-index">3.7. </span><a href="#Seata-Server-配置" class="headerlink" title="Seata-Server 配置"></a>Seata-Server 配置</h3><ul><li>我们在 <strong>Seata Server - 修改配置文件</strong> 章节中已经配置完成。</li></ul><h3 id="实现步骤"><span class="post-title-index">3.8. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><blockquote><p>关于 <strong>代码结构</strong> 中我已经给出了相关的代码案例，我们这里之说一下核心的调用流程代码。</p></blockquote><ul><li><strong>Business Service：</strong>当我们调用 Business 服务的接口如下，如下代码只做了三件事情：<ul><li>Step-1：进行了基本的参数校验。</li><li>Step-2：通过 OpenFeign 调用 Stock 库存服务减少库存。</li><li>Step-3：通过 OpenFeign 调用 Order 订单服务创建订单。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessAppServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractBusinessAppService</span> <span class="keyword">implements</span> <span class="title class_">IBusinessAppService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采购商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> businessVO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">purchase</span><span class="params">(<span class="keyword">final</span> BusinessVO businessVO)</span> &#123;</span><br><span class="line">        <span class="comment">/* Step-1: 参数校验 */</span></span><br><span class="line">        ParamFormatUtil.formatParam(businessVO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-2: 减少库存，调用库存信息 */</span></span><br><span class="line">        <span class="type">StockDTO</span> <span class="variable">stockDTO</span> <span class="operator">=</span> BusinessConvert.INSTANCE.toStockDTO(businessVO);</span><br><span class="line">        <span class="built_in">this</span>.delStock(stockDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-3、创建订单 */</span></span><br><span class="line">        <span class="type">OrderDTO</span> <span class="variable">orderDTO</span> <span class="operator">=</span> BusinessConvert.INSTANCE.toOrderDTO(businessVO);</span><br><span class="line">        <span class="built_in">this</span>.createOrder(orderDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Stock Service：</strong>库存服务需要减少库存信息，核心代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StockServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractStockAppService</span> <span class="keyword">implements</span> <span class="title class_">IStockService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ, rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> StockDTO <span class="title function_">deduct</span><span class="params">(StockDTO stockDTO)</span> &#123;</span><br><span class="line">        <span class="comment">/* Step-1: 参数校验 */</span></span><br><span class="line">        ParamFormatUtil.formatParam(stockDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-2: Stock validated */</span></span><br><span class="line">        <span class="type">Stock</span> <span class="variable">stock</span> <span class="operator">=</span> <span class="built_in">this</span>.validateUpdateParam(stockDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-3: 减少库存 */</span></span><br><span class="line">        stock.setCount(stock.getCount() - stockDTO.getCount());</span><br><span class="line">        stockRepository.updateById(stock);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> StockConvert.INSTANCE.toDTO(stock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>Order Service：</strong> 订单服务主要是 创建订单 和 扣减账户余额，核心代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderAppServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractOrderAppService</span> <span class="keyword">implements</span> <span class="title class_">IOrderAppService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation= Isolation.REPEATABLE_READ,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(<span class="keyword">final</span> OrderDTO orderDTO)</span> &#123;</span><br><span class="line">        <span class="comment">/* Step-1: 参数校验 */</span></span><br><span class="line">        ParamFormatUtil.formatParam(orderDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-2: 减少账户余额 */</span></span><br><span class="line">        <span class="type">AccountDTO</span> <span class="variable">accountDTO</span> <span class="operator">=</span> OrderConvert.INSTANCE.toAccountDTO(orderDTO);</span><br><span class="line">        <span class="built_in">this</span>.delAccount(accountDTO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-3： 创建订单 */</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> OrderConvert.INSTANCE.toOrderDO(orderDTO);</span><br><span class="line">        order.setOrderNo(UUID.randomUUID().toString());</span><br><span class="line">        <span class="built_in">this</span>.orderRepository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Account Service：</strong>账户服务主要用于扣减账户余额，核心代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IAccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(isolation= Isolation.REPEATABLE_READ,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(AccountDTO accountDTO)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> accountDTO.getUserId();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountRepository.lambdaQuery().eq(Account::getUserId, userId).one();</span><br><span class="line">        <span class="keyword">if</span> (ObjUtil.isNull(account)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> UserOperationException.getInstance(ResultCodeEnum.SEATA_ACCOUNT_NULL_POINT_EXCEPTION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">amount</span> <span class="operator">=</span> account.getAmount();</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">accountAmount</span> <span class="operator">=</span> accountDTO.getAmount();</span><br><span class="line">        <span class="keyword">if</span> (amount.compareTo(accountAmount) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> UserOperationException.getInstance(ResultCodeEnum.SEATA_ACCOUNT_INSUFFICIENT_BALANCE);</span><br><span class="line">        &#125;</span><br><span class="line">        account.setAmount(amount.subtract(accountAmount));</span><br><span class="line">        accountRepository.updateById(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">3.9. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h4 id="前端参数校验"><span class="post-title-index">3.9.1. </span><a href="#前端参数校验" class="headerlink" title="前端参数校验"></a>前端参数校验</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041507979.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="库存不足校验"><span class="post-title-index">3.9.2. </span><a href="#库存不足校验" class="headerlink" title="库存不足校验"></a>库存不足校验</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041510912.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="余额不足校验"><span class="post-title-index">3.9.3. </span><a href="#余额不足校验" class="headerlink" title="余额不足校验"></a>余额不足校验</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041710594.gif" alt="image" style="zoom:80%;float:left"></p><h4 id="商品编号与商品名称不对应校验"><span class="post-title-index">3.9.4. </span><a href="#商品编号与商品名称不对应校验" class="headerlink" title="商品编号与商品名称不对应校验"></a>商品编号与商品名称不对应校验</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041516824.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="服务降级"><span class="post-title-index">3.9.5. </span><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><ul><li>当我们将订单服务宕机掉：这时并没有打印出错误页面，而是报的订单创建失败。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041523294.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="服务限流"><span class="post-title-index">3.9.6. </span><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h4><p>我们针对订单服务进行限流，如下时具体的配置信息：</p><ul><li>Sentinel 界面配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041707263.png" alt="image-20240204170714224" style="zoom:80%;float:left"></p><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041708570.gif" alt="image" style="zoom:80%;float:left"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba（三）</title>
      <link href="/posts/7fad18c8.html"/>
      <url>/posts/7fad18c8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-Sentinel"><a href="#Spring-Cloud-Alibaba-Sentinel" class="headerlink" title="Spring Cloud Alibaba Sentinel"></a>Spring Cloud Alibaba Sentinel</h1><blockquote><p>代码地址：<a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba">https://github.com/wicksonZhang/Spring-Cloud-Alibaba</a></p></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Sentinel-解决了什么问题？"><span class="post-title-index">1.1. </span><a href="#Sentinel-解决了什么问题？" class="headerlink" title="Sentinel 解决了什么问题？"></a>Sentinel 解决了什么问题？</h3><p>Spring Cloud Alibaba Sentinel 主要解决了服务与服务之间的熔断和限流，提高系统的 <strong>稳定性</strong> 和 <strong>可靠性</strong>，确保在异常情况下系统可以正常使用，同时防止故障扩散，以下是一个具体的应用场景说明：</p><p>假设有一个微服务架构的电子商务系统，其中包含多个服务，如用户服务、订单服务、支付服务等。在高并发情况下，如果某个服务出现异常或者因为流量过大而无法正常处理请求，这可能导致整个系统的崩溃或性能下降。</p><p>Spring Cloud Alibaba Sentinel 可以通过设置每个服务的流量阈值，当达到了服务的设定的阈值之后，直接进行流量控制，防止服务过载。</p><h3 id="Sentinel-是什么？"><span class="post-title-index">1.2. </span><a href="#Sentinel-是什么？" class="headerlink" title="Sentinel 是什么？"></a>Sentinel 是什么？</h3><blockquote><p>官网地址：<a href="https://sentinelguard.io/zh-cn/">https://sentinelguard.io/zh-cn/</a></p><p>Github地址：<a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p></blockquote><p>Spring Cloud Alibaba Sentinel是一个用于流量控制、熔断降级、系统负载保护等功能的分布式系统的开源框架。它是Alibaba开发的一个子项目，与Spring Cloud无缝集成。</p><p>Sentinel 主要功能如下：</p><ul><li><strong>实时监控：</strong>Sentinel 提供了实时监控的统计功能可以在提供的 Dashboard 查看每个服务的请求量、错误率、响应时间等指标。</li><li><strong>规则配置：</strong> Sentinel支持通过代码或配置文件定义流量控制、熔断降级等规则，灵活适应不同场景的需求。</li><li><strong>流量控制：</strong> Sentinel可以对服务进行流量控制，限制每个服务的请求流量，防止系统过载。</li><li><strong>熔断降级：</strong> 当服务出现异常或错误率超过阈值时，Sentinel可以自动触发熔断机制，停止对该服务的请求，避免错误的传播。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401251600193.png" alt="image-20240125160010526" style="zoom:100%;float:left"></p><h3 id="Sentinel-对比-Hystrix"><span class="post-title-index">1.3. </span><a href="#Sentinel-对比-Hystrix" class="headerlink" title="Sentinel 对比 Hystrix"></a>Sentinel 对比 Hystrix</h3><ul><li>Sentinel 是在 Hystrix 后面进行研发的，所以本质上借鉴了 Hystrix 一些优秀的点进行了进一步的开发。</li></ul><div class="table-container"><table><thead><tr><th>特点 / 框架</th><th>Spring Cloud Alibaba Sentinel</th><th>Netflix Hystrix</th></tr></thead><tbody><tr><td><strong>流量控制策略</strong></td><td>灵活、细致化</td><td>相对简单</td></tr><tr><td><strong>实时监控和统计</strong></td><td>支持，提供实时监控功能</td><td>有监控功能，但较为基础</td></tr><tr><td><strong>规则配置</strong></td><td>灵活，支持代码或配置文件配置</td><td>相对简单的配置</td></tr><tr><td><strong>容错能力</strong></td><td>强大的熔断降级机制</td><td>相对较为简单的容错机制</td></tr><tr><td><strong>轻量级</strong></td><td>相对较轻量级</td><td>相对较重量级</td></tr><tr><td><strong>Spring Cloud 集成</strong></td><td>原生支持Spring Cloud Alibaba</td><td>通过Spring Cloud Netflix集成</td></tr><tr><td><strong>社区活跃度</strong></td><td>活跃</td><td>项目处于维护模式</td></tr></tbody></table></div><h2 id="Sentinel-安装启动"><span class="post-title-index">2. </span><a href="#Sentinel-安装启动" class="headerlink" title="Sentinel 安装启动"></a>Sentinel 安装启动</h2><ul><li><p>本次我们安装的是 <code>Dashboard</code> 控制台界面，下载地址：<a href="https://github.com/alibaba/Sentinel/releases/download/1.7.0/sentinel-dashboard-1.7.0.jar">https://github.com/alibaba/Sentinel/releases/download/1.7.0/sentinel-dashboard-1.7.0.jar</a></p></li><li><p>启动命令如下</p></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E:\<span class="title">JavaProjects</span>\<span class="title">Spring</span>-<span class="title">Cloud</span>-<span class="title">Alibaba</span>\<span class="title">doc</span>\03-<span class="title">Spring</span> <span class="title">Cloud</span> <span class="title">Alibaba</span> <span class="title">Sentinel</span>&gt;<span class="title">java</span> -<span class="title">jar</span> <span class="title">sentinel</span>-<span class="title">dashboard</span>-1.7.0.<span class="title">jar</span></span></span><br><span class="line"><span class="function"><span class="title">INFO</span>: <span class="title">log</span> <span class="title">output</span> <span class="title">type</span> <span class="title">is</span>: <span class="title">file</span></span></span><br><span class="line"><span class="function"><span class="title">INFO</span>: <span class="title">log</span> <span class="title">charset</span> <span class="title">is</span>: <span class="title">utf</span>-8</span></span><br><span class="line"><span class="function"><span class="title">INFO</span>: <span class="title">log</span> <span class="title">base</span> <span class="title">dir</span> <span class="title">is</span>: <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">minuo</span>-<span class="title">java02</span>\<span class="title">logs</span>\<span class="title">csp</span>\</span></span><br><span class="line"><span class="function"><span class="title">INFO</span>: <span class="title">log</span> <span class="title">name</span> <span class="title">use</span> <span class="title">pid</span> <span class="title">is</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  .   <span class="title">____</span>          <span class="title">_</span>            <span class="title">__</span> <span class="title">_</span> <span class="title">_</span></span></span><br><span class="line"><span class="function"> /\\ / <span class="title">___</span>&#x27;<span class="title">_</span> <span class="title">__</span> <span class="title">_</span> <span class="title">_</span>(<span class="title">_</span>)<span class="title">_</span> <span class="title">__</span>  <span class="title">__</span> <span class="title">_</span> \ \ \ \</span></span><br><span class="line"><span class="function">( ( )\<span class="title">___</span> | &#x27;<span class="title">_</span> | &#x27;<span class="title">_</span>| | &#x27;<span class="title">_</span> \/ <span class="title">_</span>` | \ \ \ \</span></span><br><span class="line"><span class="function"> \\/  <span class="title">___</span>)| |<span class="title">_</span>)| | | | | || (<span class="title">_</span>| |  ) ) ) )</span></span><br><span class="line"><span class="function">  &#x27;  |<span class="title">____</span>| .<span class="title">__</span>|<span class="title">_</span>| |<span class="title">_</span>|<span class="title">_</span>| |<span class="title">_</span>\<span class="title">__</span>, | / / / /</span></span><br><span class="line"><span class="function"> =========|<span class="title">_</span>|==============|<span class="title">___</span>/=/<span class="title">_</span>/<span class="title">_</span>/<span class="title">_</span>/</span></span><br><span class="line"><span class="function"> :: <span class="title">Spring</span> <span class="title">Boot</span> ::        (<span class="title">v2</span>.0.5.<span class="title">RELEASE</span>)</span></span><br><span class="line"><span class="function"> ...............</span></span><br></pre></td></tr></table></figure><ul><li>访问地址：<a href="http://localhost:8080">http://localhost:8080</a> , 账号密码都是 sentinel</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401251641142.png" alt="image-20240125164157091" style="zoom:100%;float:left"></p><h2 id="Sentinel-具体操作"><span class="post-title-index">3. </span><a href="#Sentinel-具体操作" class="headerlink" title="Sentinel 具体操作"></a>Sentinel 具体操作</h2><h3 id="实现需求"><span class="post-title-index">3.1. </span><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搭建 Sentinel 微服务项目，配合 Sentinel Dashboard 结合使用。当访问对应的控制链路时，在控制台中出现对应的监控信息。</span><br></pre></td></tr></table></figure><h3 id="实现结果"><span class="post-title-index">3.2. </span><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h3><ul><li>当我们访问控制类接口：<a href="http://localhost:2400/sentinel/service1">http://localhost:2400/sentinel/service1</a> ，在 Sentinel 的控制台界面会出现如下调用链路。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401251726813.png" alt="image-20240125172641743"></p><h3 id="实现步骤"><span class="post-title-index">3.3. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 创建 sentinel 服务：03-spring-cloud-alibaba-sentinel-server-2400</span><br><span class="line">2. 导入 pom.xml 依赖</span><br><span class="line">3. 创建 application.yml 依赖</span><br><span class="line">4. 创建 SpringCloudAlibabaSentinelApplication 启动类</span><br><span class="line">5. 创建 SentinelController 控制类</span><br></pre></td></tr></table></figure><h4 id="创建-sentinel-服务"><span class="post-title-index">3.3.1. </span><a href="#创建-sentinel-服务" class="headerlink" title="创建 sentinel 服务"></a>创建 sentinel 服务</h4><ul><li>创建 sentinel 服务名称：03-spring-cloud-alibaba-sentinel-server-2400</li></ul><h4 id="导入-pom-xml-依赖"><span class="post-title-index">3.3.2. </span><a href="#导入-pom-xml-依赖" class="headerlink" title="导入 pom.xml 依赖"></a>导入 pom.xml 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-alibaba-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud alibaba Nacos 注册与发现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud alibaba Sentinel 服务限流于熔断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud OpenFeign 服务调用依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建-application-yml-依赖"><span class="post-title-index">3.3.3. </span><a href="#创建-application-yml-依赖" class="headerlink" title="创建 application.yml 依赖"></a>创建 application.yml 依赖</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2400</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-sentinel-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># Nacos 服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.20</span><span class="string">:8001</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># 配置 Sentinel Dashboard 地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment"># 默认端口 8719</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类"><span class="post-title-index">3.3.4. </span><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Alibaba Sentinel 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudAlibabaSentinelApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaSentinelApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建控制类"><span class="post-title-index">3.3.5. </span><a href="#创建控制类" class="headerlink" title="创建控制类"></a>创建控制类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sentinel 控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sentinel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/service1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">service1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelController.service1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/service2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">service2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelController.service2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sentinel-流量控制"><span class="post-title-index">4. </span><a href="#Sentinel-流量控制" class="headerlink" title="Sentinel 流量控制"></a>Sentinel 流量控制</h2><p>在Spring Cloud Alibaba Sentinel中，流控规则用于定义对服务的流量控制策略。在下图中针对某一个接口进行流量控制的配置：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401251757624.png" alt="image-20240125175715568"></p><p>如下是文字版描述</p><ul><li><strong>资源名：</strong>唯一名称，默认请求路径；</li><li><strong>针对来源：</strong>Sentinel 可以针对调用者进行限流，填写微服务名，指定对哪个微服务进行限流 ，默认<code>default</code>(不区分来源，全部限制)；</li><li><p><strong>阈值类型 / 单机阈值：</strong></p><ul><li><strong>QPS：</strong>每秒钟的请求数量，当调用接口的QPS达到阈值的时候，进行限流；</li><li><strong>线程数：</strong>当调用接口的线程数达到阈值的时候，进行限流；</li></ul></li><li><p><strong>是否集群：</strong>不需要集群</p></li><li><strong>流控模式：</strong><ul><li><strong>直接：</strong>接口达到限流条件时，直接限流；</li><li><strong>关联：</strong>当关联的资源达到阈值时，就限流自己；</li><li><strong>链路：</strong>只记录指定链路上的流量 (指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【api 级别的针对来源】；</li></ul></li><li><strong>流控效果：</strong><ul><li><strong>快速失败：</strong>直接失败，抛异常；</li><li><strong>Warm Up：</strong>根据codeFactor（冷加载因子，默认为3）的值，即请求 QPS 从阈值 / codeFactor，经过预热时长，逐渐升至设定的QPS阈值；</li><li><strong>排队等待：</strong>匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS,否则无效；</li></ul></li></ul><h3 id="QPS-直接-快速失败"><span class="post-title-index">4.1. </span><a href="#QPS-直接-快速失败" class="headerlink" title="QPS-直接-快速失败"></a>QPS-直接-快速失败</h3><p><strong>QPS-直接-快速失败</strong>：当访问接口 <code>/sentinel/service1</code> 当每秒钟的请求流量大于 1 之后直接快速失败</p><ul><li><strong>阈值类型：</strong>QPS</li><li><strong>流控模式：</strong>直接</li><li><strong>流控效果：</strong>快速失败</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401260951256.png" alt="image-20240126095102202" style="zoom:100%;float:left"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401260958464.png" alt="image-20240126095831425"></p><ul><li><strong>测试结果</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401260959018.gif" alt="动画" style="zoom:100%;float:left"></p><h3 id="线程数-直接-快速失败"><span class="post-title-index">4.2. </span><a href="#线程数-直接-快速失败" class="headerlink" title="线程数-直接-快速失败"></a>线程数-直接-快速失败</h3><p><strong>线程数-直接-快速失败</strong>：当访问接口 <code>/sentinel/service1</code> 当每秒钟的请求线程数大于 1 之后直接快速失败</p><ul><li><strong>阈值类型：</strong>QPS</li><li><strong>流控模式：</strong>直接</li><li><strong>流控效果：</strong>快速失败</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261020523.png" alt="image-20240126102018487" style="zoom:100%;float:left"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261021413.png" alt="image-20240126102101376"></p><p><strong>测试结果</strong></p><ul><li>修改 <code>/sentinel/service1</code> 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/service1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">service1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelController.service1()&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261035873.gif" alt="动画" style="zoom:100%;float:left"></p><h3 id="QPS-关联-快速失败"><span class="post-title-index">4.3. </span><a href="#QPS-关联-快速失败" class="headerlink" title="QPS-关联-快速失败"></a>QPS-关联-快速失败</h3><p><strong>QPS-关联 -快速失败</strong> ：当访问关联资源 <code>/sentinel/service2</code> 当每秒钟的请求线程数大于 1 时，直接限流 <code>sentinel</code> 的访问地址。</p><ul><li><strong>阈值类型：</strong>QPS</li><li><strong>流控模式：</strong>关联</li><li><strong>流控效果：</strong>快速失败</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261055406.png" alt="image-20240126105511367" style="zoom:100%;float:left"></p><ul><li>测试结果，当 <code>/sentinel/service2</code> 请求数大于 1 时，再请求 <code>/sentinel/service1</code> 会直接报错</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261059328.gif" alt="image" style="zoom:100%;float:left"></p><h3 id="QPS-直接-Warm-Up"><span class="post-title-index">4.4. </span><a href="#QPS-直接-Warm-Up" class="headerlink" title="QPS-直接-Warm Up"></a>QPS-直接-Warm Up</h3><p><strong>QPS-直接 -Warm Up</strong> ：避免低水位服务器突然接收到大量请求宕机采用逐渐放宽限流策略，例如 QPS = 3，预热时长 = 10，冷加载因子默认为 3，就是要让该资源在第 10 秒的时候每秒能够承受每秒 3 次并发请求数量，第一次进行限流的时间点大概在 10/3 次请求时发生</p><ul><li><strong>阈值类型：</strong>QPS</li><li><strong>流控模式：</strong>直接 </li><li><strong>流控效果：</strong>Warm Up</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261127321.png" alt="image-20240126112719281" style="zoom:100%;float:left"></p><h3 id="QPS-直接-排队等待"><span class="post-title-index">4.5. </span><a href="#QPS-直接-排队等待" class="headerlink" title="QPS-直接-排队等待"></a>QPS-直接-排队等待</h3><p><strong>QPS-直接-排队等待：</strong>匀速器模式，所有请求堆积在入口处等待，以QPS为准每秒放行响应的请求进行处理，请求间隔为（1/阈值s），可设置超时时间来过滤掉部分等待中的请求，超时时间需要小于请求的间隔才能生效。</p><ul><li><strong>阈值类型：</strong>QPS</li><li><strong>流控模式：</strong>直接 </li><li><strong>流控效果：</strong>排队等待</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261135885.png" alt="image-20240126113537846" style="zoom:100%;float:left"></p><ul><li>测试结果: 不管每秒有多少请求，只允许有一个请求通过。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261135577.png" alt="image-20240126113516540" style="zoom:80%;float:left"></p><ul><li>官网案例</li></ul><p><img src="https://github.com/alibaba/Sentinel/wiki/image/queue.gif" alt="img" style="zoom:81%;float:left"></p><h3 id="自定义限流配置"><span class="post-title-index">4.6. </span><a href="#自定义限流配置" class="headerlink" title="自定义限流配置"></a>自定义限流配置</h3><ul><li>由于上诉中所有抛出的异常都是 Sentinel 自带异常 <code>Blocked by Sentinel（flow limiting）</code> ，我们需要自定义抛出异常信息。</li></ul><h4 id="实现需求-1"><span class="post-title-index">4.6.1. </span><a href="#实现需求-1" class="headerlink" title="实现需求"></a>实现需求</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：创建自定义限流控制类：SentinelCustomerController</span><br><span class="line">2. Step-2：创建自定义限流处理类：SentinelBlockHandle</span><br><span class="line">3. Step-3：创建 Sentinel 界面配置: 资源名称限流、URL 地址限流</span><br><span class="line">4. Step-4：单元测试: 资源名称限流、URL 地址限流</span><br></pre></td></tr></table></figure><h4 id="实现结果-1"><span class="post-title-index">4.6.2. </span><a href="#实现结果-1" class="headerlink" title="实现结果"></a>实现结果</h4><ul><li>使用 <strong>资源名称限流</strong> 测试，最后的打印结果是自定义信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401291630030.gif" alt="image" style="zoom:100%;float:left"></p><ul><li>使用 <strong>URL 地址限流</strong> 测试，最后的打印结果是 <code>Sentinel</code> 自带的异常信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401291626022.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="代码截图"><span class="post-title-index">4.6.3. </span><a href="#代码截图" class="headerlink" title="代码截图"></a>代码截图</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401291634167.png" alt="image-20240129163457128" style="zoom:100%;float:left"></p><h4 id="实现步骤-1"><span class="post-title-index">4.6.4. </span><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：创建自定义限流控制类：SentinelCustomerController</span><br><span class="line">2. Step-2：创建自定义限流处理类：SentinelBlockHandle</span><br><span class="line">3. Step-3：创建 Sentinel 界面配置</span><br></pre></td></tr></table></figure><p><strong>Step-1：创建自定义限流控制类：SentinelCustomerController</strong></p><ul><li><strong>@SentinelResource：</strong>用于定义资源，并提供可选的异常处理和 fallback 配置项</li><li><strong>value：</strong>资源名称</li><li><strong>blockHandlerClass：</strong>对应的类的 Class 对象</li><li><strong>blockHandler：</strong>blockHandler 对应处理 BlockException 的函数名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sentinel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelCustomerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SentinelResource: 用于定义资源，并提供可选的异常处理和 fallback 配置项。</span></span><br><span class="line"><span class="comment">     * * value: 资源名称</span></span><br><span class="line"><span class="comment">     * * blockHandlerClass: 对应的类的 Class 对象</span></span><br><span class="line"><span class="comment">     * * blockHandler: blockHandler 对应限流处理 BlockException 的函数名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;customerBlockHandler&quot;, blockHandlerClass = SentinelExceptionHandler.class, blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">customerBlockHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelCustomerController customerBlockHandler()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-2：创建自定义限流处理类：SentinelBlockHandle</strong></p><ul><li>切记：在调用端和全局异常类中的方法名，已经方法参数一定要保持一致。不然无法限流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sentinel限流、降级和熔断全局异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultUtil <span class="title function_">handleException</span><span class="params">(BlockException exception)</span> &#123;</span><br><span class="line">        <span class="type">ResultUtil</span> <span class="variable">resultUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultUtil</span>();</span><br><span class="line">        <span class="comment">// 处理限流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">                resultUtil = ResultUtil.failure(ResultCodeEnum.SENTINEL_INTERFACE_CURRENT_LIMIT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">                resultUtil = ResultUtil.failure(ResultCodeEnum.SENTINEL_SERVICE_DOWNGRADE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">                resultUtil = ResultUtil.failure(ResultCodeEnum.SENTINEL_HOTSPOT_PARAMETER_CURRENT_LIMIT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> SystemBlockException) &#123;</span><br><span class="line">                resultUtil = ResultUtil.failure(ResultCodeEnum.SENTINEL_TRIGGER_SYSTEM_PROTECTION_RULES);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">                resultUtil = ResultUtil.failure(ResultCodeEnum.SENTINEL_AUTHORIZATION_RULES_FAILED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 处理熔断，可以记录日志或者返回特定的错误信息</span></span><br><span class="line">            <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SENTINEL_INTERFACE_CURRENT_LIMIT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-3：创建 Sentinel 界面配置</strong></p><p>在 Sentinel 控制台界面中，存在两种不同的限流方式，分别是 <strong>资源名称限流</strong> 和 <strong>URL 地址限流</strong></p><ul><li><strong>资源名称限流</strong>：资源名称是通过在 <code>@SentinelResource</code> 注解中指定的。</li><li><strong>URL 地址限流</strong>：限流规则会根据请求的 URL 进行匹配。</li><li><strong>注意：</strong>使用 <strong>URL 地址限流</strong> 会抛出 Sentinel 自带异常 <code>Blocked by Sentinel（flow limiting）</code> ，使用 资源名称限流 则会走自定义的异常。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401291431615.png" alt="image-20240129143143552"></p><ul><li>使用 <strong>资源名称限流</strong> 配置 Sentinel 界面信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401291444490.png" alt="image-20240129144440448" style="zoom:100%;float:left"></p><ul><li>使用 <strong>URL 地址限流</strong> 配置 Sentinel 界面信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401291625479.png" alt="image-20240129162512418" style="zoom:100%;float:left"></p><h2 id="Sentinel-熔断降级"><span class="post-title-index">5. </span><a href="#Sentinel-熔断降级" class="headerlink" title="Sentinel 熔断降级"></a>Sentinel 熔断降级</h2><blockquote><p>官网地址：<a href="https://sentinelguard.io/zh-cn/docs/circuit-breaking.html">https://sentinelguard.io/zh-cn/docs/circuit-breaking.html</a></p></blockquote><p><strong>服务降级：</strong>当依赖服务不可用时，返回一个备用的默认值或者执行备选方案，确保系统的基本功能仍然可以使用。</p><p>例如，支付的时候，可能需要远程调用银联提供的 API；然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402041540767.png" alt="62410811-cd871680-b61d-11e9-9df7-3ee41c618644"></p><h3 id="服务降级策略"><span class="post-title-index">5.1. </span><a href="#服务降级策略" class="headerlink" title="服务降级策略"></a>服务降级策略</h3><p>在 Sentinel 中，降级策略是一种应对系统负载过大或异常情况的手段，通过限制或拒绝一定比例的请求，以保护系统的稳定性和可靠性。</p><ul><li><strong>慢调用比例（Slow Request Ratio）：</strong> 指的是在一定时间内，系统处理时间超过预设阈值的请求所占的比例。</li><li><strong>异常比例（Error Request Ratio）：</strong> 表示系统在一定时间内发生异常的请求所占的比例。异常可以包括各种错误，如超时、网络错误等。</li><li><strong>异常数（Error Request Number）：</strong>是在一定时间内发生的异常请求的数量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261424857.png" alt="image-20240126142416821" style="zoom:100%;float:left"></p><h4 id="慢调用比例（Slow-Request-Ratio）"><span class="post-title-index">5.1.1. </span><a href="#慢调用比例（Slow-Request-Ratio）" class="headerlink" title="慢调用比例（Slow Request Ratio）"></a>慢调用比例（Slow Request Ratio）</h4><blockquote><p>慢调用比例（Slow Request Ratio）: 指的是在一定时间内，系统处理时间超过预设阈值的请求所占的比例。</p></blockquote><ul><li>配置类容：我们希望每个请求在 200 ms 处理完成，如果在 200 ms 没有处理完成，我们希望在未来的 2S 中的时间窗口期打开断路器。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261522115.png" alt="image-20240126152225081" style="zoom:100%;float:left"></p><ul><li>代码配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/service3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">service3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelController.service3() Slow Request Ratio&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试配置：可以明显的看到当熔断之后，再次访问直接返回错误信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261524089.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="异常比例（Error-Request-Ratio）"><span class="post-title-index">5.1.2. </span><a href="#异常比例（Error-Request-Ratio）" class="headerlink" title="异常比例（Error Request Ratio）"></a>异常比例（Error Request Ratio）</h4><blockquote><p>异常比例（Error Request Ratio）: 表示系统在一定时间内发生异常的请求所占的比例。异常可以包括各种错误，如超时、网络错误等。</p></blockquote><ul><li>配置内容：我们希望当请求数量（默认为5）的异常比例大于 80%，我们希望在未来的 3S 中的时间窗口期打开断路器。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261535327.png" alt="image-20240126153506291" style="zoom:100%;float:left"></p><ul><li>代码配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/service4&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ResultUtil <span class="title function_">service4</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;/ by zero&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果：我们请求的是一个错误页面，但是当请求五次之后，异常比例达到了 80% 直接熔断了服务。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261547407.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="异常数（Error-Request-Number）"><span class="post-title-index">5.1.3. </span><a href="#异常数（Error-Request-Number）" class="headerlink" title="异常数（Error Request Number）"></a>异常数（Error Request Number）</h4><blockquote><p>异常数（Error Request Number）: 是在一定时间内发生的异常请求的数量。</p></blockquote><ul><li>配置内容：是指当资源近1分钟的异常数目超过阈值 8 之后会进行熔断，注意由于统计时间窗口是分钟级别的，若时间窗口小于 60s，则结束熔断状态后仍可能再进入熔断状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261551256.png" alt="image-20240126155106218" style="zoom:100%;float:left"></p><ul><li>测试结果：我们请求的是一个错误页面，但是当请求 9 次之后，异常数达到了 8 次直接熔断了服务。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261557511.gif" alt="image" style="zoom:100%;float:left"></p><h3 id="服务熔断"><span class="post-title-index">5.2. </span><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><h4 id="实现需求-2"><span class="post-title-index">5.2.1. </span><a href="#实现需求-2" class="headerlink" title="实现需求"></a>实现需求</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：创建消费者 03-spring-cloud-alibaba-sentinel-consumer-2500</span><br><span class="line">2. Step-2：创建生产者 03-spring-cloud-alibaba-sentinel-producer2-2600</span><br><span class="line">3. Step-3：创建生产者 03-spring-cloud-alibaba-sentinel-producer3-2700</span><br><span class="line">4. 通过访问消费者然后从生产者获取对应的消息进行返回</span><br></pre></td></tr></table></figure><h4 id="实现结果-2"><span class="post-title-index">5.2.2. </span><a href="#实现结果-2" class="headerlink" title="实现结果"></a>实现结果</h4><h5 id="Ribbon-实现结果"><span class="post-title-index">5.2.2.1. </span><a href="#Ribbon-实现结果" class="headerlink" title="Ribbon 实现结果"></a>Ribbon 实现结果</h5><ul><li>不进行任何 Sentinel 限流、降级配置，当出现业务异常时进行降级处理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301022165.gif" alt="image" style="zoom:100%;float:left"></p><ul><li>配置 Sentinel 限流操作时, 正常情况下QPS每秒超过1S时进行限流，出现异常情况下，限流和降级同时出现。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301023120.png" alt="image-20240130102352079" style="zoom:100%;float:left"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301025462.gif" alt="image" style="zoom:100%;float:left"></p><h5 id="OpenFeign-实现结果"><span class="post-title-index">5.2.2.2. </span><a href="#OpenFeign-实现结果" class="headerlink" title="OpenFeign 实现结果"></a>OpenFeign 实现结果</h5><ul><li>测试服务降级：关闭生产者 producer1、producer2 的服务</li><li>测试流量控制：在 Sentinel 中配置流控规则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301115999.png" alt="image-20240130111556951" style="zoom:100%;float:left"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301118259.gif" alt="image" style="zoom:100%;float:left"></p><h4 id="代码截图-1"><span class="post-title-index">5.2.3. </span><a href="#代码截图-1" class="headerlink" title="代码截图"></a>代码截图</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301031204.png" alt="image-20240130103147159" style="zoom:100%;float:left"></p><h4 id="Ribbon-实现"><span class="post-title-index">5.2.4. </span><a href="#Ribbon-实现" class="headerlink" title="Ribbon 实现"></a>Ribbon 实现</h4><p><strong>@SentinelResource</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(</span></span><br><span class="line"><span class="meta">    value = &quot;fallback&quot;, // 资源限定名</span></span><br><span class="line"><span class="meta">    fallback = &quot;handlerFallback&quot;, // fallback: 降级时调用; </span></span><br><span class="line"><span class="meta">    blockHandler = &quot;blockHandler&quot;, // blockHandler: 流控时调用;</span></span><br><span class="line"><span class="meta">    exceptionsToIgnore = &#123;IllegalArgumentException.class&#125; // 忽略异常信息</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><ul><li>消费者-控制类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ribbon/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.sentinel-producer-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serviceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// fallback 降级时调用</span></span><br><span class="line"><span class="comment">//    @SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;)</span></span><br><span class="line">    <span class="comment">// fallback: 降级时调用; blockHandler: 流控时调用;</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;)</span></span><br><span class="line">    <span class="comment">// fallback: 降级时调用; blockHandler: 流控时调用; exceptionsToIgnore: 忽略异常</span></span><br><span class="line"><span class="comment">//    @SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;, exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">ResultUtil</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(serviceUrl + <span class="string">&quot;/producer/&quot;</span> + id, ResultUtil.class);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Id is not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == result.getData()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;param is not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">handlerFallback</span><span class="params">(Long id, Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR, <span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot; ,fallback: 降级时调用, &quot;</span> + throwable.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">blockHandler</span><span class="params">(Long id, BlockException blockException)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR, <span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot; ,blockHandler: 流控时调用, &quot;</span> + blockException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>生产者-控制类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer1Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/producer/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">producer1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        Map&lt;Long, String&gt; map = <span class="built_in">this</span>.getResult();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(map.get(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, String&gt; <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;Long, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1L</span>, UUID.randomUUID().toString());</span><br><span class="line">        map.put(<span class="number">2L</span>, UUID.randomUUID().toString());</span><br><span class="line">        map.put(<span class="number">3L</span>, UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OpenFeign-实现"><span class="post-title-index">5.2.5. </span><a href="#OpenFeign-实现" class="headerlink" title="OpenFeign 实现"></a>OpenFeign 实现</h4><ul><li>注意：<strong>使用 <code>OpenFeign</code> 本质上还是和 <code>Ribbon</code> 有区别的</strong></li></ul><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 开启消费者启动类 Sentinel 限流控制注解</span><br><span class="line">2. Step-2: 配置消费者 application.yml 中 feign 对 Sentinel 的支持</span><br><span class="line">3. Step-3: 创建消费者控制类 FeignConsumerController</span><br><span class="line">4. Step-4: 创建消费者 Feign 调用类 ApiProducerFeign、ProducerFallback</span><br></pre></td></tr></table></figure><p><strong>Step-1: 开启启动类 Sentinel 限流控制注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Alibaba Sentinel 消费者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudAlibabaSentinelConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaSentinelConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-2: 配置 application.yml 中 feign 对 Sentinel 的支持</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 开启 Feign 对 Sentinel 支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建消费者控制类 FeignConsumerController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/feign/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ApiProducerFeign producerFeign;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> producerFeign.producer(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建消费者 Feign 调用类 ApiProducerFeign、ProducerFallback</strong></p><ul><li>ApiProducerFeign.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;spring-cloud-alibaba-sentinel-producer&quot;, fallback = ProducerFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApiProducerFeign</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/producer/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">producer</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ProducerFallback.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerFallback</span> <span class="keyword">implements</span> <span class="title class_">ApiProducerFeign</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">producer</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR, <span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot; ,fallback: 降级时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sentinel-热点规则"><span class="post-title-index">6. </span><a href="#Sentinel-热点规则" class="headerlink" title="Sentinel 热点规则"></a>Sentinel 热点规则</h2><blockquote><p>官网地址：<a href="https://sentinelguard.io/zh-cn/docs/parameter-flow-control.html">https://sentinelguard.io/zh-cn/docs/parameter-flow-control.html</a></p></blockquote><p><strong>热点规则：</strong>热点 key 限流是一种在分布式系统中常见的限流策略，它通过对某些热点资源或关键操作进行限制，防止其请求过于频繁，以保护系统的稳定性。其中 Sentinel 主要是以 QPS 作为限流模式</p><ul><li><strong>QPS 限制（Queries Per Second）：</strong>对于特定的热点 key，限制每秒钟允许的请求次数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261732982.png" alt="image-20240126173224922" style="zoom:100%;float:left"></p><h3 id="实现需求-3"><span class="post-title-index">6.1. </span><a href="#实现需求-3" class="headerlink" title="实现需求"></a>实现需求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当我们访问 http://localhost/sentinel/service5?param1=1 时，当参数索引 0 每秒的 QPS 阈值超过了 1 则进行限流。</span><br></pre></td></tr></table></figure><h3 id="实现结果-3"><span class="post-title-index">6.2. </span><a href="#实现结果-3" class="headerlink" title="实现结果"></a>实现结果</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261757401.gif" alt="image" style="zoom:100%;float:left"></p><h3 id="实现步骤-2"><span class="post-title-index">6.3. </span><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><strong>代码配置</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/service5&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;hotKey&quot;, blockHandler = &quot;dealHotKey&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">service5</span><span class="params">(<span class="meta">@RequestParam(value = &quot;param1&quot;,required = false)</span> String param1)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelController.service5() Hot Key&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">dealHotKey</span><span class="params">(String param1, BlockException exception)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;This is SentinelController.service5() dealHotKey: Error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们配置 <code>/sentinel/service5</code> 的界面，当参数索引 0 每秒的 QPS 阈值超过了 1 则进行限流</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401261755719.png" alt="image-20240126175533678" style="zoom:100%;float:left"></p><h2 id="Sentinel-持久化配置"><span class="post-title-index">7. </span><a href="#Sentinel-持久化配置" class="headerlink" title="Sentinel 持久化配置"></a>Sentinel 持久化配置</h2><ul><li>每当我们服务重启之后，所有的配置 <strong>流控规则</strong>、<strong>降级规则</strong>、<strong>热点参数限流规则</strong> 全部都会失效，所以针对这个问题直接配合 Nacos 做到持久化。</li></ul><h3 id="实现需求-4"><span class="post-title-index">7.1. </span><a href="#实现需求-4" class="headerlink" title="实现需求"></a>实现需求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当项目重启之后依旧保留 Sentinel 服务的流控规则、降级规则、热点参数限流规则配置</span><br></pre></td></tr></table></figure><h3 id="实现结果-4"><span class="post-title-index">7.2. </span><a href="#实现结果-4" class="headerlink" title="实现结果"></a>实现结果</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301406801.gif" alt="image"></p><h3 id="实现步骤-3"><span class="post-title-index">7.3. </span><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 导入消费者 pom.xml 依赖</span><br><span class="line">2. Step-2: 修改消费者 application.yml 配置</span><br><span class="line">3. Step-3: 创建 Nacos 配置信息</span><br><span class="line">4. Step-4: 创建对应 Sentinel 控制类的方法</span><br><span class="line">5. Step-5: 创建 Sentinel 流控规则配置信息</span><br></pre></td></tr></table></figure><p><strong>Step-1: 导入消费者 pom.xml 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成 Nacos 做持久化信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-2: 修改消费者 application.yml 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-sentinel-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># Nacos 服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.20</span><span class="string">:8001</span></span><br><span class="line">        <span class="attr">ip:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.221</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># 取消控制台懒加载</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># 配置 Sentinel Dashboard 地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment"># 默认端口 8719</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="comment"># 集成 Nacos 做持久化</span></span><br><span class="line">          <span class="attr">datasource:</span></span><br><span class="line">            <span class="attr">ds1:</span></span><br><span class="line">              <span class="attr">nacos:</span></span><br><span class="line">                <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.20</span><span class="string">:8001</span></span><br><span class="line">                <span class="attr">dataId:</span> <span class="string">spring-cloud-alibaba-sentinel-consumer</span></span><br><span class="line">                <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">                <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">                <span class="attr">rule_type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建 Nacos 配置信息</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301402879.png" alt="image-20240130140225806" style="zoom:100%;float:left"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/feign/consumer/fallback/persistence&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;limitApp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strategy&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;controlBehavior&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clusterMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建对应 Sentinel 控制类的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/feign/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/fallback/persistence&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">persistence</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5: 创建 Sentinel 流控规则配置信息</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401301357421.png" alt="image-20240130135719354" style="zoom:100%;float:left"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba（二）</title>
      <link href="/posts/32b3bb9a.html"/>
      <url>/posts/32b3bb9a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba-Nacos"><a href="#Spring-Cloud-Alibaba-Nacos" class="headerlink" title="Spring Cloud Alibaba Nacos"></a>Spring Cloud Alibaba Nacos</h1><blockquote><p>代码地址：<a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba">https://github.com/wicksonZhang/Spring-Cloud-Alibaba</a></p></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Nacos-解决了什么问题"><span class="post-title-index">1.1. </span><a href="#Nacos-解决了什么问题" class="headerlink" title="Nacos 解决了什么问题"></a>Nacos 解决了什么问题</h3><p>Nacos 主要解决了微服务中服务注册与发现和服务配置问题，在 <code>Spring Cloud</code> 中如果需要实现服务注册与发现和配置需要使用到 <code>Eureka</code> 、<code>Spring Cloud Config</code> 和 <code>Spring Cloud Bus</code> 。但现在只需要使用一个 <code>Nacos</code> 就可以解决问题。</p><ul><li><strong>服务注册与发现</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231110918.png" alt="service-discovery-0257df233735d6e39adc8e8a0fd27f86" style="zoom:33%;float:left"></p><ul><li><strong>服务配置</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231106290.png" alt="service-config" style="zoom: 22.5%;float:left"></p><h3 id="Nacos-是什么"><span class="post-title-index">1.2. </span><a href="#Nacos-是什么" class="headerlink" title="Nacos 是什么"></a>Nacos 是什么</h3><blockquote><p>官网地址：<a href="https://nacos.io/">https://nacos.io/</a></p><p>Github地址：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p></blockquote><p>Nacos：<code>Dynamic Naming and Configuration Service</code> 的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它由阿里巴巴开源团队维护，旨在为现代微服务架构提供一套集成的解决方案。</p><h3 id="注册中心对比"><span class="post-title-index">1.3. </span><a href="#注册中心对比" class="headerlink" title="注册中心对比"></a>注册中心对比</h3><p>以下是 <code>Nacos</code> 相对于 <code>Eureka</code> 的一些优点：</p><ul><li><strong>动态配置管理：</strong> <code>Nacos</code> 不仅提供了服务注册与发现的功能，还集成了动态配置管理。</li><li><strong>健康检查更灵活：</strong> <code>Nacos</code> 提供了更灵活的健康检查机制，支持不同的健康检查方式和策略。</li><li><strong>更强大的集群管理：</strong> <code>Nacos</code> 在集群管理方面更为强大，支持多数据中心、多命名空间的配置管理和服务发现。</li></ul><div class="table-container"><table><thead><tr><th>特性 / 注册中心</th><th>Nacos</th><th>Eureka</th><th>Zookeeper</th><th>Consul</th></tr></thead><tbody><tr><td><strong>服务发现</strong></td><td>✔ 支持</td><td>✔ 支持</td><td>✔ 支持</td><td>✔ 支持</td></tr><tr><td><strong>配置管理</strong></td><td>✔ 支持</td><td>✖ 不支持（需结合Spring Cloud Config）</td><td>✖ 不支持（可结合其他配置中心）</td><td>✖ 不支持（可结合其他配置中心）</td></tr><tr><td><strong>多数据中心支持</strong></td><td>✔ 支持</td><td>✔ 支持</td><td>✖ 不支持</td><td>✔ 支持</td></tr><tr><td><strong>动态 DNS 服务</strong></td><td>✔ 支持</td><td>✖ 不支持</td><td>✖ 不支持</td><td>✖ 不支持</td></tr><tr><td><strong>健康检查</strong></td><td>✔ 支持</td><td>✖ 不支持（需结合Spring Cloud Health）</td><td>✔ 支持</td><td>✔ 支持</td></tr><tr><td><strong>事件监听机制</strong></td><td>✔ 支持</td><td>✔ 支持</td><td>✔ 支持</td><td>✔ 支持</td></tr><tr><td><strong>支持协议</strong></td><td>HTTP、DNS、gRPC等</td><td>HTTP</td><td>客户端/服务器模型，可扩展协议</td><td>HTTP，支持DNS</td></tr><tr><td><strong>一致性协议</strong></td><td>CP + AP</td><td>AP（强调可用性和分区容忍性）</td><td>CP 协议（强一致性）</td><td>CP + AP协议</td></tr><tr><td><strong>生态系统整合</strong></td><td>Spring Cloud Alibaba 生态系统</td><td>Spring Cloud 生态系统</td><td>社区广泛使用，适用于多种场景</td><td>Spring Cloud 生态系统</td></tr><tr><td><strong>开发维护</strong></td><td>阿里巴巴维护，活跃的社区</td><td>Netflix 维护，社区逐渐减少</td><td>Apache 维护，社区广泛使用</td><td>HashiCorp 维护，社区活跃</td></tr></tbody></table></div><h2 id="Nacos-安装启动"><span class="post-title-index">2. </span><a href="#Nacos-安装启动" class="headerlink" title="Nacos 安装启动"></a>Nacos 安装启动</h2><blockquote><p>下载地址：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>下载版本：nacos-server-2.0.1.zip</p></blockquote><ul><li>下载完成之后，解压到指定目录：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231402963.png" alt="image-20240123140212936" style="zoom:100%;float:left"></p><ul><li>启动命令如下，如果看到了对应图标且不报错说明启动成功<ul><li>默认启动是集群模式：startup.cmd</li><li>如果需要指定为单机模式：startup.cmd -m standalone</li></ul></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\software\nacos\bin&gt;startup.cmd -m standalone</span><br><span class="line"><span class="string">&quot;nacos is starting with standalone&quot;</span></span><br></pre></td></tr></table></figure><ul><li>访问地址：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> ，用户名和密码都是 nacos</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231409649.png" alt="image-20240123140904614" style="zoom:100%;float:left"></p><h2 id="Nacos-单机操作"><span class="post-title-index">3. </span><a href="#Nacos-单机操作" class="headerlink" title="Nacos 单机操作"></a>Nacos 单机操作</h2><blockquote><p>代码地址如下：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba/tree/main/02-spring-cloud-alibaba-nacos-consumer-2300">02-spring-cloud-alibaba-nacos-consumer-2300</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba/tree/main/02-spring-cloud-alibaba-nacos-producer1-2100">02-spring-cloud-alibaba-nacos-producer1-2100</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba/tree/main/02-spring-cloud-alibaba-nacos-producer2-2200">02-spring-cloud-alibaba-nacos-producer2-2200</a></li></ul></blockquote><h3 id="实现需求"><span class="post-title-index">3.1. </span><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 当用户访问消费者服务接口时，消费者服务会利用相应的路由将请求分派给特定的服务提供者。</span><br><span class="line">2. 服务提供者则会根据配置中心的设定，检索相关内容，并将消息传递回消费者服务。</span><br></pre></td></tr></table></figure><h3 id="实现结果"><span class="post-title-index">3.2. </span><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h3><ul><li>访问地址：<a href="http://localhost:2300/consumer/getProducer">http://localhost:2300/consumer/getProducer</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231550837.gif" alt="动画"></p><h3 id="实现步骤"><span class="post-title-index">3.3. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 创建 提供者1 服务，并将其注册到Nacos中。</span><br><span class="line">2. 创建 提供者2 服务，并将其注册到Nacos中。</span><br><span class="line">3. 创建 消费者 服务，并将其注册到Nacos中，通过 Nacos 的负载均衡将消费者的请求转发到服务提供者。</span><br></pre></td></tr></table></figure><ul><li>相关代码结构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231552005.png" alt="image-20240123155245973" style="zoom:100%;float:left"></p><h3 id="服务提供者1"><span class="post-title-index">3.4. </span><a href="#服务提供者1" class="headerlink" title="服务提供者1"></a>服务提供者1</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Step-1: 创建 服务提供者1 02-spring-cloud-alibaba-nacos-producer1-2100</span><br><span class="line">Step-2: 导入 pom.xml 依赖</span><br><span class="line">Step-3: 创建 bootstrap.yml、application.yml</span><br><span class="line">Step-4: 创建启动类 SpringCloudAlibabaProducer1Application</span><br><span class="line">Step-5: 创建控制类 Producer1Controller</span><br></pre></td></tr></table></figure><p><strong>Step-2: 导入 pom.xml 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖 common --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-alibaba-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud alibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud alibaba config --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建 bootstrap.yml、application.yml</strong></p><ul><li><code>bootstrap.yml</code>： 主要用于应用程序的引导阶段，会优先被加载。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------- 应用端口 -------------------------</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-nacos-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="comment"># -------------------------------- nacos地址 ---------------------------------</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 服务配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line"><span class="comment"># -------------------------------- nacos地址 ---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- 客户端配置暴露监控端点 start ---------------------------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#--------------------------------- 客户端配置暴露监控端点 end   ---------------------------------</span></span><br></pre></td></tr></table></figure><ul><li><code>application.yml</code>：主要用于应用程序的主配置文件，如数据库连接、服务端口。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 开发环境</span></span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建启动类 SpringCloudAlibabaProducer1Application</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Alibaba 生产者启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudAlibabaProducer1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaProducer1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5: 创建控制类 Producer1Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 支持 Nacos 动态刷新配置</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/producer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer1Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/nacos&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProducerConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;The producer1 server.port: &quot;</span> + serverPort + <span class="string">&quot; registered to nacos.The producer1 config：&quot;</span> + configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务提供者2"><span class="post-title-index">3.5. </span><a href="#服务提供者2" class="headerlink" title="服务提供者2"></a>服务提供者2</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Step-1: 创建 服务提供者1 02-spring-cloud-alibaba-nacos-producer2-2200</span><br><span class="line">Step-2: 导入 pom.xml 依赖</span><br><span class="line">Step-3: 创建 bootstrap.yml、application.yml</span><br><span class="line">Step-4: 创建启动类 SpringCloudAlibabaProducer2Application</span><br><span class="line">Step-5: 创建控制类 Producer2Controller</span><br></pre></td></tr></table></figure><p><strong>操作与服务提供者保持一致</strong></p><h3 id="服务消费者"><span class="post-title-index">3.6. </span><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Step-1: 创建 服务消费者 02-spring-cloud-alibaba-nacos-consumer-2300</span><br><span class="line">Step-2: 导入 pom.xml 依赖</span><br><span class="line">Step-3: 创建 application.yml</span><br><span class="line">Step-4: 创建启动类 SpringCloudAlibabaConsumerApplication</span><br><span class="line">Step-5: 创建控制类 ConsumerController</span><br><span class="line">Step-6: 创建 RestTemplate 配置类</span><br></pre></td></tr></table></figure><p><strong>Step-2: 导入 pom.xml 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖 common --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-alibaba-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud alibaba Nacos 注册与发现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建 <code>application.yml</code></strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------- 应用端口 -------------------------</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2300</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-nacos-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="comment"># -------------------------------- nacos地址 ---------------------------------</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 服务注册中心地址</span></span><br><span class="line"><span class="comment"># -------------------------------- nacos地址 ---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------- 服务提供者路由 -------------------------------</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://spring-cloud-alibaba-nacos-producer</span></span><br><span class="line"><span class="comment"># ------------------------------- 服务提供者路由 -------------------------------</span></span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建启动类 SpringCloudAlibabaConsumerApplication</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Alibaba Consumer 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud.alibaba&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudAlibabaConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudAlibabaConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5: 创建控制类 ConsumerController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getProducer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProducer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverUrl + <span class="string">&quot;/producer/nacos&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-6: 创建 RestTemplate 配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RestTemplateConfig 用作负载均衡配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务注册中心"><span class="post-title-index">3.7. </span><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h3><p>当 服务提供者1、服务提供者2、服务消费者 启动时，查看 服务管理 —&gt; 服务列表</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231633076.png" alt="image-20240123163334025"></p><h3 id="服务配置中心"><span class="post-title-index">3.8. </span><a href="#服务配置中心" class="headerlink" title="服务配置中心"></a>服务配置中心</h3><p>由于我们需要通过在服务提供者中读取 <code>config.info</code> 的配置文件信息</p><ul><li><strong>注意：Data ID 配置规则如下：</strong></li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data ID = <span class="built_in">$</span>&#123;spring.application.name&#125;-<span class="built_in">$</span>&#123;spring.profiles.active&#125;.<span class="built_in">$</span>&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231635810.png" alt="image-20240123163538760"></p><ul><li>我们需要在 <strong>配置管理 —&gt; 配置列表 —&gt; +</strong> 中创建并配置如下内容</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231636929.png" alt="image-20240123163647874"></p><h2 id="Nacos-配置说明"><span class="post-title-index">4. </span><a href="#Nacos-配置说明" class="headerlink" title="Nacos 配置说明"></a>Nacos 配置说明</h2><p>在实际开发场景中，我们需要针对不同的开发环境采用不同的系统环境配置，如下是Nacos的领域模型。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241040438.jpeg" alt="nacos_data_model" style="zoom:80%;float:left"></p><p><code>Namespace</code> 命名空间、<code>Group</code> 分组、<code>Service/Data Id</code> 这些都是为了进⾏归类管理，把服务和配置⽂件进⾏归类。</p><div class="table-container"><table><thead><tr><th>名词</th><th>描述</th></tr></thead><tbody><tr><td>Namespace</td><td>用于隔离配置和服务的独立区域。例如开发环境、测试环境、生产环境。</td></tr><tr><td>Group</td><td>对同一个服务的不同实例进行逻辑上的分组。例如，我们有两个项目都需要使用我们的 Nacos。我们可以在同一个 NameSpace 中通过 Group 将他们隔开。</td></tr><tr><td>Service</td><td>一个具体的应用或服务实例，可通过服务注册进行管理。例如，对应具体的应用，如订单服务。</td></tr><tr><td>DataId</td><td>用于唯一标识一个配置项，与服务名、分组和命名空间一起使用。例如，订单服务对应的配置文件名称。</td></tr></tbody></table></div><h3 id="NameSpace"><span class="post-title-index">4.1. </span><a href="#NameSpace" class="headerlink" title="NameSpace"></a>NameSpace</h3><p><code>NameSpace：</code> 命名空间，针对不同的环境进行隔离。在 <code>Nacos</code> 中 <code>NameSpace</code> 的默认空间是 <code>public</code>。</p><ul><li>在配置文件中指定命名空间的配置如下，我们指定 <code>dev</code> 的命名空间：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数配置中心命名空间</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.namespace=571e7679-ab13-4608-abf4-e1a3618398e5</span></span><br></pre></td></tr></table></figure><ul><li>我们需要在 <strong>命名空间 —&gt; 新建命名空间</strong> 中创建并配置，其中我创建 <code>dev</code> 命名空间为例子。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241135000.png" alt="202401241132100"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241132316.png" alt="image-20240124113241282"></p><h3 id="Group"><span class="post-title-index">4.2. </span><a href="#Group" class="headerlink" title="Group"></a>Group</h3><p>Group：一个 <code>NameSpace</code> 下有多个 Group ，其中 Group 默认为 <code>DEFAULT_GROUP</code> ，可以将不同的微服务划分到不同的组。也可以将不同的项目以不同的组进行区分。</p><ul><li>在配置文件中指定组名的配置如下，我们指定 <code>NACOS_DEV_GROUP</code> 组。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数配置中心组别名称</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.group=NACOS_DEV_GROUP</span></span><br></pre></td></tr></table></figure><ul><li>我们需要在 <strong>配置管理 —&gt; 配置列表</strong> 中创建，在 <code>dev</code> 命名空间下，其中我创建 <code>NACOS_DEV_GROUP</code> 组例子。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241142433.png" alt="image-20240124114259379"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241146935.png" alt="image-20240124114637879"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241149130.png" alt="image-20240124114940090"></p><h3 id="Data-ID"><span class="post-title-index">4.3. </span><a href="#Data-ID" class="headerlink" title="Data ID"></a>Data ID</h3><p>Data ID：对应一个服务的配置与服务名、分组和命名空间一起使用。</p><ul><li>在配置文件中指定 Data ID 配置如下。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="string">spring-cloud-alibaba-nacos-producer-dev.yaml</span></span><br></pre></td></tr></table></figure><ul><li>我们需要在 <strong>配置管理 —&gt; 配置列表</strong> 中创建，与创建 Group 时一起创建，具体的配置规则如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241146935.png" alt="image-20240124114637879"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241149130.png" alt="image-20240124114940090"></p><h3 id="测试结果"><span class="post-title-index">4.4. </span><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>我们以上诉 <strong><code>Naocs</code>单机操作</strong>案例，重新修改上述 <strong>服务提供者1</strong>、<strong>服务提供者2</strong> 的 yml 配置文件</p><ul><li><code>application.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 开发环境</span></span><br></pre></td></tr></table></figure><ul><li><code>bootstrap.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-nacos-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos 服务配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="number">571e7679</span><span class="string">-ab13-4608-abf4-e1a3618398e5</span> <span class="comment"># 指定命名空间为 dev</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">NACOS_DEV_GROUP</span> <span class="comment"># 指定组名为 NACOS_DEV_GROUP</span></span><br></pre></td></tr></table></figure><ul><li>访问地址：<a href="http://localhost:2300/consumer/getProducer">http://localhost:2300/consumer/getProducer</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241418212.png" alt="image-20240124141843160"></p><h2 id="Nacos-集群操作"><span class="post-title-index">5. </span><a href="#Nacos-集群操作" class="headerlink" title="Nacos 集群操作"></a>Nacos 集群操作</h2><p>集群模式：主要的作用还是为了保高可用，即使其中的一台 <code>Nacos</code> 宕机也不会影响项目的正常使用。</p><h3 id="实现需求-1"><span class="post-title-index">5.1. </span><a href="#实现需求-1" class="headerlink" title="实现需求"></a>实现需求</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 搭建三台 Nacos 集群，实现相互通讯。</span><br><span class="line">2. 并采用两种方式进行测试：ip直连模式、Nginx代理转发</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241642148.jpeg" alt="deployDnsVipMode.jpg" style="zoom:100%;float:left"></p><h3 id="实现结果-1"><span class="post-title-index">5.2. </span><a href="#实现结果-1" class="headerlink" title="实现结果"></a>实现结果</h3><ul><li><strong>ip直连模式：</strong> 在配置文件中直接配置三个 <code>Nacos</code> 的 <code>ip</code> 地址.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401250930220.gif" alt="动画"></p><ul><li>Nginx代理转发</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401251045177.png" alt="image-20240125104510104" style="zoom:100%;float:left"></p><h3 id="实现步骤-1"><span class="post-title-index">5.3. </span><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401251046992.png" alt="image-20240125104623955" style="zoom:100%;float:left"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 创建 MySQL 服务：192.168.10.16</span><br><span class="line">2. 创建 Nacos1 服务：192.168.10.17, 配置 Nacos 集群服务</span><br><span class="line">3. 创建 Nacos2 服务：192.168.10.18, 配置 Nacos 集群服务</span><br><span class="line">4. 创建 Nacos3 服务：192.168.10.19, 配置 Nacos 集群服务</span><br><span class="line">6. 实现 ip 直连模式</span><br><span class="line">7. 实现 Nginx 代理转发模式</span><br></pre></td></tr></table></figure><h3 id="创建-MySQL-服务"><span class="post-title-index">5.4. </span><a href="#创建-MySQL-服务" class="headerlink" title="创建 MySQL 服务"></a>创建 MySQL 服务</h3><ul><li>由于我们单机版中使用的是 Nacos 自带的数据库，但是在集群版中这是不行的，所以让三台服务连接外部数据库</li><li>数据文件  <a href="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241737759.sql">nacos-mysql.sql</a> 将数据库导入到 自己创建的数据库 <code>nacos_config</code> 中，具体操作如下。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401241742602.gif" alt="动画" style="zoom:80%;float:left"></p><h3 id="创建-Nacos-服务"><span class="post-title-index">5.5. </span><a href="#创建-Nacos-服务" class="headerlink" title="创建 Nacos 服务"></a>创建 Nacos 服务</h3><blockquote><p>下载地址：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>下载版本：nacos-server-2.0.1.tar.gz</p></blockquote><ul><li><strong>注意：我们三台配置都是一样的，我只以其中 192.168.10.17 为例子</strong></li></ul><h4 id="修改-cluster-conf-文件"><span class="post-title-index">5.5.1. </span><a href="#修改-cluster-conf-文件" class="headerlink" title="修改 cluster.conf 文件"></a>修改 <code>cluster.conf</code> 文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># pwd</span></span><br><span class="line">/home/nacos/conf</span><br><span class="line">[root@localhost conf]<span class="comment"># cp cluster.conf.example cluster.conf</span></span><br><span class="line">[root@localhost conf]<span class="comment"># ll</span></span><br><span class="line">总用量 88</span><br><span class="line">-rw-r--r--. 1  502 games  1224 4月  19 2021 1.4.0-ipv6_support-update.sql</span><br><span class="line">-rw-r--r--. 1  502 games  8489 4月  29 2021 application.properties</span><br><span class="line">-rw-r--r--. 1  502 games  6515 4月  19 2021 application.properties.example</span><br><span class="line">-rw-r--r--. 1 root root    670 1月  24 17:47 cluster.conf</span><br><span class="line">-rw-r--r--. 1  502 games   670 3月  18 2021 cluster.conf.example</span><br><span class="line">-rw-r--r--. 1  502 games 31156 4月  29 2021 nacos-logback.xml</span><br><span class="line">-rw-r--r--. 1  502 games 10660 4月  19 2021 nacos-mysql.sql</span><br><span class="line">-rw-r--r--. 1  502 games  8795 4月  19 2021 schema.sql</span><br><span class="line">[root@localhost conf]<span class="comment"># vi cluster.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#it is ip</span></span><br><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="comment"># 我们修改如下配置，变成我们配置的集群服务</span></span><br><span class="line">192.168.10.17:8848</span><br><span class="line">192.168.10.18:8848</span><br><span class="line">192.168.10.19:8848</span><br><span class="line">[root@localhost conf]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="修改-application-yml-文件"><span class="post-title-index">5.5.2. </span><a href="#修改-application-yml-文件" class="headerlink" title="修改 application.yml 文件"></a>修改 <code>application.yml</code> 文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># pwd</span></span><br><span class="line">/home/nacos/conf</span><br><span class="line">[root@localhost conf]<span class="comment"># vi application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 在 properties文件中添加如下数据库连接</span></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://192.168.10.16:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=UTC</span><br><span class="line">db.user.0=root</span><br><span class="line">db.password.0=P@ssw0rd</span><br></pre></td></tr></table></figure><h4 id="启动-Nacos"><span class="post-title-index">5.5.3. </span><a href="#启动-Nacos" class="headerlink" title="启动 Nacos"></a>启动 Nacos</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nacos]<span class="comment"># cd bin/</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ll</span></span><br><span class="line">总用量 20</span><br><span class="line">-rwxr-xr-x. 1 502 games  954 5月  14 2020 shutdown.cmd</span><br><span class="line">-rwxr-xr-x. 1 502 games  951 3月  18 2021 shutdown.sh</span><br><span class="line">-rwxr-xr-x. 1 502 games 3340 4月  19 2021 startup.cmd</span><br><span class="line">-rwxr-xr-x. 1 502 games 4923 4月  19 2021 startup.sh</span><br><span class="line">[root@localhost bin]<span class="comment"># cp startup.sh startup.sh.back</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./startup.sh</span></span><br><span class="line">/home/java/jdk1.8.0_171/bin/java  -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list= -Djava.ext.dirs=/home/java/jdk1.8.0_171/jre/lib/ext:/home/java/jdk1.8.0_171/lib/ext -Xloggc:/home/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/home/nacos/plugins/health,/home/nacos/plugins/cmdb -Dnacos.home=/home/nacos -jar /home/nacos/target/nacos-server.jar  --spring.config.additional-location=file:/home/nacos/conf/ --logging.config=/home/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288</span><br><span class="line">nacos is starting with cluster</span><br><span class="line">nacos is starting，you can check the /home/nacos/logs/start.out</span><br><span class="line">[root@localhost bin]<span class="comment"># netstat -tunlp | grep 8848</span></span><br><span class="line">tcp6       0      0 :::8848                 :::*                    LISTEN      1377/java </span><br></pre></td></tr></table></figure><h4 id="开放端口"><span class="post-title-index">5.5.4. </span><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><ul><li>在 Linux 中开放端口命令如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># firewall-cmd --zone=public --add-port=8848/tcp --permanent</span></span><br><span class="line">success</span><br><span class="line">[root@localhost bin]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line">[root@localhost bin]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意事项：</strong><a href="https://blog.csdn.net/kangxiaoyanl/article/details/132177499">nacos伪集群启动成功，但是服务注册不上的问题</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# firewall-cmd --zone=public --add-port=9849/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@localhost bin]# firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line">[root@localhost bin]#</span><br></pre></td></tr></table></figure><h3 id="ip-直连模式"><span class="post-title-index">5.6. </span><a href="#ip-直连模式" class="headerlink" title="ip 直连模式"></a>ip 直连模式</h3><p><strong>ip直连：</strong>上诉我们已将搭建好了三台 <code>Nacos</code> 服务器信息，我们只需要在 <code>yml</code> 配置文件中修改 <code>Nacos</code> 服务注册地址即可，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-nacos-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># nacos 服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.17</span><span class="string">:8848,192.168.10.18:8848,192.168.10.19:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># nacos 服务配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.17</span><span class="string">:8848,192.168.10.18:8848,192.168.10.19:8848</span> </span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 指定命名空间为 dev</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">fc1c8c25-c514-4430-9197-3148654af6ab</span> </span><br><span class="line">        <span class="comment"># 指定组名为 NACOS_DEV_GROUP</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">NACOS_DEV_GROUP</span> </span><br></pre></td></tr></table></figure><h3 id="Nginx-代理转发"><span class="post-title-index">5.7. </span><a href="#Nginx-代理转发" class="headerlink" title="Nginx 代理转发"></a>Nginx 代理转发</h3><p><strong>Nginx代理转发：</strong>本质上就是通过配置了一个 负载均衡 分别路由到不同的 Nacos 中。</p><ul><li><strong>Nginx 配置如下</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置就是轮询策略</span></span><br><span class="line"><span class="section">upstream</span> nacos_server &#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.10.17:8848</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.10.18:8848</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.10.19:8848</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">    <span class="comment"># 匹配请求中的host值</span></span><br><span class="line">    <span class="attribute">server_name</span> nacos_server;</span><br><span class="line"> </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment">#nginx的主机地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 配置代理服务器</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos_server;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>bootstrap.yml</strong> 配置文件如下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-alibaba-nacos-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># nacos 服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.20</span><span class="string">:8001</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># nacos 服务配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.20</span><span class="string">:8001</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 指定命名空间为 dev</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">fc1c8c25-c514-4430-9197-3148654af6ab</span> </span><br><span class="line">        <span class="comment"># 指定组名为 NACOS_DEV_GROUP</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">NACOS_DEV_GROUP</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba（一）</title>
      <link href="/posts/2a55742.html"/>
      <url>/posts/2a55742.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud <code>Alibaba</code></h1><h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在上一个章节中已经完成了 <em><code>Spring Cloud</code></em> 微服务相关组件的学习，目前我们针对微服务的另一种解决方案 <em><code>Spring Cloud Alibaba</code></em> 进行学习，目前 <code>Alibaba</code> 微服务体系使用还是较多的。</p><p>如下是上一章 Spring Cloud 的文档和代码</p><ul><li>Spring Cloud 代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></li><li>Spring Cloud 文档：<a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/doc">https://github.com/wicksonZhang/Spring-Cloud/tree/main/doc</a></li></ul><h2 id="Spring-Cloud-Alibaba-是什么"><span class="post-title-index">2. </span><a href="#Spring-Cloud-Alibaba-是什么" class="headerlink" title="Spring Cloud Alibaba 是什么"></a>Spring Cloud <code>Alibaba</code> 是什么</h2><blockquote><p>官方文档：<a href="https://spring.io/projects/spring-cloud-alibaba/">https://spring.io/projects/spring-cloud-alibaba/</a></p><p>中文文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/2022.x/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/2022.x/README-zh.md</a></p></blockquote><p><code>Spring Cloud Alibaba</code>是由阿里巴巴公司与 Spring 社区合作开发的微服务框架的衍生项目。<em><code>Spring Cloud Alibaba</code></em> 在继承了 <em><code>Spring Cloud</code></em> 的优势基础上，融入了一些与阿里巴巴技术栈紧密集成的组件，以满足该生态系统中的特定需求。以下是具体的组件介绍：</p><ol><li><strong>Nacos：</strong> 作为注册中心和配置中心，<code>Nacos</code> 提供了动态服务发现、配置管理和服务管理的平台。相较于 <em><code>Spring Cloud</code></em> 中可能需要结合 <code>Spring Cloud Eureka</code> 和 <code>Spring Cloud Config</code> 才能实现服务发现和配置管理，<code>Nacos</code> 简化了这一过程。</li><li><strong>Sentinel：</strong> <code>Sentinel</code> 是一款开源的流量控制和服务熔断的库，具备实时流量控制、服务熔断以及系统负载保护等功能。鉴于 <code>Spring Cloud Hystrix</code> 已停止更新，<code>Sentinel</code> 成为了替代方案，为微服务提供了稳定性和可用性的保障。</li><li><strong>RocketMQ：</strong> 作为分布式消息中间件，<code>RocketMQ</code> 用于在微服务架构中进行异步通信和事件驱动。它为 <em><code>Spring Cloud Alibaba</code></em> 提供了可靠的消息传递机制，促进了微服务之间的协同工作。</li><li><strong>Seata：</strong> <code>Seata</code> 是一款开源的分布式事务解决方案，专注于解决微服务架构中的分布式事务一致性问题。通过集成 <code>Seata</code>，<em><code>Spring Cloud Alibaba</code></em> 提供了全局事务的协调和管理，确保了数据的一致性。</li><li><strong>Dubbo：</strong> <code>Dubbo</code> 是一款高性能、轻量级的开源 <code>RPC</code> 框架，用于微服务之间的远程调用。在 <em><code>Spring Cloud Alibaba</code></em> 中，集成了 <code>Dubbo</code>，使得微服务之间的远程通信更为便捷高效。</li></ol><p>通过这些组件的集成，<em><code>Spring Cloud Alibaba</code></em> 为开发者提供了更加完善和与阿里巴巴技术栈高度兼容的微服务解决方案。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401221738441.png" alt="spring-cloud-alibaba-img-ca9c0e5c600bfe0c3887ead08849a03c" style="zoom:100%;float:left"></p><h2 id="项目初始化"><span class="post-title-index">3. </span><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><blockquote><p><strong>项目地址：</strong><a href="https://github.com/wicksonZhang/Spring-Cloud-Alibaba.git">https://github.com/wicksonZhang/Spring-Cloud-Alibaba.git</a></p><p>我们的项目是从 <code>Spring Cloud</code> 体系中进行迁移出来的，所以大部分还是使用到了以前的公共模块和依赖。</p></blockquote><ul><li><p><strong>项目结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401231523789.png" alt="image-20240123152302753" style="zoom:100%;float:left"></p></li><li><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--父项目基本信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-Cloud-Alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子项目基本信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>01-spring-cloud-alibaba-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>2020.0.1<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.12<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapstruct.version</span>&gt;</span>1.5.3.Final<span class="tag">&lt;/<span class="name">mapstruct.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目依赖包统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.4.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud 2020.0.1 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba 2021.1 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--hutool工具依赖包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--MapStruct依赖包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--mapstruct-processor依赖包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloudAlibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Sleuth（十二）</title>
      <link href="/posts/a8d33924.html"/>
      <url>/posts/a8d33924.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h1><blockquote><p>本章节主要是基于 <code>Sleuth</code> 的分布式链路追踪，所以还是基于以往的案例进行开发。</p></blockquote><h2 id="Sleuth-基础概念"><span class="post-title-index">1. </span><a href="#Sleuth-基础概念" class="headerlink" title="Sleuth 基础概念"></a>Sleuth 基础概念</h2><blockquote><p>官网地址：<a href="https://spring.io/projects/spring-cloud-sleuth/">https://spring.io/projects/spring-cloud-sleuth/</a></p></blockquote><p>​        <em>Spring Cloud Sleuth</em> 是 <code>Spring Cloud</code> 生态中的一个组件，主要解决了分布式链路追踪的问题。<code>Spring Cloud Sleuth</code> 可以在多个服务之间进行跟踪链路的请求和调用链。 </p><p>​        <em>Spring Cloud Sleuth</em> 中的关键功能如下：</p><ul><li><strong>唯一标识符(Trace Id)：</strong>为每个请求生成唯一的标识符，用于跟踪请求的整个生命周期。</li><li><strong>跨服务追踪：</strong> 将唯一标识符添加到请求的头部，使得在不同服务之间传播时能够保持唯一性。</li><li><strong>调用链：</strong> 根据唯一标识符构建请求的调用链，显示请求从一个服务到另一个服务的流程。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401221152101.png" alt="trace-id" style="zoom:1000%;float:left"></p><h2 id="Sleuth-安装启动"><span class="post-title-index">2. </span><a href="#Sleuth-安装启动" class="headerlink" title="Sleuth 安装启动"></a>Sleuth 安装启动</h2><ul><li>下载地址：<a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></li><li>启动命令： java -jar zipkin-server-2.15.0-exec.jar</li><li>访问地址：<a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></li></ul><h2 id="Sleuth-链路监控展现"><span class="post-title-index">3. </span><a href="#Sleuth-链路监控展现" class="headerlink" title="Sleuth 链路监控展现"></a>Sleuth 链路监控展现</h2><ul><li><p>我们基于上一章 <code>Spring Cloud Stream</code> 案例进行展示</p></li><li><p>我们分别在服务 添加如下依赖和配置：</p><ul><li><code>11-spring-cloud-stream-consumer1-11200</code></li><li><code>11-spring-cloud-stream-consumer2-11300</code></li><li><code>11-spring-cloud-stream-producer-11100</code></li><li><code>11-spring-cloud-stream-websocket-11500</code> </li></ul></li><li><p>pom.xml 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sleuth+zipkin 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml 配置，我么以 <code>spring-cloud-stream-consumer1</code> 为例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-stream-consumer1</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>测试结果</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401221430305.gif" alt="动画"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Stream（十一）</title>
      <link href="/posts/c906bba9.html"/>
      <url>/posts/c906bba9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/11-spring-cloud-stream-consumer1-11200">11-spring-cloud-stream-consumer1-11200</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/11-spring-cloud-stream-consumer2-11300">11-spring-cloud-stream-consumer2-11300</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/11-spring-cloud-stream-gateway-11400">11-spring-cloud-stream-gateway-11400</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/11-spring-cloud-stream-producer-11100">11-spring-cloud-stream-producer-11100</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/11-spring-cloud-stream-web">11-spring-cloud-stream-web</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/11-spring-cloud-stream-websocket-11500">11-spring-cloud-stream-websocket-11500</a></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li><strong>消息驱动</strong>：是一种编程模型，其中组件之间通过异步消息传递来实现松耦合、分布式的通信和协作，提高系统的可伸缩性和弹性。</li></ul><h3 id="Spring-Cloud-Stream-解决了什么问题？"><span class="post-title-index">1.1. </span><a href="#Spring-Cloud-Stream-解决了什么问题？" class="headerlink" title="Spring Cloud Stream 解决了什么问题？"></a>Spring Cloud Stream 解决了什么问题？</h3><p>​        Spring Cloud Stream <strong>解决了消息驱动微服务架构中消息生产者和消息消费者的解耦、消息传递、以及不同消息代理系统的适配问题</strong>。</p><p>​        假设有一个电商系统，其中订单服务负责处理订单相关的业务，当订单服务产生一个新的订单时，需要将这条订单信息发送到<strong>消息通道</strong>，而不需要关心消息是如何被处理、传递到哪里的。订单服务产生订单信息之后，库存服务需要减少相应库存，那么库存服务只需要通过订阅相应的<strong>消息通道</strong>，处理订单创建的消息。</p><p>​        再举一个场景的例子，类似于微信公众号的消息推送。当公众号推送消息之后，只有订阅了这个公众号的人才能收到消息。</p><p>​        这种方式下，消息生产者和消费者之间是松耦合的，它们可以独立部署和演化，更好地支持微服务架构的原则。</p><h3 id="Spring-Cloud-Stream-是什么？"><span class="post-title-index">1.2. </span><a href="#Spring-Cloud-Stream-是什么？" class="headerlink" title="Spring Cloud Stream 是什么？"></a>Spring Cloud Stream 是什么？</h3><p>Spring Cloud Stream 是基于 Spring Boot 的一个用于构建消息驱动微服务的框架。具体的核心概念和特定如下：</p><ol><li><strong>Binder（绑定器）：</strong> Spring Cloud Stream 引入了 Binder 的概念，它是与消息代理系统交互的适配器。通过 Binder，可以方便地切换消息代理系统，比如从 RabbitMQ 切换到 Kafka，而不用修改应用程序代码。</li><li><strong>消息通道（Message Channels）：</strong> Spring Cloud Stream 使用消息通道来实现消息的传递。应用程序可以将消息发送到通道，并从通道接收消息。</li><li><strong>消息处理（Message Processing）：</strong> Spring Cloud Stream 提供了一组注解，如 <code>@StreamListener</code>，使得消息的处理逻辑变得简单明了。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401181521725.gif" alt="img" style="zoom:100%;float:left"></p><h3 id="Spring-Cloud-Stream-的优缺点"><span class="post-title-index">1.3. </span><a href="#Spring-Cloud-Stream-的优缺点" class="headerlink" title="Spring Cloud Stream 的优缺点"></a>Spring Cloud Stream 的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>简化配置和开发：</strong> Spring Cloud Stream 简化了消息驱动微服务的配置和开发，通过声明式的方式，开发者只需要关注业务逻辑而不用过多考虑底层的消息传递细节。</li><li><strong>适配多种消息代理系统：</strong> Spring Cloud Stream 支持多种消息代理系统，包括 RabbitMQ、Kafka、Redis 等，这使得系统更具灵活性。</li><li><strong>整合 Spring 生态系统：</strong> Spring Cloud Stream 是 Spring Cloud 生态系统的一部分，可以与其他 Spring Cloud 组件无缝集成。</li></ol><p><strong>缺点</strong></p><ol><li><strong>过度抽象可能导致不灵活：</strong> 尽管高度的抽象使得开发变得简单，但在一些特定场景下，过度的抽象可能会导致不够灵活。一些复杂的消息处理需求可能需要更详细的配置和定制。</li></ol><h2 id="核心注解"><span class="post-title-index">2. </span><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h2><p>​        如下图中是 Spring Cloud Stream 的基本原理，其中<em>Binder</em> 层负责和MQ中间件的通信，应用程序 <em>Application Core</em> 通过 <em>inputs</em> 接收 <em>Binder</em> 包装后的 Message，相当于是消费者Consumer；通过 <em>outputs</em> 投递 Message给 <em>Binder</em>，然后由 <em>Binder</em> 转换后投递给MQ中间件，相当于是生产者Producer。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401220931781.png" alt="SCSt-with-binder" style="zoom:100%;float:left"></p><ul><li>针对上图中提供了相关的注解信息，具体如下：</li></ul><div class="table-container"><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前支持 <em>RabbitMQ</em> 和 <em>KafKa</em></td></tr><tr><td>Binder</td><td>负责和MQ中间件进行连接和通信，可以动态的改变消息类型（对应 <em>Kafka</em> 的 topic，<em>RabbitMQ</em> 的 exchange）</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通达，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>将信道 <em>change</em> 和 <em>exchange</em> 绑定在一起</td></tr></tbody></table></div><h2 id="具体操作"><span class="post-title-index">3. </span><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><ul><li><p>准备工作</p><ul><li>具体 <code>RabbitMQ</code> 消息队列</li></ul></li><li><p>实现需求</p><ol><li><p>我们创建消息生产者和消息消费者。当生产者产生消息之后，两个消费者会通过消息通道监听到对应的消息。具体大流程如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401190958348.png" alt="img" style="zoom:52%;float:left"></p></li></ol></li><li><p>实现思路</p><ol><li>Step-1：创建消息生产者 <code>11-spring-cloud-stream-producer</code></li><li>Step-2：创建消息消费者1 <code>11-spring-cloud-stream-consumer1-11200</code></li><li>Step-3：创建消息消费者2 <code>11-spring-cloud-stream-consumer2-11300</code></li></ol></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401191428602.png" alt="image-20240119142823575" style="zoom:100%;float:left"></p></li></ul><h3 id="创建消息生产者"><span class="post-title-index">3.1. </span><a href="#创建消息生产者" class="headerlink" title="创建消息生产者"></a>创建消息生产者</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Step-1: 创建消息生产者服务 11-spring-cloud-stream-producer-11100</span><br><span class="line">Step-2: 导入 pom.xml 依赖</span><br><span class="line">Step-3: 创建 bootstrap.yml</span><br><span class="line">Step-4: 创建启动类 SpringCloudStreamProducerApplication</span><br><span class="line">Step-5: 创建控制类 ProducerController</span><br><span class="line">Step-6: 创建消息生产者 IMessageProvider、MessageProviderImpl</span><br></pre></td></tr></table></figure><p><strong>Step-2: 导入 pom.xml 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud netflix eureka 服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Stream 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建 bootstrap.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">11100</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-stream-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="comment"># --------------------------- Spring Cloud Stream 配置 start ---------------------------</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment"># 绑定 rabbitmq 服务信息</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="comment"># 定义的名称，用于整合 binding</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">          <span class="comment"># 设置 RabbitMQ 的相关环境配置</span></span><br><span class="line">          <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="comment"># 服务的整合处理</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 通道名称</span></span><br><span class="line">        <span class="attr">output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream-exchange</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line"><span class="comment"># --------------------------- Spring Cloud Stream 配置 end ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置 start ---------------------------------</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">spring-cloud-stream-producer</span></span><br><span class="line">    <span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-stream-producer:11100</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-stream-producer:11100</span></span><br><span class="line">    <span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 设置心跳间隔时间, 默认 30 S</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 设置服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除, 默认 90 S</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置  end  ---------------------------------</span></span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建启动类 SpringCloudStreamProducerApplication</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Stream Producer 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudStreamProducerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudStreamProducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5: 创建控制类 ProducerController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/producer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-6: 创建消息生产者 IMessageProvider、MessageProviderImpl</strong></p><ul><li><code>IMessageProvider.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sendMessage</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>MessageProviderImpl.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息生产者-实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// 定义消息的推送管道</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProviderImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息发送管道</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(uuid).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;生产者生产一条消息：&quot;</span> + uuid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建消息消费者1"><span class="post-title-index">3.2. </span><a href="#创建消息消费者1" class="headerlink" title="创建消息消费者1"></a>创建消息消费者1</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Step-1: 创建消息消费者1服务 11-spring-cloud-stream-consumer1-11200</span><br><span class="line">Step-2: 导入 pom.xml 依赖</span><br><span class="line">Step-3: 创建 bootstrap.yml</span><br><span class="line">Step-4: 创建启动类 SpringCloudStreamConsumer1Application</span><br><span class="line">Step-5: 创建监听类 Consumer1MessageListener</span><br></pre></td></tr></table></figure><p><strong>Step-2: 导入 pom.xml 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud netflix eureka 服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Stream 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建 bootstrap.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">11200</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-stream-consumer1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># --------------------------- Spring Cloud Stream 配置 start ---------------------------</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment"># 绑定 rabbitmq 服务信息</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="comment"># 定义的名称，用于整合 binding</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span></span><br><span class="line">          <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">          <span class="comment"># 设置 RabbitMQ 的相关环境配置</span></span><br><span class="line">          <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="comment"># 服务的整合处理</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 通道名称</span></span><br><span class="line">        <span class="attr">input:</span></span><br><span class="line">          <span class="comment"># 表示使用的 exchange 名称定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream-exchange</span></span><br><span class="line">          <span class="comment"># 设置消息类型</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="comment"># 设置绑定消息服务的具体设置</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">consumer1</span></span><br><span class="line"><span class="comment"># --------------------------- Spring Cloud Stream 配置 end ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置 start ---------------------------------</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">spring-cloud-stream-consumer1</span></span><br><span class="line">    <span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-stream-consumer1:11200</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-stream-consumer1:11200</span></span><br><span class="line">    <span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 设置心跳间隔时间, 默认 30 S</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 设置服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除, 默认 90 S</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置  end  ---------------------------------</span></span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建启动类 SpringCloudStreamConsumer1Application</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Stream 消费者1启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudStreamConsumer1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudStreamConsumer1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5: 创建监听类 Consumer1MessageListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer1MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">input</span><span class="params">(Message&lt;String&gt; message)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Server.Port:&#123;&#125; , Consumer1MessageListener receive message :&#123;&#125;&quot;</span>, serverPort, message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建消息消费者2"><span class="post-title-index">3.3. </span><a href="#创建消息消费者2" class="headerlink" title="创建消息消费者2"></a>创建消息消费者2</h3><ul><li>具体实现步骤和 创建消息消费者2 是一致的。</li></ul><h2 id="单元测试"><span class="post-title-index">4. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>我们在上面的基础上，重新新增了两个服务进行单元测试，分别是 <code>WebSocket</code> 和 <code>Gateway</code> 两个微服务 和 前端项目。</p><ul><li><p>服务信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401211627925.png" alt="image-20240121162736884" style="zoom:100%;float:left"></p></li><li><p>Eureka 服务信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401211632581.png" alt="image-20240121163236518"></p></li></ul><h3 id="消费者处于同一个组"><span class="post-title-index">4.1. </span><a href="#消费者处于同一个组" class="headerlink" title="消费者处于同一个组"></a>消费者处于同一个组</h3><blockquote><p>当两个消费者处于同一个组：<code>group: consumer1</code>，这两个组中只会有其中一个服务会接收到消息，不会重复消费。</p></blockquote><ul><li><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务的整合处理</span></span><br><span class="line"><span class="attr">bindings:</span></span><br><span class="line">  <span class="comment"># 通道名称</span></span><br><span class="line">  <span class="attr">input:</span></span><br><span class="line">    <span class="comment"># 表示使用的 exchange 名称定义</span></span><br><span class="line">    <span class="attr">destination:</span> <span class="string">stream-exchange</span></span><br><span class="line">    <span class="comment"># 设置消息类型</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">    <span class="comment"># 设置绑定消息服务的具体设置</span></span><br><span class="line">    <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">consumer1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>当两个消费者处于同一个组：<code>group: consumer1</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401211639065.gif" alt="动画"></p><h3 id="消费者处于不同的组"><span class="post-title-index">4.2. </span><a href="#消费者处于不同的组" class="headerlink" title="消费者处于不同的组"></a>消费者处于不同的组</h3><blockquote><p>当两个消费者处于不同的个组</p><ul><li>consumer1 处于 <code>group:consumer1</code></li><li>consumer2 处于 <code>group:consumer2</code></li><li>这两个组中只都会接收到消息，不会重复消费。</li></ul></blockquote><ul><li><p>当两个消费者处于不同的组</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401220922909.gif" alt="动画"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Bus（十）</title>
      <link href="/posts/606f7d90.html"/>
      <url>/posts/606f7d90.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config-client1-11000">10-spring-cloud-config-client1-11000</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config-client2-12000">10-spring-cloud-config-client2-12000</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config-server-10000">10-spring-cloud-config-server-10000</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config">10-spring-cloud-config</a></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Spring-Cloud-Bus-解决了什么问题？"><span class="post-title-index">1.1. </span><a href="#Spring-Cloud-Bus-解决了什么问题？" class="headerlink" title="Spring Cloud Bus 解决了什么问题？"></a>Spring Cloud Bus 解决了什么问题？</h3><p>​        Spring Cloud Bus 主要解决了分布式系统配置的动态刷新问题。例如，服务 <code>serviceA</code> 和服务 <code>serviceB</code> 都有一个名为 <code>application.properties</code> 的配置文件，例如数据库连接信息、日志级别、特性开关等。当这些配置发生变化时，需要通知所有相关的服务实例更新配置，以确保它们使用最新的配置信息。</p><h3 id="Spring-Cloud-Bus-是什么？"><span class="post-title-index">1.2. </span><a href="#Spring-Cloud-Bus-是什么？" class="headerlink" title="Spring Cloud Bus 是什么？"></a>Spring Cloud Bus 是什么？</h3><p>​        Spring Cloud Bus 是 Spring Cloud 中的一个组件，用于实现分布式系统中的消息总线功能，一般与 <code>Spring Cloud Config</code> 结合进行使用。它允许在微服务架构中通过消息代理（消息队列）实现服务之间的通信与协作，主要功能和特性如下：</p><ul><li><strong>配置刷新：</strong><code>Spring Cloud Bus</code> 主要用于解决分布式系统中的配置动态刷新问题。当配置中心的配置发生变化是无须重启服务进行刷新，而是通过 <code>Spring Cloud Bus</code> 进行消息广播通知相关的微服务实例。</li><li><strong>消息代理：</strong><code>Spring Cloud Bus</code> 使用消息代理（<code>RabbitMQ</code>、<code>Kafka</code>）作为传输工具。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401161059844.png" alt="image-20240116105916800" style="zoom:90%;float:left"></p><h3 id="Spring-Cloud-Bus-优缺点"><span class="post-title-index">1.3. </span><a href="#Spring-Cloud-Bus-优缺点" class="headerlink" title="Spring Cloud Bus 优缺点"></a>Spring Cloud Bus 优缺点</h3><blockquote><p>优缺点可能就是我们上面所说的一些特性</p></blockquote><p><strong>优点</strong></p><ol><li><strong>配置动态刷新</strong>：Spring Cloud Bus 的主要优势是解决了分布式系统中的配置动态刷新问题。它允许在不重启微服务的情况下，通过消息广播的方式将最新的配置信息传递给所有相关的微服务实例。</li><li><strong>事件传播：</strong> 除了配置刷新，Spring Cloud Bus 还支持自定义事件的传播。</li><li><strong>消息代理支持：</strong> Spring Cloud Bus 使用消息代理（如 <code>RabbitMQ</code>、Kafka 等）作为传输工具，确保消息的可靠性和一致性。</li></ol><p><strong>缺点</strong></p><ol><li><strong>引入复杂性：</strong> 在小规模和简单的应用中，引入 Spring Cloud Bus 可能会显得过于复杂。</li><li><strong>依赖消息代理：</strong> Spring Cloud Bus 的实现依赖消息代理，如 <code>RabbitMQ</code> 或 Kafka。</li></ol><h2 id="安装-RabbitMQ"><span class="post-title-index">2. </span><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 <code>RabbitMQ</code></h2><blockquote><p>本次由于 <code>Spring Cloud Config</code> 需要只是消息代理作为传输工具，所以需要安装 <code>RabbitMQ</code>.</p><p>安装环境：Windows 11、Erlang、rabbitmq-server-3.7.14.exe</p></blockquote><p><strong>安装步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：安装 Erlang</span><br><span class="line">2. Step-2：安装 RabbitMQ</span><br></pre></td></tr></table></figure><p><strong>Step-1：安装 Erlang</strong></p><ul><li>下载地址：<a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a></li></ul><p><strong>Step-1：安装 <code>RabbitMQ</code></strong></p><ul><li>下载地址：<a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.14/rabbitmq-server-3.7.14.exe">https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.14/rabbitmq-server-3.7.14.exe</a></li></ul><h2 id="启动-RabbitMQ"><span class="post-title-index">3. </span><a href="#启动-RabbitMQ" class="headerlink" title="启动 RabbitMQ"></a>启动 <code>RabbitMQ</code></h2><p><strong>操作步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：进入 RabbitMQ 安装目录, 执行启动命令</span><br><span class="line">2. Step-2：访问RabbitMQ</span><br></pre></td></tr></table></figure><p><strong>Step-1：进入 <code>RabbitMQ</code> 安装目录，执行启动命令</strong></p><ul><li>启动命令：<code>rabbitmq-plugins enable rabbitmq_management</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\software\RabbitMQ Server\rabbitmq_server-3.7.14\sbin&gt;rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">Enabling plugins on node rabbit@DESKTOP-KRH17BU:</span><br><span class="line">rabbitmq_management</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@DESKTOP-KRH17BU...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line"></span><br><span class="line">started 3 plugins.</span><br><span class="line"></span><br><span class="line">D:\software\RabbitMQ Server\rabbitmq_server-3.7.14\sbin&gt;</span><br></pre></td></tr></table></figure><ul><li>执行完命令之后会出现如下图形化界面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401161140812.png" alt="image-20240116114011757" style="zoom:100%;float:left"></p><p><strong>Step-2：访问 <code>RabbitMQ</code></strong></p><ul><li>访问地址：<a href="http://localhost:15672">http://localhost:15672</a></li><li>账号和密码：guest、guest</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401161143507.png" alt="image-20240116114307458" style="zoom:100%;float:left"></p><h2 id="具体实现"><span class="post-title-index">4. </span><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><blockquote><p>我们是基于上一章节 <code>Spring Cloud Config</code> 的案例进行实现的。</p></blockquote><ul><li><p>实现需求</p><ol><li>我们基于 <code>Spring Cloud Bus</code> 实现动态刷新配置文件，并通知所有服务。</li></ol></li><li><p>实现思路</p><ol><li>Step-1：我们基于 <code>Spring Cloud Config</code> 案例进行开发。</li><li>Step-2：修改配置服务端 <code>10-spring-cloud-config-server-10000</code></li><li>Step-3：修改配置客户端1 <code>10-spring-cloud-config-client1-11000</code></li><li>Step-4：创建配置客户端2 <code>10-spring-cloud-config-client2-12000</code></li></ol></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401171140833.png" alt="image-20240117114010803" style="zoom:100%;float:left"></p></li></ul><h3 id="修改服务端代码"><span class="post-title-index">4.1. </span><a href="#修改服务端代码" class="headerlink" title="修改服务端代码"></a>修改服务端代码</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 修改服务端 pom.xml 依赖</span><br><span class="line">2. Step-2: 修改服务端 application.yml 配置</span><br></pre></td></tr></table></figure><p><strong>Step-1: 修改服务端 <code>pom.xml</code> 依赖</strong></p><ul><li>添加消息总线 <code>RabbitMQ</code> 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加消息总线 RabbitMQ 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-2: 修改服务端 <code>application.yml</code> 配置</strong></p><ul><li>新增 <code>rabbitmq</code> 相关配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-config-server</span></span><br><span class="line">  <span class="comment">#------------------------------- 新增 RabbitMQ 相关配置 start -------------------------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="comment">#------------------------------- 新增 RabbitMQ 相关配置 end   -------------------------------</span></span><br></pre></td></tr></table></figure><ul><li>新增暴露 <code>bus</code> 刷新配置的端点</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------- 暴露 bus 刷新配置的端点 start --------------------------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br><span class="line"><span class="comment">#-------------------------------- 暴露 bus 刷新配置的端点 end   --------------------------------</span></span><br></pre></td></tr></table></figure><p>注意，如果报错请参考博文：<a href="https://blog.csdn.net/qq_45982171/article/details/128208254">https://blog.csdn.net/qq_45982171/article/details/128208254</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.eclipse.jgit.api.errors.TransportException: https://github.com/wicksonZhang/Spring-Cloud.git: cannot open git-upload-pack</span><br><span class="line">...</span><br><span class="line">Caused by: org.eclipse.jgit.errors.TransportException: https://github.com/wicksonZhang/Spring-Cloud.git: cannot open git-upload-pack</span><br></pre></td></tr></table></figure><h3 id="修改配置客户端1"><span class="post-title-index">4.2. </span><a href="#修改配置客户端1" class="headerlink" title="修改配置客户端1"></a>修改配置客户端1</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 修改服务端 pom.xml 依赖</span><br><span class="line">2. Step-2: 修改服务端 application.yml 配置</span><br></pre></td></tr></table></figure><p><strong>Step-1: 修改服务端 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加消息总线 RabbitMQ 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-2: 修改服务端 <code>application.yml</code> 配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-config-client</span></span><br><span class="line">  <span class="comment">#------------------------------- 新增 RabbitMQ 相关配置 start -------------------------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="comment">#------------------------------- 新增 RabbitMQ 相关配置 end   -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- config 客户端配置暴露监控端点 start ---------------------------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#--------------------------------- config 客户端配置暴露监控端点 end   ---------------------------------</span></span><br></pre></td></tr></table></figure><h3 id="创建配置客户端2"><span class="post-title-index">4.3. </span><a href="#创建配置客户端2" class="headerlink" title="创建配置客户端2"></a>创建配置客户端2</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 创建项目 10-spring-cloud-config-client2-12000</span><br><span class="line">2. Step-2: 导入 pom.xml 依赖</span><br><span class="line">3. Step-3: 创建 bootstrap.yml 配置文件</span><br><span class="line">4. Step-4: 创建启动类</span><br><span class="line">5. Step-5: 创建控制类</span><br></pre></td></tr></table></figure><p><strong>Step-1: 创建项目 <code>10-spring-cloud-config-client2-12000</code> </strong></p><p><strong>Step-2: 导入 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加消息总线 RabbitMQ 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud netflix 服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-3: 创建 <code>bootstrap.yml</code> 配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">11000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># 配置文件读取地址：http://config10000.com/main/config-dev.yml</span></span><br><span class="line">    <span class="comment"># 配置文件读取规则：/main分支/配置文件名称+配置文件后缀.yml</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 分支名称</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line">      <span class="comment"># 配置文件名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="comment"># 读取配置文件后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment"># 配置中心地址</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:10000</span></span><br><span class="line">  <span class="comment">#------------------------------- 新增 RabbitMQ 相关配置 start -------------------------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="comment">#------------------------------- 新增 RabbitMQ 相关配置 end   -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置 start ---------------------------------</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">spring-cloud-config-client</span></span><br><span class="line">    <span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-config-client2:12000</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-config-client2:12000</span></span><br><span class="line">    <span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置  end  ---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- config 客户端配置暴露监控端点 start ---------------------------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#--------------------------------- config 客户端配置暴露监控端点 end   ---------------------------------</span></span><br></pre></td></tr></table></figure><p><strong>Step-4: 创建启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudConfigClient2Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigClient2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5: 创建控制类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/config-client2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClient2Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config-info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广播通知"><span class="post-title-index">5. </span><a href="#广播通知" class="headerlink" title="广播通知"></a>广播通知</h2><blockquote><p>广播通知：配置发生变化之后，只要将配置注册在 <code>Spring Cloud Config</code> 中的服务都会收到通知。</p></blockquote><ul><li><p>广播通知-通知服务端(<strong>推荐方案</strong>)：主要是利用消息总线触发服务端的 <code>ConfigServer</code> 的 <code>/bus/refresh</code> 端点，从而刷新所有客户端的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401171046166.png" alt="image-20240117104652124" style="zoom:90%;float:left"></p></li><li><p>广播通知-通知客户端：主要是利用消息总线触发客户端的 <code>/bus/refresh</code> 端点，从而刷新所有客户端的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401171043113.png" alt="在这里插入图片描述" style="zoom:78%;float:left"></p></li><li><p>总结：我们不应该使用通知客户端的方式刷新所有客户端的配置，因为这打破了微服务的单一原则，微服务本身是业务模块，不应该承担刷新客户端的责任。</p></li></ul><p><strong>测试步骤如下：</strong></p><ol><li>首先，启动项目：两个 Eureka 注册中心【3300、3400】、配置服务端【10000】、配置客户端1【11000】、配置客户端2【12000】</li><li>其次，查看各个服务中读取到的配置是什么。</li><li>接着，修改 <code>github</code> 仓库中的配置文件，修改配置中的【version】。</li><li>然后，利用消息总线触发服务端的 <code>bus-refresh</code> ，从而刷新整个客户端的配置。</li><li>最后，访问 配置服务端、配置客户端1、配置客户端2 是否读取到修改之后的配置。</li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\wicks</span>&gt;curl -X POST &quot;http://localhost:10000/actuator/bus-refresh&quot;</span><br><span class="line"></span><br><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\wicks</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401170943293.gif" alt="动画" style="zoom:100%;float:left"></p><h2 id="定点通知"><span class="post-title-index">6. </span><a href="#定点通知" class="headerlink" title="定点通知"></a>定点通知</h2><blockquote><p>定点通知：跟广播通知不同的是，定点通知只会通知具体的服务，都不会进行广播通知。</p></blockquote><p><strong>测试步骤如下：</strong></p><ol><li>首先，启动项目：两个 Eureka 注册中心【3300、3400】、配置服务端【10000】、配置客户端1【11000】、配置客户端2【12000】</li><li>其次，查看各个服务中读取到的配置是什么。</li><li>接着，修改 <code>github</code> 仓库中的配置文件，修改配置中的【version】。</li><li>然后，利用消息总线定点通知指定客户端的 <code>bus-refresh</code> ，从而刷新当前客户端的配置。</li><li>最后，访问 配置服务端、配置客户端1、配置客户端2 是否读取到修改之后的配置。</li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\wicks</span>&gt;curl -X POST &quot;http://localhost:10000/actuator/bus-refresh/spring-cloud-config-client:11000&quot;</span><br><span class="line"></span><br><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\wicks</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401171130410.gif" alt="动画" style="zoom:100%;float:left"></p><h2 id="基本原理"><span class="post-title-index">7. </span><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>​        其实我们 <code>ConfigCilent</code> 实例都是监听的 <code>MQ</code> 中同一个 topic（默认是 <code>SpringCloudBus</code>），当一个服务刷新数据的时候，它会把这个信息放入到 Topic 中，这样其他监听的 Topic 服务就会得到更新，然后更新自身的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401171138247.png" alt="image-20240117113818189"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Config（九）</title>
      <link href="/posts/b433c847.html"/>
      <url>/posts/b433c847.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config-client1-11000">10-spring-cloud-config-client1-11000</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config-server-10000">10-spring-cloud-config-server-10000</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/10-spring-cloud-config">10-spring-cloud-config</a></li></ul></blockquote><h2 id="Spring-Cloud-Config-基础概念"><span class="post-title-index">1. </span><a href="#Spring-Cloud-Config-基础概念" class="headerlink" title="Spring Cloud Config 基础概念"></a>Spring Cloud Config 基础概念</h2><blockquote><p>官网地址：<a href="https://docs.spring.io/spring-cloud-config/docs/current/reference/html/">https://docs.spring.io/spring-cloud-config/docs/current/reference/html/</a></p></blockquote><h3 id="Spring-Cloud-Config-解决了什么问题？"><span class="post-title-index">1.1. </span><a href="#Spring-Cloud-Config-解决了什么问题？" class="headerlink" title="Spring Cloud Config 解决了什么问题？"></a>Spring Cloud Config 解决了什么问题？</h3><p>​        在传统的开发和部署过程中，配置信息通常会被打包到服务的可执行 <code>JAR</code> 文件中。当需要修改某个服务的配置时，就需要重新编译和部署整个服务，这在生产环境中可能是一个繁琐且潜在风险较高的操作。</p><p>​        微服务架构中，每个微服务通常都有自己的配置文件，这些配置文件包含了服务的各种属性、连接信息、端口号等。而在 <code>Spring Cloud Config</code> 中通过将配置文件集中存储在一个外部的配置服务器上，而不是打包到每个微服务的 <code>JAR</code> 文件中，就解决了这个问题。</p><h3 id="Spring-Cloud-Config-是什么？"><span class="post-title-index">1.2. </span><a href="#Spring-Cloud-Config-是什么？" class="headerlink" title="Spring Cloud Config 是什么？"></a>Spring Cloud Config 是什么？</h3><ul><li><p><code>Spring Cloud Config</code>：Spring Cloud Config 提供了集中式的外部配置管理服务，包含了服务端和客户端两个部分。允许将应用程序的配置信息存储在中心位置，便于集中管理和动态更新。</p><p><img src="https://miro.medium.com/v2/resize:fit:700/1*cTPRDoBveeNbz9QAi5XJJg.png" alt="img" style="zoom:100%;float:left"></p></li></ul><h3 id="Spring-Cloud-Config-优缺点"><span class="post-title-index">1.3. </span><a href="#Spring-Cloud-Config-优缺点" class="headerlink" title="Spring Cloud Config 优缺点"></a>Spring Cloud Config 优缺点</h3><blockquote><p>有时候优点可以变为缺点，缺点也可以变为优点。</p></blockquote><p><strong>优点</strong></p><ol><li><strong>集中式管理：</strong>Spring Cloud Config允许将配置文件集中存储在配置服务器上。这样，各个微服务实例可以通过配置服务器获取其运行所需的配置信息。</li><li><strong>版本控制：</strong>配置文件可以与版本控制系统（如Git）集成，可以在不同环境中轻松管理和跟踪配置的变更。</li><li><strong>动态刷新：</strong> Spring Cloud Config支持配置的动态刷新，这意味着在运行时修改配置文件后，应用程序无需重新启动即可获取新的配置。</li></ol><p><strong>缺点</strong></p><ol><li><strong>单点故障：</strong>默认情况下，Config Server 是一个中心化的服务。如果配置服务器不可用，所有依赖它的微服务都将受到影响。</li><li><strong>安全性问题：</strong> 配置文件中可能包含敏感信息，如数据库密码、API密钥等。</li></ol><h2 id="Spring-Cloud-Config-具体操作"><span class="post-title-index">2. </span><a href="#Spring-Cloud-Config-具体操作" class="headerlink" title="Spring Cloud Config 具体操作"></a>Spring Cloud Config 具体操作</h2><blockquote><p>如果出现端口被占用请查看博文：<a href="https://blog.csdn.net/weixin_46709007/article/details/125140872">https://blog.csdn.net/weixin_46709007/article/details/125140872</a></p></blockquote><ul><li><p>实现需求</p><ul><li>首先，我们创建配置文件，将配置文件部署在 <code>github</code> 上。</li><li>然后，我们创建服务端操作，通过访问服务端读取在 <code>github</code> 上的配置文件。</li><li>最后，我们创建客户端操作，通过配置服务端读取配置文件。</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建配置文件 <code>10-spring-cloud-config</code></li><li>Step-2：创建配置服务端 <code>10-spring-cloud-config-server-10000</code></li><li>Step-3：创建配置客户端 <code>10-spring-cloud-config-client-11000</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401152040652.png" alt="image-20240115204041536" style="zoom:100%;float:left"></p></li></ul><h3 id="准备工作"><span class="post-title-index">2.1. </span><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>我们准备工作有如下两个操作</p><ol><li>创建配置文件<code>10-spring-cloud-config</code> (<code>config-dev.yml、config-prod.yml、config-uat.yml</code>)</li><li>修改 <code>hosts</code> 映射文件</li><li>将配置文件 <code>10-spring-cloud-config</code> 上传至 <code>github</code></li></ol><ul><li><strong>Step-1：创建配置文件<code>10-spring-cloud-config</code></strong><ul><li>其中以 <code>config-dev.yml</code> 配置文件为例，其他都是一样</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch, 10-spring-cloud-config/config-dev.yml version=1&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Step-2：修改 <code>hosts</code> 映射文件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Spring Cloud Config</span><br><span class="line">127.0.0.1 config10000.com</span><br></pre></td></tr></table></figure><ul><li><p><strong>Step-3：将配置文件 <code>10-spring-cloud-config</code> 上传至 <code>github</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401152051723.png" alt="image-20240115205108695" style="zoom:100%;float:left"></p></li></ul><h3 id="服务端操作"><span class="post-title-index">2.2. </span><a href="#服务端操作" class="headerlink" title="服务端操作"></a>服务端操作</h3><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：导入 `pom.xml` 依赖</span><br><span class="line">2. Step-2：修改 `application.yml` 文件</span><br><span class="line">3. Step-3：创建主启动类</span><br><span class="line">4. 测试</span><br></pre></td></tr></table></figure><p><strong>Step-1：导入 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud netflix 服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-2：修改 <code>application.yml</code> 文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/wicksonZhang/Spring-Cloud.git</span></span><br><span class="line">          <span class="comment"># 搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">10</span><span class="string">-spring-cloud-config</span></span><br><span class="line">      <span class="comment"># 读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置 start ---------------------------------</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">spring-cloud-config-server</span></span><br><span class="line">    <span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-config-server:10000</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-config-server:10000</span></span><br><span class="line">    <span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置  end  ---------------------------------</span></span><br></pre></td></tr></table></figure><p><strong>Step-3：创建服务端主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Config 服务端-启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudConfigServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-4：测试</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401152058888.gif" alt="动画" style="zoom:100%;float:left"></p><p><strong>注意：我们这里可以配置一下读取规则</strong></p><ul><li>具体配置细节参考官网配置：<a href="https://docs.spring.io/spring-cloud-config/docs/current/reference/html/#_quick_start">Spring Cloud Config</a>，我们选取如下配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># label: 分支（branch）</span></span><br><span class="line"><span class="comment"># application: 服务名</span></span><br><span class="line"><span class="comment"># profile: 环境（dev/test/prod）</span></span><br><span class="line"></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span></span><br></pre></td></tr></table></figure><h3 id="客户端操作"><span class="post-title-index">2.3. </span><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h3><p><strong>实现步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1：导入 `pom.xml` 依赖</span><br><span class="line">2. Step-2：修改 `application.yml` 文件</span><br><span class="line">3. Step-3：创建主启动类</span><br><span class="line">4. Step-4：创建控制类</span><br><span class="line">5. Step-5：测试</span><br></pre></td></tr></table></figure><p><strong>Step-1：导入 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Config 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud netflix 服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Step-2：修改 <code>bootstrap.yml</code> 文件</strong></p><ul><li>注意：我们这次使用的配置文件是 <code>bootstrap.yml</code> , 因为 <code>bootstrap.yml</code> 的优先级比 <code>application.yml</code> 高</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">11000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># 配置文件读取地址：http://config10000.com/main/config-dev.yml</span></span><br><span class="line">    <span class="comment"># 配置文件读取规则：/main分支/配置文件名称+配置文件后缀.yml</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 分支名称</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line">      <span class="comment"># 配置文件名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="comment"># 读取配置文件后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment"># 配置中心地址</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置 start ---------------------------------</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">spring-cloud-config-client</span></span><br><span class="line">    <span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-config-client1:11000</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-config-client1:11000</span></span><br><span class="line">    <span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置  end  ---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- config 客户端配置暴露监控端点 start ---------------------------------</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#--------------------------------- config 客户端配置暴露监控端点 end   ---------------------------------</span></span><br></pre></td></tr></table></figure><p><strong>Step-3：创建客户端主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Cloud Config 客户端-启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudConfigClientApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-4：创建控制类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/config-client&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config-info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-5：测试</strong></p><ul><li>我们目前测试的是 <code>config-dev.yml</code></li><li>访问地址：<a href="http://localhost:11000/config-client1/config-info">http://localhost:11000/config-client1/config-info</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401152122706.gif" alt="动画" style="float:left"></p><h3 id="动态更新"><span class="post-title-index">2.4. </span><a href="#动态更新" class="headerlink" title="动态更新"></a>动态更新</h3><ul><li>我们在客户端已经将动态更新配置好了，所以我们进行测试。</li><li>注意：我们更新完 <code>github</code> 配置文件之后，需要手动激活客户端配置。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\wicks&gt;curl -X POST <span class="string">&quot;http://localhost:11000/actuator/refresh&quot;</span></span><br><span class="line">[<span class="string">&quot;config.client.version&quot;</span>,<span class="string">&quot;config.info&quot;</span>]</span><br><span class="line">C:\Users\wicks&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401152159890.gif" alt="动画"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway（八）</title>
      <link href="/posts/aa616e69.html"/>
      <url>/posts/aa616e69.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/09-spring-cloud-gateway-server-9000">09-spring-cloud-gateway-server-9000</a></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Gateway-是什么"><span class="post-title-index">1.1. </span><a href="#Gateway-是什么" class="headerlink" title="Gateway 是什么"></a>Gateway 是什么</h3><blockquote><p>官网地址：<a href="https://spring.io/projects/spring-cloud-gateway/">https://spring.io/projects/spring-cloud-gateway/</a></p></blockquote><p>Spring Cloud Gateway：是基于 <code>Spring Boot2、WebFlux</code> 和 <code>Reactor</code> 的 <code>Api</code> 网关，<code>Gateway</code> 主要解决了微服务架构中如下问题：</p><ol><li><strong>动态路由：</strong>在微服务架构中，当请求进入到达系统时，首先会进入到网关服务，网关会动态的将请求路由到不同的后端服务。</li><li><strong>请求过滤和修改：</strong>Gateway 支持使用过滤器来对请求进行处理，例如在请求前、请求后或错误时执行特定逻辑。例如，我们可以在网关中进行身份校验、认证、授权等功能。</li><li><strong>负载均衡：</strong> 通过与 Spring Cloud Discovery 结合使用，Gateway 可以自动地将请求分发到可用的服务实例，从而实现负载均衡。</li></ol><p>如下图是 Gateway 的工作流程</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401111748874.png" alt="Spring Cloud Gateway Diagram" style="zoom:80%;float:left"></p><h3 id="Gateway-优缺点"><span class="post-title-index">1.2. </span><a href="#Gateway-优缺点" class="headerlink" title="Gateway 优缺点"></a>Gateway 优缺点</h3><p><strong>优点</strong></p><ul><li><strong>集成 <code>Spring</code> 生态系统：</strong>作为Spring Cloud项目的一部分，Gateway天然地集成了Spring的生态系统。</li><li><strong>灵活的路由规则：</strong> Spring Cloud Gateway支持动态配置的路由规则，使得系统可以根据需要灵活地进行请求路由，适应不同的微服务架构。</li><li><strong>强大的过滤器系统：</strong> Gateway提供了灵活的过滤器系统，可以对请求进行各种处理，包括身份验证、鉴权、请求修改等，从而满足不同场景的需求。</li></ul><p><strong>缺点</strong></p><ul><li><strong>学习曲线：</strong>如果不熟悉微服务架构和网关概念，可能不太好理解网关的概念。</li></ul><p>总体来说 Gateway 是基于 <code>Zuul</code> 进行发展而来的，目前来说 <code>Gateway</code> 还是十分强悍的一款微服务网关。</p><h3 id="Gateway-应用场景"><span class="post-title-index">1.3. </span><a href="#Gateway-应用场景" class="headerlink" title="Gateway 应用场景"></a>Gateway 应用场景</h3><blockquote><p>我们需要明白，Gateway 主要的作用还是进行网关，所有的请求首先都会先进入网关服务，我们基于这个功能进行扩展.</p></blockquote><ul><li><p><strong>白名单控制</strong></p><ul><li>我们在请求头中检测，如果是我们白名单中的请求则进行放行，如果不是则直接返回，不进行路由。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthenticationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BlackAndWhiteList blackAndWhiteList;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证需要放行的白名单</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isValidWhiteList(request)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TODO ...</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span> chain.filter(serverWebExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证需要放行的白名单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidWhiteList</span><span class="params">(ServerHttpRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getPath().value();</span><br><span class="line">        String[] whiteList = blackAndWhiteList.getWhiteList();</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtil.isNotEmpty(whiteList)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String whiteUrl : whiteList) &#123;</span><br><span class="line">                <span class="keyword">if</span> (path.lastIndexOf(whiteUrl) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>安全性和认证</strong></p><ul><li>通过在网关层面进行安全性和认证的处理，Spring Cloud Gateway 可以集中管理访问控制、身份验证和授权。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">      <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">      <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证token</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeaders().getFirst(jwtUtil.getHeader());</span><br><span class="line">      <span class="keyword">if</span> (StrUtil.isBlankOrUndefined(token)) &#123;</span><br><span class="line">          <span class="keyword">return</span> unauthorizedResponse(response, ResultCodeEnum.TOKEN_ISNULL_ERROR);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// TODO ...</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">return</span> chain.filter(serverWebExchange);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Gateway-具体操作"><span class="post-title-index">2. </span><a href="#Gateway-具体操作" class="headerlink" title="Gateway 具体操作"></a>Gateway 具体操作</h2><ul><li><p>实现需求</p><ul><li>我们本章节的 <code>Gateway</code> 实现，还是基于我们 <code>Eureka</code> 的集群案例。</li><li>我们首先将请求到网关，网关进行动态路由到不同的服务当中。</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建网关服务 <code>09-spring-cloud-gateway-server-9000</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401121303763.png" alt="image-20240112130300730" style="zoom:100%;float:left"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401121303356.png" alt="image-20240112130349335" style="zoom:100%;float:left"></p></li><li><p><strong>实现步骤</strong></p></li></ul><ol><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.yml</code> 文件</li><li>Step-3：创建主启动类</li></ol><ul><li><p><strong>Step-1：导入 <code>pom.xml</code> 依赖</strong></p><ul><li>注意：不需要导入 web 服务</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 微服务网关依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-2：修改 <code>application.properties</code> 文件</strong></p><ul><li><strong>Route（路由）：</strong>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由。</li><li><strong>Predicate（断言）：</strong>参考的是 <code>Java8</code> 的 <code>java.util.function.Predicate</code> 开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由</li><li><strong>Filter（过滤）：</strong>指的是 <code>Spring</code> 框架中 <code>GatewayFilter</code> 的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-gateway-server</span></span><br><span class="line">  <span class="comment">#--------------------------------- Gateway 配置 start ---------------------------------</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 订单服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-route</span> <span class="comment"># 路由的Id，没有固定的规则，但要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://SPRING-CLOUD-CLUSTER-EUREKA-ORDER</span> <span class="comment"># 替换为你的服务ID，lb:// 表示使用负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 支付服务</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment-route</span> <span class="comment"># 路由的Id，没有固定的规则，但要求唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://SPRING-CLOUD-CLUSTER-EUREKA-PAYMENT</span> <span class="comment"># 替换为你的服务ID，lb:// 表示使用负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/**</span></span><br><span class="line">  <span class="comment">#--------------------------------- Gateway 配置  end  ---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置 start ---------------------------------</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">spring-cloud-gateway-server</span></span><br><span class="line">    <span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-payment:3600</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-gateway-server:9000</span></span><br><span class="line">    <span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment">#--------------------------------- Eureka 配置  end  ---------------------------------</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-3：创建主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网关-启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudGatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Step-4：测试</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401121314267.gif" alt="动画" style="zoom:100%;float:left"></p></li></ul><h2 id="Gateway-之-Predicate（断言）"><span class="post-title-index">3. </span><a href="#Gateway-之-Predicate（断言）" class="headerlink" title="Gateway 之 Predicate（断言）"></a>Gateway 之 Predicate（断言）</h2><ul><li><p>关于 <code>Predicat</code> 的介绍：<a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories</a></p></li><li><p>例如，我们需要在 2017 年 1 月 20 日 17:42 之后的请求进行匹配。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Gateway-之-Filter（过滤）"><span class="post-title-index">4. </span><a href="#Gateway-之-Filter（过滤）" class="headerlink" title="Gateway 之 Filter（过滤）"></a>Gateway 之 Filter（过滤）</h2><ul><li><p>关于 <code>Filter</code> 的介绍：<a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#global-filters">https://cloud.spring.io/spring-cloud-gateway/reference/html/#global-filters</a></p></li><li><p>我们自定义 <code>Filter</code> 实现过滤用户登录认证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户认证-过滤器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthenticationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="type">ResultUtil</span> <span class="variable">result</span> <span class="operator">=</span> ResultUtil.failure(ResultCodeEnum.TOKEN_ISNULL_ERROR);</span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> response.bufferFactory().wrap(JSONUtil.toJsonStr(result).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Flux.just(dataBuffer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401121344961.gif" alt="动画" style="zoom:100%;float:left"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Hystrix（七）</title>
      <link href="/posts/99f55a2c.html"/>
      <url>/posts/99f55a2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud <code>Hystrix</code></h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/08-spring-cloud-hystrix-dashboard-8200">08-spring-cloud-hystrix-dashboard-8200</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/08-spring-cloud-hystrix-order-8100">08-spring-cloud-hystrix-order-8100</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/08-spring-cloud-hystrix-payment-8000">08-spring-cloud-hystrix-payment-8000</a></li></ul></blockquote><h2 id="基本概念"><span class="post-title-index">1. </span><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Hystrix-是什么"><span class="post-title-index">1.1. </span><a href="#Hystrix-是什么" class="headerlink" title="Hystrix 是什么"></a><code>Hystrix</code> 是什么</h3><ul><li><code>Hystrix</code> 是 <code>Netflix</code>  开源的一个用于构建分布式系统中的延迟和容错的库。主要核心功能有 <strong>服务降级、服务熔断、服务限流</strong>。<ul><li><strong>服务降级</strong>：当依赖服务不可用时，返回一个备用的默认值或者执行备选方案，确保系统的基本功能仍然可以使用。</li><li><strong>服务熔断</strong>：服务熔断是一种机制，用于防止故障在分布式系统中蔓延。类似于家庭中的保险丝，服务熔断器会在依赖服务出现故障时进行打开，停止对该服务的调用，避免持续的失败请求导致系统崩溃。</li><li><strong>服务限流</strong>：服务限流是一种控制系统流量的方法，用于防止系统被过多请求压垮。通过限制对某个服务的并发请求或单位时间内的请求数量，可以避免系统因过载而崩溃或变得不稳定。</li></ul></li></ul><h3 id="Hystrix-优缺点"><span class="post-title-index">1.2. </span><a href="#Hystrix-优缺点" class="headerlink" title="Hystrix 优缺点"></a><code>Hystrix</code> 优缺点</h3><p><strong>优点</strong></p><ol><li><strong>容错性强：</strong> Hystrix 提供了服务降级、熔断和限流等机制，可以防止故障在整个系统中扩散，保证系统的稳定性和可用性。</li><li><strong>提高系统可靠性：</strong> 它能够在依赖服务不可用时提供备用方案，确保系统的基本功能可以继续运行。</li><li><strong>监控和度量：</strong> Hystrix 提供了丰富的监控功能，可以实时监控依赖服务的调用情况和性能指标，帮助进行故障排查和性能优化。</li></ol><p><strong>缺点</strong></p><ol><li>目前 <code>Hystrix</code>已经停止更新了。</li><li><strong>复杂性增加：</strong> 在项目中引入 Hystrix 可能会增加代码复杂性，需要对服务调用进行额外的封装和配置。</li></ol><h3 id="Hystrix-应用场景"><span class="post-title-index">1.3. </span><a href="#Hystrix-应用场景" class="headerlink" title="Hystrix 应用场景"></a><code>Hystrix</code> 应用场景</h3><p>​        在一个微服务架构中，服务之间存在着依赖关系。例如，一个电子商务平台的订单服务依赖于库存服务和支付服务。如果库存服务出现了延迟或者不可用，订单服务可能因为等待库存服务的响应而出现延迟，甚至导致服务不可用。在这种情况下，我们就可以采用 <code>Hystrix</code> 进行处理。</p><p><strong>电商平台的库存服务</strong>：</p><ul><li><strong>服务降级：</strong> 当库存服务不可用时，订单服务可以返回一个预先设定的默认库存量，确保用户可以继续下单。</li><li><strong>服务熔断：</strong> 如果库存服务连续出现错误响应或超时，Hystrix 可以打开断路器，暂时停止对库存服务的调用，防止因大量失败请求导致订单系统崩溃。</li><li><strong>服务限流：</strong> 控制对库存服务的访问速率，防止订单系统因过多的库存查询请求而受到压力，保持系统稳定性。</li></ul><p><strong>在线支付系统的支付服务</strong>：</p><ul><li><strong>服务降级：</strong> 当支付服务不可用时，可以返回一个预定义的错误码或信息，告知用户支付暂时不可用，而不是让用户无限等待或看到错误页面。</li><li><strong>服务熔断：</strong> 在支付服务故障频发时，Hystrix 可以打开断路器，阻止进一步的支付请求，避免因支付服务的连续失败导致整个系统不可用。</li><li><strong>服务限流：</strong> 控制支付请求的速率，避免系统因支付请求过多而导致支付服务不稳定或响应时间增加。</li></ul><h2 id="Spring-Cloud-Hystrix-具体实现"><span class="post-title-index">2. </span><a href="#Spring-Cloud-Hystrix-具体实现" class="headerlink" title="Spring Cloud Hystrix 具体实现"></a>Spring Cloud Hystrix 具体实现</h2><h3 id="服务降级"><span class="post-title-index">2.1. </span><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><ul><li><p>实现需求</p><ul><li>我们还是基于 支付微服务和订单服务的例子进行模拟</li></ul></li><li><p>实现思路</p><ul><li>注册中心我们还是延用 Eureka 的集群版。</li><li>Step-1：创建订单服务 <code>08-spring-cloud-hystrix-order-8100</code></li><li>Step-2：创建支付服务 <code>08-spring-cloud-hystrix-payment-8000</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401091439174.png" alt="image-20240109143939131" style="zoom:100%;float:left"></p></li></ul><h4 id="创建支付服务"><span class="post-title-index">2.1.1. </span><a href="#创建支付服务" class="headerlink" title="创建支付服务"></a>创建支付服务</h4><ul><li><p>创建支付服务： <code>08-spring-cloud-hystrix-payment-8000</code></p></li><li><p>实现步骤</p><ol><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li><li>Step-5：编写控制类</li></ol></li><li><p><strong>Step-1：导入 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 熔断限流 hystrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-2：修改 <code>application.properties</code> 文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-hystrix-payment</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-payment:3600</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-hystrix-payment:8000</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-3：创建主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hystrix 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudHystrixPaymentApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudHystrixPaymentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Step-4：编写业务类</strong></p><ul><li><code>PaymentServiceImpl.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-应用服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPaymentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentBySuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;ThreadPool：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, payment service success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentByTimeOut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeNumber</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟网络延迟</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;ThreadPool：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, payment service timeout：&quot;</span> + timeNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Step-5：编写控制类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付微服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IPaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hystrix/success&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentBySuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hystrix/timeOut&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentTimeOut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentByTimeOut();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建订单服务"><span class="post-title-index">2.1.2. </span><a href="#创建订单服务" class="headerlink" title="创建订单服务"></a>创建订单服务</h4><blockquote><p>订单服务会主动进行调用支付服务，所以我们将 <code>服务降级、服务熔断、服务隔离</code> 写在订单服务中。两端都可以写，我们目前写在调用方（订单服务）中。</p></blockquote><ul><li><p>创建订单服务： <code>08-spring-cloud-hystrix-order-8100</code></p></li><li><p>实现步骤</p><ol><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li><li>Step-5：编写控制类</li></ol></li><li><p><strong>Step-1：导入 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 服务调用依赖包：OpenFeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 熔断限流 hystrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-2：修改 <code>application.properties</code> 文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8100</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-hystrix-order</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ============================= Eureka =================================</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-payment:3600</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-hystrix-order:8100</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># ============================= Eureka =================================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ============================= open Feign 配置start =============================</span></span><br><span class="line"><span class="comment"># 建立连接所有的时间，适用于网络状况正常的情况，两端建立所花费时间</span></span><br><span class="line"><span class="attr">feign.client.config.default.connect-timeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 建立连接后服务端读取可用资源所有的时间，默认是 1S</span></span><br><span class="line"><span class="attr">feign.client.config.default.read-timeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># =============================  open Feign 配置end  =============================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ============================= hystrix =================================</span></span><br><span class="line"><span class="comment"># 配置 hystrix 连接超时</span></span><br><span class="line"><span class="attr">feign.hystrix.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/tszxlzc/article/details/106625387</span></span><br><span class="line"><span class="comment"># 目前设置为5 S，默认是 1S（default_executionTimeoutInMilliseconds = 1000）</span></span><br><span class="line"><span class="attr">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># ============================= hystrix =================================</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-3：创建主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableHystrix</span> <span class="comment">// 启用 Hystrix 断路器</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 启用 Eureka 客户端</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 启用 Feign 客户端</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudHystrixOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudHystrixOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Step-4：OpenFeign 调用类</strong></p><ul><li><code>IPaymentHystrixService.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Feign远程调用接口支付接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// value 声明一个 Feign 客户端，value 指定了要调用的服务名为 &quot;SPRING-CLOUD-HYSTRIX-PAYMENT&quot;，</span></span><br><span class="line"><span class="comment">// fallback 指定了当调用失败时的降级处理类为 PaymentFallbackService.class</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRING-CLOUD-HYSTRIX-PAYMENT&quot;, fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPaymentHystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/success&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentBySuccess</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接超时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeOut&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentByTimeOut</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>PaymentFallbackService.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title class_">IPaymentHystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentBySuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentByTimeOut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Step-5：编写控制类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IPaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPaymentSuccess&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPaymentSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentBySuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPaymentTimeOut&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPaymentTimeOut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentByTimeOut();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：我们上面的操作直接做的全局限流操作，其实可以对单个方法进行限流。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getPaymentTimeOut&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;5000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">getPaymentTimeOut</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentHystrixService.paymentByTimeOut();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">paymentTimeOutFallbackMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="单元测试"><span class="post-title-index">2.1.3. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><ul><li><p>正常情况调用</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401091546155.gif" alt="动画" style="zoom:100%;float:left"></p></li><li><p>我们将支付服务服务进行关闭，然后调用</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401091548590.gif" alt="动画" style="zoom:100%;float:left;"></p></li></ul><h3 id="服务熔断"><span class="post-title-index">2.2. </span><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><blockquote><p><strong>服务熔断</strong>：服务熔断是一种机制，用于防止故障在分布式系统中蔓延。类似于家庭中的保险丝，服务熔断器会在依赖服务出现故障时进行打开，停止对该服务的调用，避免持续的失败请求导致系统崩溃。</p></blockquote><ul><li><p>实现需求</p><ul><li>我们还是基于 支付微服务和订单服务的例子进行模拟</li></ul></li><li><p>实现思路</p><ul><li>注册中心我们还是延用 Eureka 的集群版。</li><li>Step-1：修改订单服务 <code>08-spring-cloud-hystrix-order-8100</code></li><li>Step-2：修改支付服务 <code>08-spring-cloud-hystrix-payment-8000</code></li></ul></li></ul><h4 id="修改订单服务"><span class="post-title-index">2.2.1. </span><a href="#修改订单服务" class="headerlink" title="修改订单服务"></a>修改订单服务</h4><ul><li><p><strong>Step-1：修改订单服务 <code>08-spring-cloud-hystrix-order-8100</code></strong></p><ul><li>新增控制类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getPaymentCircuitBreaker/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">getPaymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentHystrixService.paymentCircuitBreaker(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新增 Feign 调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务熔断</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/paymentCircuitBreaker/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改支付服务"><span class="post-title-index">2.2.2. </span><a href="#修改支付服务" class="headerlink" title="修改支付服务"></a>修改支付服务</h4><ul><li><p><strong>Step-2：修改支付服务 <code>08-spring-cloud-hystrix-payment-8000</code></strong></p><ul><li>新增控制类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreakerFallback&quot;,</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;), //是否开启断路器</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;), //请求次数</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;), //时间范围</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;), //失败率达到多少后熔断</span></span><br><span class="line"><span class="meta">        &#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hystrix/paymentCircuitBreaker/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentCircuitBreaker(id);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">paymentCircuitBreakerFallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR, <span class="string">&quot;Fallback: Payment Timeout. Please try again later.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>新增业务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="keyword">final</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> UserOperationException.getInstance(ResultCodeEnum.PARAM_IS_INVALID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">serialNumber</span> <span class="operator">=</span> IdUtil.simpleUUID();</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;ThreadPool：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, serialNumber：&quot;</span> + serialNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="单元测试-1"><span class="post-title-index">2.2.3. </span><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092115331.gif" alt="动画" style="zoom:100%;float:left"></p><h4 id="熔断的状态"><span class="post-title-index">2.2.4. </span><a href="#熔断的状态" class="headerlink" title="熔断的状态"></a>熔断的状态</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092126419.png" alt="image-20240109212631381" style="zoom:80%;float:left"></p><div class="table-container"><table><thead><tr><th>状态</th><th>含义</th></tr></thead><tbody><tr><td>熔断打开 OPEN</td><td>请求到达后，不再执行业务逻辑，内部设置时钟，值为平均故障处理时间 熔断打开状态持续到该时钟设定值后，进入熔断半开状态</td></tr><tr><td>熔断关闭 CLOSED</td><td>熔断关闭，不对微服务进行熔断</td></tr><tr><td>熔断半开 HALF-OPEN</td><td>部分请求执行业务逻辑，尝试恢复微服务，如果请求成功且符合规则，则关闭熔断</td></tr></tbody></table></div><h2 id="Hystrix-服务监控"><span class="post-title-index">3. </span><a href="#Hystrix-服务监控" class="headerlink" title="Hystrix 服务监控"></a><code>Hystrix</code> 服务监控</h2><ul><li><p><code>Hystrix</code>监控中心：<code>Hystrix</code> 提供的一套可视化系统 <code>Hystrix-Dashboard</code> ，可以非常友好的看到当前环境中服务运行的状态。</p></li><li><p>实现思路</p><ol><li>Step-1：创建服务监控 <code>08-spring-cloud-hystrix-dashboard-8200</code></li><li>Step-2：导入 <code>pom.xml</code> 依赖</li><li>Step-3：修改 <code>application.properties</code> 文件</li><li>Step-4：创建主启动类</li></ol></li><li><p>代码截图</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092206973.png" alt="image-20240109220601949" style="zoom:100%;float:left"></p></li></ul><h3 id="创建-DashBoard"><span class="post-title-index">3.1. </span><a href="#创建-DashBoard" class="headerlink" title="创建 DashBoard"></a>创建 <code>DashBoard</code></h3><ul><li><p><strong>Step-1：创建服务监控 <code>08-spring-cloud-hystrix-dashboard-8200</code></strong></p></li><li><p><strong>Step-2：导入 <code>pom.xml</code> 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 熔断限流 hystrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-3：修改 <code>application.properties</code> 文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8200</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-hystrix-dashboard</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Step-4：创建主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;cn.wickson.cloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudHystrixDashboardApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudHystrixDashboardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="http://localhost:8200/hystrix">http://localhost:8200/hystrix</a></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092208943.png" alt="image-20240109220847895" style="zoom:100%;float:left"></p></li></ul><h3 id="启动支付服务"><span class="post-title-index">3.2. </span><a href="#启动支付服务" class="headerlink" title="启动支付服务"></a>启动支付服务</h3><ul><li>在主启动类中添加如下代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此配置是为了服务监控而配置，与服务容错本身无观，springCloud 升级之后的坑</span></span><br><span class="line"><span class="comment"> * ServletRegistrationBean因为springboot的默认路径不是/hystrix.stream</span></span><br><span class="line"><span class="comment"> * 只要在自己的项目中配置上下面的servlet即可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">getServlet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HystrixMetricsStreamServlet</span> <span class="variable">streamServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>();</span><br><span class="line">    ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registrationBean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>访问：<a href="http://localhost:8000/payment/hystrix/paymentCircuitBreaker/1">http://localhost:8000/payment/hystrix/paymentCircuitBreaker/1</a> 制造部分流量</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092258848.png" alt="image-20240109225822823" style="zoom:100%;float:left"></p></li><li><p>访问：<a href="http://localhost:8200/hystrix">http://localhost:8200/hystrix</a> </p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092259178.png" alt="image-20240109225930136"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092259616.png" alt="image-20240109225953581"></p></li></ul><h3 id="DashBoard-图解"><span class="post-title-index">3.3. </span><a href="#DashBoard-图解" class="headerlink" title="DashBoard 图解"></a><code>DashBoard</code> 图解</h3><ul><li>实心圆<ul><li>它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。</li><li>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401092301240.png" alt="image-20201017162830940"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud OpenFeign（六）</title>
      <link href="/posts/afc84402.html"/>
      <url>/posts/afc84402.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-OpenFeign"><a href="#Spring-Cloud-OpenFeign" class="headerlink" title="Spring Cloud OpenFeign"></a>Spring Cloud <code>OpenFeign</code></h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/07-spring-cloud-openfeign-order-7000">07-spring-cloud-openfeign-order-7000</a></li></ul></blockquote><h2 id="基本概念"><span class="post-title-index">1. </span><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="OpenFeign-是什么"><span class="post-title-index">1.1. </span><a href="#OpenFeign-是什么" class="headerlink" title="OpenFeign 是什么"></a><code>OpenFeign</code> 是什么</h3><blockquote><p><code>OpenFeign</code> 官网地址：<a href="https://spring.io/projects/spring-cloud-openfeign/#overview">https://spring.io/projects/spring-cloud-openfeign/#overview</a></p></blockquote><ul><li><code>OpenFeign</code> 是一个用于简化 <code>RESTful</code> 服务调用的声明式 HTTP 客户端库。主要解决的问题还是微服务中服务与服务之间的通信。</li></ul><h3 id="OpenFeign-优缺点"><span class="post-title-index">1.2. </span><a href="#OpenFeign-优缺点" class="headerlink" title="OpenFeign 优缺点"></a><code>OpenFeign</code> 优缺点</h3><p><strong>优点</strong></p><ul><li><p><strong>声明式的接口定义</strong>：使用注解和接口定义 HTTP 请求和响应，使得代码更加清晰易读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-payment&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/list&quot;)</span></span><br><span class="line">    ResultDto <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>易于维护</strong>：声明式的方式让代码更直观，易于理解和维护。</p></li></ul><p><strong>缺点</strong></p><ul><li><strong>灵活性受限</strong>：虽然简化了调用过程，但有时某些高级特性可能无法满足特定需求，需要额外的定制或扩展。</li></ul><h3 id="OpenFeign-应用场景"><span class="post-title-index">1.3. </span><a href="#OpenFeign-应用场景" class="headerlink" title="OpenFeign 应用场景"></a><code>OpenFeign</code> 应用场景</h3><ul><li><strong>微服务中服务之间的通信</strong><ul><li>微服务架构体系中，服务与服务之间进行通信。<code>OpenFeign</code> 可以之间通过声明式接口定义和注解进行开发，简化了配置。</li></ul></li><li><strong>服务治理、负载均衡和故障转移</strong><ul><li><code>OpenFeign</code> 可以集成服务注册与发现机制以及负载均衡器（如Ribbon），实现服务的动态发现和选择，从而提供负载均衡和故障转移的功能。</li></ul></li></ul><h3 id="Feign-和-OpenFeign-区别"><span class="post-title-index">1.4. </span><a href="#Feign-和-OpenFeign-区别" class="headerlink" title="Feign 和 OpenFeign 区别"></a>Feign 和 <code>OpenFeign</code> 区别</h3><blockquote><p><code>Feign</code> 解决了 <code>Ribbon</code> 开发过程中模板式的开发。</p></blockquote><p><strong>Feign</strong></p><ol><li>开发团队：<code>NetFlix</code> 团队开发</li><li>定义方式：通过接口和注解定义 HTTP 请求和响应</li><li>目前已经停止维护</li></ol><p><strong><code>OpenFeign</code></strong></p><ol><li>开发团队：<code>Spring Cloud</code> 团队，对 <code>Feign</code> 进行增强</li><li>定义方式：通过接口和注解定义 HTTP 请求和响应</li><li>目前还在维护</li></ol><h2 id="OpenFeign-具体实现"><span class="post-title-index">2. </span><a href="#OpenFeign-具体实现" class="headerlink" title="OpenFeign 具体实现"></a>OpenFeign 具体实现</h2><ul><li><p>实现需求</p><ul><li>我们本章节的 <code>OpenFeign</code> 实现，还是基于我们 <code>Eureka</code> 的集群案例，只是不需要订单服务。采用 <code>OpenFeign</code> 的服务。</li></ul></li><li><p>实现思路</p><ul><li>其他的四个服务我们还是延用 Eureka 的集群版。</li><li>Step-1：创建订单服务 <code>07-spring-cloud-openfeign-order-7000</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401051751669.png" alt="image-20240105175111635" style="zoom:100%;float:left"></p></li></ul><ul><li><p>实现步骤</p><ol><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写服务调用接口</li><li>Step-5：编写控制类</li></ol></li><li><strong>Step-1：导入 <code>pom.xml</code> 依赖</strong><ul><li>本次需要导入依赖：<code>spring-cloud-starter-openfeign</code></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务调用依赖包：OpenFeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Step-2：修改 <code>application.properties</code> 文件</strong></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">7000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-openfeign-order</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 默认就是应用名称:端口，设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-openfeign-order:7000</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li><strong>Step-3：创建主启动类</strong><ul><li>在启动类中开启服务调用注解：<code>@EnableFeignClients</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenFeign 主启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;cn.wickson.cloud&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudOpenFeignOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudOpenFeignOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Step-4：编写服务调用接口</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程调用支付服务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRING-CLOUD-CLUSTER-EUREKA-PAYMENT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPaymentFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用支付服务的顶单请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/getById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PaymentRespDTO <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Step-5：编写控制类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IPaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单</span></span><br><span class="line"><span class="comment">     * restTemplate.getForObject：返回对象为响应体中数据转化成的对象，基本上可以理解为 Json</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPayment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PaymentRespDTO <span class="title function_">getPaymentByObject</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">PaymentRespDTO</span> <span class="variable">paymentRespDTO</span> <span class="operator">=</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">        log.debug(<span class="string">&quot;paymentRespDTO: &quot;</span> + paymentRespDTO);</span><br><span class="line">        <span class="keyword">return</span> paymentRespDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401051758015.gif" alt="动画" style="zoom:100%;float:left"></p></li></ul><h2 id="OpenFeign-连接超时"><span class="post-title-index">3. </span><a href="#OpenFeign-连接超时" class="headerlink" title="OpenFeign 连接超时"></a>OpenFeign 连接超时</h2><ul><li><strong>Open Feign 连接超时配置默认是 1S</strong></li></ul><p>实现步骤</p><ul><li>直接在配置文件中添加 <code>OpenFeign</code> 连接超时配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########################## open Feign 配置连接超时-start ##########################</span></span><br><span class="line"><span class="comment"># 建立连接所有的时间，适用于网络状况正常的情况，两端建立所花费时间</span></span><br><span class="line"><span class="attr">feign.client.config.default.connect-timeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 建立连接后服务端读取可用资源所有的时间，默认是 1S</span></span><br><span class="line"><span class="attr">feign.client.config.default.read-timeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment">##########################  open Feign 配置连接超时-end  ##########################</span></span><br></pre></td></tr></table></figure><ul><li>在全局异常配置文件中配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Throwable.class)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil <span class="title function_">handleThrowable</span><span class="params">(Throwable e, HttpServletRequest request)</span> &#123;</span><br><span class="line">    log.error(<span class="string">&quot;requestUrl：&#123;&#125;，系统内部异常&quot;</span>, request.getRequestURI(), e);</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.SYSTEM_ERROR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试，我们在 <code>PaymentService</code> 中打上断点</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401071827894.gif" alt="动画"></p></li></ul><h2 id="OpenFeign-日志打印"><span class="post-title-index">4. </span><a href="#OpenFeign-日志打印" class="headerlink" title="OpenFeign 日志打印"></a>OpenFeign 日志打印</h2><p><strong>日志级别</strong></p><ol><li><code>NONE</code>：默认的，不显示任何日志</li><li><code>Basic</code>：仅记录请求方法、URL、响应状态以及执行时间</li><li><code>Headers</code>：除了 <code>Basic</code> 中定义的信息之外，还有请求和响应头信息</li><li><code>Full</code>：除了 <code>Headers</code> 中定义的信息之外，还有请求和响应的正文以及元数据</li></ol><p><strong>开启日志打印</strong> </p><ul><li><code>FeignConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OpenFeign 日志配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. `NONE`：默认的，不显示任何日志</span></span><br><span class="line"><span class="comment">     * 2. `Basic`：仅记录请求方法、URL、响应状态以及执行时间</span></span><br><span class="line"><span class="comment">     * 3. `Headers`：除了 `Basic` 中定义的信息之外，还有请求和响应头信息</span></span><br><span class="line"><span class="comment">     * 4. `Full`：除了 `Headers` 中定义的信息之外，还有请求和响应的正文以及元数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Logger.Level</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>application.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########################## open Feign 日志打印-start ##########################</span></span><br><span class="line"><span class="attr">logging.level.cn.wickson.cloud.openfeign.order.feign.IPaymentFeignService</span>=<span class="string">debug</span></span><br><span class="line"><span class="comment">##########################  open Feign 日志打印-end  ##########################</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.416</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] ---&gt; GET http:<span class="comment">//SPRING-CLOUD-CLUSTER-EUREKA-PAYMENT/payment/getById/1 HTTP/1.1</span></span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.416</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] ---&gt; END <span class="title function_">HTTP</span> <span class="params">(<span class="number">0</span>-<span class="type">byte</span> body)</span></span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] &lt;--- HTTP/<span class="number">1.1</span> <span class="number">200</span> (8ms)</span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] connection: keep-alive</span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] content-type: application/json</span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] date: Sun, <span class="number">07</span> Jan <span class="number">2024</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">47</span> GMT</span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] keep-alive: timeout=<span class="number">60</span></span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] transfer-encoding: chunked</span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] </span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;amount&quot;</span>:<span class="string">&quot;1000.99&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="number">3600</span>&#125;</span><br><span class="line"><span class="number">2024</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">47.425</span> DEBUG <span class="number">16240</span> --- [nio-<span class="number">7000</span>-exec-<span class="number">2</span>] c.w.c.o.o.feign.IPaymentFeignService     : [IPaymentFeignService#getPaymentById] &lt;--- END <span class="title function_">HTTP</span> <span class="params">(<span class="number">39</span>-<span class="type">byte</span> body)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Ribbon（五）</title>
      <link href="/posts/6dc9101.html"/>
      <url>/posts/6dc9101.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/06-spring-cloud-ribbon-order-6000">06-spring-cloud-ribbon-order-6000</a></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Ribbon-是什么"><span class="post-title-index">1.1. </span><a href="#Ribbon-是什么" class="headerlink" title="Ribbon 是什么"></a>Ribbon 是什么</h3><ul><li><p>官方地址：<a href="https://github.com/Netflix/ribbon">https://github.com/Netflix/ribbon</a></p></li><li><p><code>Ribbon</code> 是 <code>NetFlix</code> 提供的一个基于 HTTP 和 TCP 客户端的负载均衡器。主要解决了微服务架构之间服务与服务之间的通信进行负载均衡。</p></li></ul><h3 id="Ribbon-优缺点"><span class="post-title-index">1.2. </span><a href="#Ribbon-优缺点" class="headerlink" title="Ribbon 优缺点"></a>Ribbon 优缺点</h3><p><strong>优点</strong></p><ol><li><strong>集成性：</strong> Ribbon 集成简单。Ribbon可以轻松的集成 Java 微服务架构中，与 Spring Cloud、 <code>Eureka</code> 和 <code>Consul</code> 中使用。</li><li><strong>负载均衡策略：</strong> Ribbon 提供了多种负载均衡算法。例如轮询、随机、加权等等。</li></ol><p><strong>缺点</strong></p><ol><li><strong>不适用于非 Java 生态系统：</strong> Ribbon 主要针对 Java 平台，对于其他语言或平台的应用集成可能不那么方便。</li><li><strong>依赖性：</strong> 在 Netflix 宣布不再主动维护后，Ribbon 的更新和维护可能受到限制，可能会存在安全或功能方面的风险。</li></ol><h3 id="Ribbon-解决了什么问题"><span class="post-title-index">1.3. </span><a href="#Ribbon-解决了什么问题" class="headerlink" title="Ribbon 解决了什么问题"></a>Ribbon 解决了什么问题</h3><ul><li><strong>服务与服务调用的负载均衡</strong>：例如，一个电子商务网站可能有多个商品服务的实例，通过 Ribbon 进行负载均衡，确保用户请求能够均匀地分布到各个商品服务实例上，提高系统的可用性和性能。</li></ul><h3 id="Nginx-和-Ribbon-有什么区别"><span class="post-title-index">1.4. </span><a href="#Nginx-和-Ribbon-有什么区别" class="headerlink" title="Nginx 和 Ribbon 有什么区别"></a>Nginx 和 Ribbon 有什么区别</h3><ul><li><p>Nginx：客户端所有请求统一交给 Nginx，由 Nginx 进行实现负载均衡请求转发，属于服务器端负载均衡。</p></li><li><p>Ribbon：是从 eureka 注册中心服务器端上获取服务注册信息列表，缓存到本地，然后在本地实现轮询负载均衡策略。</p></li><li><p>如下是 <code>Nginx</code> 在微服务架构中的体现</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401041636186.png" alt="image-20240104163643137" style="zoom:80%;float:left"></p></li><li><p>如下是 <code>Nginx</code> 的配置，并不是配置了所有的服务代码，而是只配置一个网关即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /home/ruoyi/projects/ruoyi-ui;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /prod-api/&#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="comment"># 只暴露网关端口</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 避免actuator暴露</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_uri</span> <span class="regexp">~ &quot;/actuator&quot;)</span> &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Ribbon-具体实现"><span class="post-title-index">2. </span><a href="#Ribbon-具体实现" class="headerlink" title="Ribbon 具体实现"></a>Ribbon 具体实现</h2><ul><li><p>实现需求</p><ul><li>我们本章节的 <code>Ribbion</code> 实现，还是基于我们 <code>Eureka</code> 的集群案例，只是不需要订单服务。采用 <code>Ribbon</code> 的服务。</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建订单服务 <code>06-spring-cloud-ribbon-order-6000</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401041753693.png" alt="image-20240104175322656" style="zoom:100%;float:left"></p></li></ul><ul><li><p>创建订单服务：<code>06-spring-cloud-ribbon-order-6000</code></p></li><li><p>实现步骤</p><ol><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li></ol></li><li><p>Step-1：导入 <code>pom.xml</code> 依赖</p><ul><li>在 <code>eureka-client</code> 依赖包中存在在 <code>Ribbon</code> 的相关依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Step-2：修改 <code>application.properties</code> 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">6000</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-ribbon-order</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 默认就是应用名称:端口，设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-ribbon-order:6000</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Step-3：创建主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudRibbonOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudRibbonOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Step-4：编写业务类</p><ul><li>restTemplate.getForObject：返回对象为响应体中数据转化成的对象，基本上可以理解为 Json</li><li>restTemplate.getForEntity：返回的对象为 ResponseEntity 对象，包含一些重要信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://SPRING-CLOUD-CLUSTER-EUREKA-PAYMENT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单</span></span><br><span class="line"><span class="comment">     * restTemplate.getForObject：返回对象为响应体中数据转化成的对象，基本上可以理解为 Json</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPayment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPaymentByObject</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/getById/&quot;</span> + id, ResultUtil.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单</span></span><br><span class="line"><span class="comment">     * restTemplate.getForEntity：返回的对象为 ResponseEntity 对象，包含一些重要信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPayment/entity/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPaymentByEntity</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        ResponseEntity&lt;ResultUtil&gt; entity = restTemplate.getForEntity(PAYMENT_URL + <span class="string">&quot;/payment/getById/&quot;</span> + id, ResultUtil.class);</span><br><span class="line">        <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> entity.getBody();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultUtil.failure(ResultCodeEnum.FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>访问：<a href="http://localhost:6000/order/getPayment/entity/1">http://localhost:6000/order/getPayment/entity/1</a></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401050947833.png" alt="image-20240105094725803" style="zoom:100%;float:left"></p></li></ul><ul><li><p><strong>注意：</strong> 在浏览器访问可能会出现如下情况</p><ul><li>具体解决方案如：<a href="https://blog.csdn.net/whiteBearClimb/article/details/108054219">https://blog.csdn.net/whiteBearClimb/article/details/108054219</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401050946759.png" alt="image-20240105094624716" style="zoom:100%;float:left"></p></li></ul><h2 id="Ribbon-核心组件之IRule"><span class="post-title-index">3. </span><a href="#Ribbon-核心组件之IRule" class="headerlink" title="Ribbon 核心组件之IRule"></a>Ribbon 核心组件之IRule</h2><ul><li><p>IRule：该接口表示负载均衡的策略，其中不同的实现类代表了不同的负载策略。</p></li><li><p>如下图是 IRule 的 <code>UML</code> 类图。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401051029156.png" alt="image-20240105102931121" style="zoom:100%;float:left"></p><ol><li><code>RoundRobinRule</code><ul><li><strong>轮询机制：</strong>Ribbon 默认采用的也是 轮询机制。</li></ul></li><li><code>RandomRule</code><ul><li><strong>随机机制</strong></li></ul></li><li><code>RetryRule</code><ul><li><strong>重试机制：</strong>当某个实例出现故障时，它可以尝试选择其他实例进行重试，帮助提高服务的可靠性。</li></ul></li><li><code>WeightedResponseTimeRUle</code><ul><li><strong>加权响应时间机制：</strong>权重机制是对 <code>RoundRobinRule</code> 策略的扩展，响应的速度越快的实例权重就越大。</li></ul></li><li><code>BestAvailableRule</code><ul><li><strong>最佳可用机制机制：</strong>该机制会选择并发量最小的实例来处理请求，以确保选择的实例负载相对较低。</li></ul></li><li><code>AvailabilityFilteringRule</code><ul><li><strong>可用性过滤机制：</strong>该机制会过滤掉故障实例和并发连接数过高的实例，选择剩余的实例来处理请求，以确保选择的实例都是可用的且负载适中的。</li></ul></li><li><code>ZoneAvoidanceRule</code><ul><li><strong>区域避免机制：</strong>该机制会尽量避免选择和调用处于相同区域的实例，以增加系统的可用性和容错性。</li></ul></li></ol><h3 id="自定义负载均衡机制"><span class="post-title-index">3.1. </span><a href="#自定义负载均衡机制" class="headerlink" title="自定义负载均衡机制"></a>自定义负载均衡机制</h3><blockquote><p>我们基于上面案例进行开发</p></blockquote><p><strong>代码结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401051134809.png" alt="image-20240105113440780" style="zoom:100%;float:left"></p><p><strong>实现思路</strong></p><ol><li>Step-1：自定义规则类 <code>MySelfRule</code></li><li>Step-2：修改主启动类</li></ol><ul><li><p>Step-1：自定义规则类 <code>MySelfRule</code></p><ul><li>注意：新建的 <code>MySelfRule</code> 不要和主启动类放在同一个包下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wickson.cloud.ribbon.rule;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义规则</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义随机规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IRule</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Step-2：修改主启动类</p><ul><li>注意：我们在主启动类新增一个注解 <code>@RibbonClient</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;spring-cloud-cluster-eureka-payment&quot;, configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudRibbonOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudRibbonOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>测试</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401051304268.gif" alt="动画" style="zoom:100%;float:left"></p></li></ul><h2 id="负载均衡算法"><span class="post-title-index">4. </span><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><ul><li>负载均衡算法规则如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest 接口第几次请求 % 服务器集群总数量 = 实际调用服务器位置下标</span><br></pre></td></tr></table></figure><ul><li>例如，假设我们存在两个实例（<code>3600</code> 、 <code>3700</code>），下标分别为 0 和 1 ，按照负载均衡的轮询算法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一次请求：1 % 2 = 1，则找到下标为1的机器，服务地址为：127.0.0.1：3700</span><br><span class="line">第二次请求：2 % 2 = 0，则找到下标为0的机器，服务地址为：127.0.0.1：3600</span><br><span class="line">第一次请求：3 % 2 = 1，则找到下标为1的机器，服务地址为：127.0.0.1：3700</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>具体实现方式如下</li><li><code>ILoadBalance.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>LoadBalanceImpl.java</code><ul><li>主要是使用到了自旋锁进行实现</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认负载均衡算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalanceImpl</span> <span class="keyword">implements</span> <span class="title class_">ILoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadBalanceImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextServerCyclicCounter = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">incrementAndGetModulo</span><span class="params">(<span class="type">int</span> modulo)</span> &#123;</span><br><span class="line">        <span class="type">int</span> current;</span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = <span class="built_in">this</span>.nextServerCyclicCounter.get();</span><br><span class="line">            next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!<span class="built_in">this</span>.nextServerCyclicCounter.compareAndSet(current, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> incrementAndGetModulo(serviceInstances.size());</span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Consul（四）</title>
      <link href="/posts/29b20f4d.html"/>
      <url>/posts/29b20f4d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下2个服务当中：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/05-spring-cloud-singleton-consul-order-5100">05-spring-cloud-singleton-consul-order-5100</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/05-spring-cloud-singleton-consul-payment-5000">05-spring-cloud-singleton-consul-payment-5000</a></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><blockquote><p>官网文档地址：<a href="https://developer.hashicorp.com/consul/docs/intro">https://developer.hashicorp.com/consul/docs/intro</a></p></blockquote><h3 id="Consul-是什么？"><span class="post-title-index">1.1. </span><a href="#Consul-是什么？" class="headerlink" title="Consul 是什么？"></a>Consul 是什么？</h3><ul><li><code>Consul</code> 用于服务发现、健康检查和动态配置的中间件。在 Spring Cloud 来实现服务注册与发现、配置管理、负载均衡等功能，从而构建和管理分布式系统。</li></ul><h3 id="Consul-优缺点"><span class="post-title-index">1.2. </span><a href="#Consul-优缺点" class="headerlink" title="Consul 优缺点"></a>Consul 优缺点</h3><p><strong>优点</strong></p><ol><li><strong>服务发现与注册</strong></li><li><strong>健康检查</strong></li><li><strong>提供图形化界面</strong></li></ol><h3 id="Consul-解决了什么问题"><span class="post-title-index">1.3. </span><a href="#Consul-解决了什么问题" class="headerlink" title="Consul 解决了什么问题"></a>Consul 解决了什么问题</h3><blockquote><p>我们上面讲解的 <code>Eureka</code> 、<code>Zookeeper</code>、<code>Consul</code> 本质上都是注册中心，解决的问题都是分布式场景中存在的问题。例如，服务注册与发现、健康检查、一致性等问题。</p></blockquote><ul><li>Consul 解决了分布式系统中服务发现、健康检查、一致性、动态配置等方面的问题，有助于构建可靠、灵活和高效的分布式系统。</li></ul><h2 id="安装-Consul"><span class="post-title-index">2. </span><a href="#安装-Consul" class="headerlink" title="安装 Consul"></a>安装 <code>Consul</code></h2><blockquote><p><code>Consul</code> 下载地址：<a href="https://developer.hashicorp.com/consul/install#Windows">Install | Consul | HashiCorp Developer</a></p><p>本次下载的版本是1.6.1：<a href="https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_windows_amd64.zip">https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_windows_amd64.zip</a></p></blockquote><p><strong>安装环境</strong></p><ul><li>操作系统：Win 11</li><li>Consul 版本：Consul-1.6.1</li></ul><p><strong>安装步骤</strong></p><ol><li>Step-1：下载安装包</li><li>Step-2：解压安装包</li><li>Step-3：执行 exe 文件</li></ol><p><strong>具体实现</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031628306.png" alt="image-20240103162816270" style="zoom:100%;float:left"></p><h2 id="启动-Consul"><span class="post-title-index">3. </span><a href="#启动-Consul" class="headerlink" title="启动 Consul"></a>启动 <code>Consul</code></h2><ul><li><p>启动命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure></li><li><p>具体操作如下</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031631442.gif" alt="动画"></p></li><li><p>访问 <code>Consul</code> 首页：<a href="http://localhost:8500">http://localhost:8500</a></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031632909.png" alt="image-20240103163244876"></p></li></ul><h2 id="Consul-单机操作"><span class="post-title-index">4. </span><a href="#Consul-单机操作" class="headerlink" title="Consul 单机操作"></a>Consul 单机操作</h2><ul><li><p>实现需求</p><ul><li>我们将上一章节的订单、支付微服务注册到 <code>Consul</code> 当中</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建支付服务 <code>04-spring-cloud-singleton-consul-payment-5000</code></li><li>Step-2：创建订单服务 <code>04-spring-cloud-singleton-consul-order-5100</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031716768.png" alt="image-20240103171620741" style="zoom:100%;float:left"></p></li></ul><h3 id="创建支付服务"><span class="post-title-index">4.1. </span><a href="#创建支付服务" class="headerlink" title="创建支付服务"></a>创建支付服务</h3><ul><li><p>创建支付服务：<code>05-spring-cloud-consul-payment-5000</code></p></li><li><p>实现步骤</p><ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li></ul></li><li><p>Step-1：导入 <code>pom.xml</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 导入 consul 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Step-2：修改 <code>application.properties</code> 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 服务别名</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-consul-payment-5000</span></span><br><span class="line"><span class="comment"># consul 注册节点</span></span><br><span class="line"><span class="attr">spring.cloud.consul.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.cloud.consul.port</span>=<span class="string">8500</span></span><br><span class="line"><span class="attr">spring.cloud.consul.discovery.service-name</span>=<span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Step-3：创建主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudConsulPayment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConsulPayment.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Step-4：编写业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentConsul</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;Spring Cloud with consul port: &quot;</span> + serverPort + <span class="string">&quot;, UUID：&quot;</span> + UUID.randomUUID().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建订单服务"><span class="post-title-index">4.2. </span><a href="#创建订单服务" class="headerlink" title="创建订单服务"></a>创建订单服务</h3><ul><li><p>创建支付服务：<code>05-spring-cloud-consul-order-5100</code></p></li><li><p>实现步骤</p><ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li></ul></li><li><p>其中 Step-1、Step-2、Step-3 与上面操作 <code>创建支付服务</code> 保持一致，只需要修改名称</p></li><li><p>Step-4：编写业务类</p><ul><li><code>OrderController.java</code> 控制类，其中 PAYMENT_URL 需要修改为 <code>05-spring-cloud-consul-payment-5000</code> 注册的服务名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://spring-cloud-consul-payment-5000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPayment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/consul&quot;</span> , ResultUtil.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>RestTemplateConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RestTemplate 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="单元测试"><span class="post-title-index">5. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="是否在-Consul-注册节点"><span class="post-title-index">5.1. </span><a href="#是否在-Consul-注册节点" class="headerlink" title="是否在 Consul 注册节点"></a>是否在 <code>Consul</code> 注册节点</h3><blockquote><p><a href="http://localhost:8500">http://localhost:8500</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031722134.png" alt="image-20240103172254096"></p><h3 id="查看支付服务信息"><span class="post-title-index">5.2. </span><a href="#查看支付服务信息" class="headerlink" title="查看支付服务信息"></a>查看支付服务信息</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031725440.png" alt="image-20240103172500397"></p><h3 id="查看订单服务信息"><span class="post-title-index">5.3. </span><a href="#查看订单服务信息" class="headerlink" title="查看订单服务信息"></a>查看订单服务信息</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031725158.png" alt="image-20240103172528120"></p><h3 id="访问订单服务"><span class="post-title-index">5.4. </span><a href="#访问订单服务" class="headerlink" title="访问订单服务"></a>访问订单服务</h3><blockquote><p>访问订单服务时，我们可以看到对应的端口信息时 支付微服务的 5000</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031757127.png" alt="image-20240103173057222" style="zoom:100%;float:left"></p><h2 id="CAP-理论"><span class="post-title-index">6. </span><a href="#CAP-理论" class="headerlink" title="CAP 理论"></a>CAP 理论</h2><blockquote><p>我们已经整体的学习了三个注册中心：Eureka、Zookeeper、Consul。在微服务体系中他们主要的作用都是承担了服务发现与注册，服务的健康检查等等。我们从开发语言和CAP角度看一下这三个注册中心有什么不同。</p></blockquote><ul><li><strong>CAP 理论</strong><ul><li><strong>Consistency：</strong> 一致性，指系统的所有节点在同一时间看到的数据是一致的。</li><li><strong>Availability：</strong> 可用性，指系统在有请求时能够返回正确的响应，即系统保证服务可用，不会因节点故障而出现不可用的情况。</li><li><strong>Partition Tolerance：</strong> 分区容错性，指系统在遇到网络分区（节点之间通信失败，不能互相通信）的情况下仍然能够继续运行。</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left">Eureka</th><th>Zookeeper</th><th>Consul</th></tr></thead><tbody><tr><td style="text-align:left"><strong>开发语言</strong></td><td style="text-align:left">Java</td><td>Java</td><td>Go、但提供了 REST API 可以用于其他语言</td></tr><tr><td style="text-align:left"><strong>CAP 特性</strong></td><td style="text-align:left">通常为 AP（可用性和分区容错性）</td><td>通常为 CP（一致性和分区容错性）</td><td>可以根据配置变为 CP 或 AP</td></tr><tr><td style="text-align:left"><strong>服务发现</strong></td><td style="text-align:left">可以作为服务注册与发现的中心组件，支持微服务架构。</td><td>提供服务发现功能，但需要更多自定义和额外开发。</td><td>提供了内置的服务注册与发现功能，易于集成和使用。</td></tr><tr><td style="text-align:left"><strong>使用场景</strong></td><td style="text-align:left">适用于需要快速搭建和维护的微服务架构。</td><td>适用于需要强一致性的分布式系统，如分布式协调、配置管理等。</td><td>适用于需要灵活性并可以根据需求选择一致性或可用性的系统。</td></tr><tr><td style="text-align:left"><strong>社区支持</strong></td><td style="text-align:left">相对活跃的社区支持，但可能不如其他选项成熟。</td><td>成熟且活跃的社区支持，被广泛应用于许多大规模系统中。</td><td>有不少用户和社区支持，但相对于 Zookeeper 可能规模较小。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Zookeeper（三）</title>
      <link href="/posts/8b8112c0.html"/>
      <url>/posts/8b8112c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下2个服务当中（singleton-单机）：</p><ul><li><p><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/04-spring-cloud-singleton-zookeeper-order-4100">04-spring-cloud-singleton-zookeeper-order-4100</a></p></li><li><p><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/04-spring-cloud-singleton-zookeeper-payment-4000">04-spring-cloud-singleton-zookeeper-payment-4000</a></p></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Zookeeper-是什么？"><span class="post-title-index">1.1. </span><a href="#Zookeeper-是什么？" class="headerlink" title="Zookeeper 是什么？"></a>Zookeeper 是什么？</h3><ul><li><p>Zookeeper 是一个开源的分布式协调服务，旨在提供高度可靠性和高性能的分布式数据管理和协调。</p></li><li><p>在微服务体系中 <code>Zookeeper</code> 可以充当我们的服务注册中心，允许微服务在其上注册自身的位置信息，并且允许其他服务查询和发现这些注册服务。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021759126.png" alt="Apache_ZooKeeper_logo.svg" style="zoom:80%;float:left"></p></li></ul><h3 id="Zookeeper-优缺点"><span class="post-title-index">1.2. </span><a href="#Zookeeper-优缺点" class="headerlink" title="Zookeeper 优缺点"></a>Zookeeper 优缺点</h3><p><strong>优点</strong></p><ol><li><strong>高可用性：</strong> ZooKeeper采用了多副本机制，支持主备架构，确保了服务的高可用性。</li><li><strong>一致性和可靠性：</strong> 提供了强一致性的数据模型，对数据的更新操作都是原子性的，能够确保数据的可靠性和一致性。</li><li><strong>轻量级和高性能：</strong> ZooKeeper的设计注重了性能和效率，可以处理大规模的请求，并且响应速度很快。</li><li><strong>可扩展性：</strong> 可以很容易地扩展集群，支持动态添加和删除节点，以适应不同规模和负载的需求。</li><li><strong>通用性：</strong> 不仅可以作为服务注册中心，还可以用于分布式锁、队列、选举等场景，具有通用性。</li></ol><p><strong>缺点</strong></p><ol><li><strong>复杂性：</strong> 在配置、部署和维护方面需要一定的专业知识，可能增加系统的复杂性。</li><li><strong>单点故障：</strong> 尽管ZooKeeper的设计是高可用的，但如果整个ZooKeeper集群失效，会对整个系统造成严重影响。</li><li><strong>性能瓶颈：</strong> 在某些高并发场景下，ZooKeeper可能成为性能瓶颈，对系统的性能产生影响。</li></ol><h3 id="Zookeeper-解决了什么问题"><span class="post-title-index">1.3. </span><a href="#Zookeeper-解决了什么问题" class="headerlink" title="Zookeeper 解决了什么问题"></a>Zookeeper 解决了什么问题</h3><p><strong>服务注册与发现</strong></p><ul><li><strong>问题</strong>：购物车服务需要与其他服务进行通信，但是服务的 IP 地址和端口是动态变化的。</li><li><strong>Zookeeper 提供的解决方案：</strong> 购物车服务在启动时注册自己的 IP 地址和端口到 ZooKeeper 的节点中。其他服务需要调用购物车服务时，可以从 ZooKeeper 获取最新的购物车服务地址和端口信息，实现动态的服务发现和通信。</li></ul><p><strong>服务的健康检查</strong></p><ul><li><strong>问题：</strong> 当购物车服务出现故障时，其他服务需要知道购物车的服务状态。</li><li><strong>Zookeeper 提供的解决方案：</strong> ZooKeeper 可以监控购物车服务节点的健康状态，如果购物车服务不可用，ZooKeeper 可以及时更新节点信息，通知其他服务不要使用该服务或使用备用服务。</li></ul><h2 id="安装-Zookeeper"><span class="post-title-index">2. </span><a href="#安装-Zookeeper" class="headerlink" title="安装 Zookeeper"></a>安装 <code>Zookeeper</code></h2><blockquote><p><code>Zookeeper</code> 下载地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fapache.org%2Fdist%2Fzookeeper%2F">https://apache.org/dist/zookeeper/</a></p></blockquote><p><strong>安装环境</strong></p><ul><li>操作系统：CentOS Linux release 7.9.2009 (Core)</li><li>Zookeeper 版本：zookeeper-3.4.14</li></ul><p><strong>安装步骤</strong></p><ol><li>Step-1：上传安装包</li><li>Step-2：解压安装包</li><li>Step-3：修改配置文件</li></ol><p><strong>具体实现</strong></p><ul><li><p>Step-1：上传安装包，直接将安装包上传至 <code>home</code> 盘符</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031026912.png" alt="image-20240103102654867" style="zoom:100%;float:left"></p></li><li><p>Step-2：解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>Step-3：修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# cd zookeeper-3.4.14/conf/</span><br><span class="line">[root@localhost conf]# cp zoo_sample.cfg zoo.cfg</span><br><span class="line">[root@localhost conf]# ll</span><br><span class="line">总用量 16</span><br><span class="line">-rw-rw-r--. 1 2002 2002  535 3月   7 2019 configuration.xsl</span><br><span class="line">-rw-rw-r--. 1 2002 2002 2161 3月   7 2019 log4j.properties</span><br><span class="line">-rw-r--r--. 1 root root  922 1月   3 10:29 zoo.cfg</span><br><span class="line">-rw-rw-r--. 1 2002 2002  922 3月   7 2019 zoo_sample.cfg</span><br><span class="line">[root@localhost conf]# </span><br></pre></td></tr></table></figure></li></ul><h2 id="启动-Zookeeper"><span class="post-title-index">3. </span><a href="#启动-Zookeeper" class="headerlink" title="启动 Zookeeper"></a>启动 <code>Zookeeper</code></h2><blockquote><p>本次搭建的环境是 <code>Zookeeper</code> 的单机环境</p></blockquote><ul><li>启动：./zkServer.sh start</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper-3.4.14]<span class="comment"># cd bin/</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./zkServer.sh start # 启动 Zookeeper</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@localhost bin]<span class="comment"># </span></span><br></pre></td></tr></table></figure><ul><li>停止：./zkServer.sh stop</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br><span class="line">[root@localhost bin]# </span><br></pre></td></tr></table></figure><ul><li>重启：./zkServer.sh restart</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./zkServer.sh restart</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... no zookeeper to stop (could not find file /tmp/zookeeper/zookeeper_server.pid)</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@localhost bin]# </span><br></pre></td></tr></table></figure><ul><li>状态：./zkServer.sh status</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># ./zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Mode: standalone</span><br><span class="line">[root@localhost bin]<span class="comment"># </span></span><br></pre></td></tr></table></figure><ul><li>进入节点：./zkCli.sh </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./zkCli.sh </span><br><span class="line">Connecting to localhost:2181</span><br><span class="line">2024-01-03 10:39:16,723 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.14-4c25d480e66aadd371de8bd2fd8da255ac140bcf, built on 03/06/2019 16:18 GMT</span><br><span class="line">2024-01-03 10:39:16,725 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=localhost</span><br><span class="line">2024-01-03 10:39:16,725 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_171</span><br><span class="line">2024-01-03 10:39:16,726 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</span><br><span class="line">2024-01-03 10:39:16,726 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/home/java/jdk1.8.0_171/jre</span><br><span class="line">2024-01-03 10:39:16,726 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/home/zookeeper-3.4.14/bin/../zookeeper-server/target/classes:/home/zookeeper-3.4.14/bin/../build/classes:/home/zookeeper-3.4.14/bin/../zookeeper-server/target/lib/*.jar:/home/zookeeper-3.4.14/bin/../build/lib/*.jar:/home/zookeeper-3.4.14/bin/../lib/slf4j-log4j12-1.7.25.jar:/home/zookeeper-3.4.14/bin/../lib/slf4j-api-1.7.25.jar:/home/zookeeper-3.4.14/bin/../lib/netty-3.10.6.Final.jar:/home/zookeeper-3.4.14/bin/../lib/log4j-1.2.17.jar:/home/zookeeper-3.4.14/bin/../lib/jline-0.9.94.jar:/home/zookeeper-3.4.14/bin/../lib/audience-annotations-0.5.0.jar:/home/zookeeper-3.4.14/bin/../zookeeper-3.4.14.jar:/home/zookeeper-3.4.14/bin/../zookeeper-server/src/main/resources/lib/*.jar:/home/zookeeper-3.4.14/bin/../conf:.:/home/java/jdk1.8.0_171/lib/dt.jar:/home/java/jdk1.8.0_171/lib/tools.jar</span><br><span class="line">2024-01-03 10:39:16,726 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">2024-01-03 10:39:16,726 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</span><br><span class="line">2024-01-03 10:39:16,727 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class="line">2024-01-03 10:39:16,727 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</span><br><span class="line">2024-01-03 10:39:16,731 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</span><br><span class="line">2024-01-03 10:39:16,731 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.10.0-1160.el7.x86_64</span><br><span class="line">2024-01-03 10:39:16,731 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</span><br><span class="line">2024-01-03 10:39:16,731 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</span><br><span class="line">2024-01-03 10:39:16,731 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/home/zookeeper-3.4.14/bin</span><br><span class="line">2024-01-03 10:39:16,732 [myid:] - INFO  [main:ZooKeeper@442] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@4b9af9a9</span><br><span class="line">2024-01-03 10:39:16,753 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1025] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">JLine support is enabled</span><br><span class="line">2024-01-03 10:39:16,844 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@879] - Socket connection established to localhost/127.0.0.1:2181, initiating session</span><br><span class="line">2024-01-03 10:39:16,885 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x10000196f360000, negotiated timeout = 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] </span><br></pre></td></tr></table></figure><h2 id="Zookeeper-单机操作"><span class="post-title-index">4. </span><a href="#Zookeeper-单机操作" class="headerlink" title="Zookeeper 单机操作"></a>Zookeeper 单机操作</h2><ul><li><p>实现需求</p><ul><li>我们将上一章节的 订单、支付微服务注册到 <code>Zookeeper</code> 当中</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建支付服务 <code>04-spring-cloud-singleton-zookeeper-payment-4000</code></li><li>Step-2：创建订单服务 <code>04-spring-cloud-singleton-zookeeper-order-4100</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031709896.png" alt="image-20240103170907862" style="zoom:100%;float:left"></p></li></ul><h3 id="创建支付服务"><span class="post-title-index">4.1. </span><a href="#创建支付服务" class="headerlink" title="创建支付服务"></a>创建支付服务</h3><ul><li>创建支付服务：<code>04-spring-cloud-singleton-zookeeper-payment-4000</code></li><li><p>实现步骤</p><ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li></ul></li><li><p>导入 <code>pom.xml</code> 依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Zookeeper 组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除自带的 Zookeeper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加 zookeeper 3.4.14 版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">4000</span></span><br><span class="line"><span class="comment"># 服务别名</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-zookeeper-payment-4000</span></span><br><span class="line"><span class="comment"># zookeeper 注册节点</span></span><br><span class="line"><span class="attr">spring.cloud.zookeeper.connect-string</span>=<span class="string">192.168.1.15:2181</span></span><br></pre></td></tr></table></figure><ul><li>创建主启动类<ul><li><strong>注意</strong>：需要添加 @EnableDiscoveryClient ，用于向 consul 或者 zookeeper 作为注册中心注册微服务</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 用于向 consul 或者 zookeeper 作为注册中心注册微服务</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudZookeeperPaymentApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZookeeperPaymentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写业务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">paymentZk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(<span class="string">&quot;Spring Cloud with zookeeper port: &quot;</span> + serverPort + <span class="string">&quot;, UUID：&quot;</span> + UUID.randomUUID().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建订单服务"><span class="post-title-index">4.2. </span><a href="#创建订单服务" class="headerlink" title="创建订单服务"></a>创建订单服务</h3><ul><li><p>创建订单服务：<code>04-spring-cloud-singleton-zookeeper-order-4100</code></p></li><li><p>实现步骤</p><ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li></ul></li><li><p>导入 <code>pom.xml</code> 依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入公共依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Zookeeper 组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除自带的 Zookeeper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加 zookeeper 3.4.14 版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">4100</span></span><br><span class="line"><span class="comment"># 服务别名</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-zookeeper-order-4100</span></span><br><span class="line"><span class="comment"># zookeeper 注册节点</span></span><br><span class="line"><span class="attr">spring.cloud.zookeeper.connect-string</span>=<span class="string">192.168.1.15:2181</span></span><br></pre></td></tr></table></figure><ul><li>创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 用于向 consul 或者 zookeeper 作为注册中心注册微服务</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudZookeeperOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZookeeperOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>编写业务类</p></li><li><p><code>OrderController.java</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;spring-cloud-zookeeper-payment-4000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPayment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/zk&quot;</span> , ResultUtil.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>RestTemplateController.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RestTemplate 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><span class="post-title-index">5. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="是否在-Zookeeper-注册节点"><span class="post-title-index">5.1. </span><a href="#是否在-Zookeeper-注册节点" class="headerlink" title="是否在 Zookeeper 注册节点"></a>是否在 <code>Zookeeper</code> 注册节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 36] <span class="built_in">ls</span> /</span><br><span class="line">[services, zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 37] <span class="built_in">ls</span> /services</span><br><span class="line">[spring-cloud-zookeeper-payment-4000, spring-cloud-zookeeper-order-4100]</span><br></pre></td></tr></table></figure><h3 id="查看支付服务信息"><span class="post-title-index">5.2. </span><a href="#查看支付服务信息" class="headerlink" title="查看支付服务信息"></a>查看支付服务信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 38] <span class="built_in">ls</span> /services/spring-cloud-zookeeper-payment-4000 </span><br><span class="line">[d4569f56-631c-4e57-babc-cbdcf0f3ffe5]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 39] get /services/spring-cloud-zookeeper-payment-4000/d4569f56-631c-4e57-babc-cbdcf0f3ffe5</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;spring-cloud-zookeeper-payment-4000&quot;</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;d4569f56-631c-4e57-babc-cbdcf0f3ffe5&quot;</span>,</span><br><span class="line"><span class="string">&quot;address&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line"><span class="string">&quot;port&quot;</span>: 4000,</span><br><span class="line"><span class="string">&quot;sslPort&quot;</span>: null,</span><br><span class="line"><span class="string">&quot;payload&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;@class&quot;</span>: <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;application-1&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;spring-cloud-zookeeper-payment-4000&quot;</span>,</span><br><span class="line"><span class="string">&quot;metadata&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;registrationTimeUTC&quot;</span>: 1704262890376,</span><br><span class="line"><span class="string">&quot;serviceType&quot;</span>: <span class="string">&quot;DYNAMIC&quot;</span>,</span><br><span class="line"><span class="string">&quot;uriSpec&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;parts&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;scheme&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;://&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;address&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;:&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;port&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看订单服务信息"><span class="post-title-index">5.3. </span><a href="#查看订单服务信息" class="headerlink" title="查看订单服务信息"></a>查看订单服务信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 40] <span class="built_in">ls</span> /services/spring-cloud-zookeeper-order-4100                                        </span><br><span class="line">[e9fc060d-e1e5-4ef6-bd49-729405d998c6]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 41] get /services/spring-cloud-zookeeper-order-4100/e9fc060d-e1e5-4ef6-bd49-729405d998c6</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;spring-cloud-zookeeper-order-4100&quot;</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;e9fc060d-e1e5-4ef6-bd49-729405d998c6&quot;</span>,</span><br><span class="line"><span class="string">&quot;address&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line"><span class="string">&quot;port&quot;</span>: 4100,</span><br><span class="line"><span class="string">&quot;sslPort&quot;</span>: null,</span><br><span class="line"><span class="string">&quot;payload&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;@class&quot;</span>: <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span>,</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;application-1&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;spring-cloud-zookeeper-order-4100&quot;</span>,</span><br><span class="line"><span class="string">&quot;metadata&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;registrationTimeUTC&quot;</span>: 1704262892614,</span><br><span class="line"><span class="string">&quot;serviceType&quot;</span>: <span class="string">&quot;DYNAMIC&quot;</span>,</span><br><span class="line"><span class="string">&quot;uriSpec&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;parts&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;scheme&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;://&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;address&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;:&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;port&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问订单服务"><span class="post-title-index">5.4. </span><a href="#访问订单服务" class="headerlink" title="访问订单服务"></a>访问订单服务</h3><ul><li><a href="http://localhost:4100/order/getPayment/zk">http://localhost:4100/order/getPayment/zk - Error</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031431496.png" alt="image-20240103143111463" style="zoom:100%;float:left"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Eureka（二）</title>
      <link href="/posts/8118b43f.html"/>
      <url>/posts/8118b43f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h1><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p><p>我们只需要聚焦在如下8个服务当中（cluster-集群、singleton-单机）：</p><ul><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-cluster-eureka-order-3500">03-spring-cloud-cluster-eureka-order-3500</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-cluster-eureka-payment-3600">03-spring-cloud-cluster-eureka-payment-3600</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-cluster-eureka-payment-3700">03-spring-cloud-cluster-eureka-payment-3700</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-cluster-eureka-server-3300">03-spring-cloud-cluster-eureka-server-3300</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-cluster-eureka-server-3400">03-spring-cloud-cluster-eureka-server-3400</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-singleton-eureka-order-3100">03-spring-cloud-singleton-eureka-order-3100</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-singleton-eureka-payment-3200">03-spring-cloud-singleton-eureka-payment-3200</a></li><li><a href="https://github.com/wicksonZhang/Spring-Cloud/tree/main/03-spring-cloud-singleton-eureka-server-3000">03-spring-cloud-singleton-eureka-server-3000</a></li></ul></blockquote><h2 id="基础概念"><span class="post-title-index">1. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Eureka-是什么？"><span class="post-title-index">1.1. </span><a href="#Eureka-是什么？" class="headerlink" title="Eureka 是什么？"></a>Eureka 是什么？</h3><ul><li><p><code>Eureka</code> 是 <code>Netflix</code> 团队开发的一个注册中心组件，<code>Eureka</code> 在 <code>Spring Cloud</code> 体系中主要的作用是允许服务互相发现和通信。</p></li><li><p>在 <code>Eureka</code> 组件中有如下两个比较重要的角色：</p><ul><li><code>Eureka Server</code>：<code>Eureka</code> 服务端负责维护服务实例的注册表。所有的服务实例都会向 <code>Eureka Server</code> 注册自己的位置和状态信息，并定期更新。</li><li><code>Eureka Client</code>： <code>Eureka</code> 客户端会向 <code>Eureka</code> 服务端注册自己，并从服务器获取其他服务的信息，以便实现服务之间的通信。</li></ul></li><li><p>如下图是 <code>Spring Cloud</code> 体系中 <code>Eureka</code> 组件在其中发挥的作用：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312281455088.png" alt="image-20231228145552037" style="zoom:80%;float:left"></p></li><li><p>最后我们通过一个例子总结一下，想象一下你入职一家新公司，就像使用 Eureka 的服务发现机制一样。当你需要办理入职手续或者与其他部门的同事交流时，你并不需要自己去了解每个人的位置和联系方式。相反，你可以通过公司的内部联系系统（就像 Eureka 服务器一样），在其中找到你需要的同事或资源的位置信息。这种服务发现的机制让你能够更迅速地定位和联系到公司内部的各个部门或同事，类似于使用 Eureka 找到服务实例，你可以轻松地找到需要的人或资源，然后进行有效的沟通和协作。</p></li></ul><h3 id="Eureka-的优缺点"><span class="post-title-index">1.2. </span><a href="#Eureka-的优缺点" class="headerlink" title="Eureka 的优缺点"></a>Eureka 的优缺点</h3><p><strong>优点</strong></p><ul><li><strong>高可用性</strong>：<code>Eureka</code> 服务器本身支持高可用性配置，可以部署多个实例以防止单点故障，提高系统的稳定性。</li><li><strong>易于集成：</strong> Eureka 对于许多云服务和框架都有良好的集成性，如与Spring Cloud等主流框架配合使用。</li><li><strong>轻量级：</strong> 相对较小的内存占用和开销，适用于各种规模的应用。</li></ul><p><strong>缺点</strong></p><ul><li><strong>单点故障</strong>：Eureka 在单个实例故障时可能导致整个服务发现系统的不可用。虽然使用集群可以避免这个问题，但是这也是一个潜在的风险。</li><li><strong>复杂性管理</strong>：随着服务的增加，管理多个 <code>Eureka</code> 服务器和大量实例可能会变得复杂。</li></ul><h3 id="Eureka-解决了什么问题"><span class="post-title-index">1.3. </span><a href="#Eureka-解决了什么问题" class="headerlink" title="Eureka 解决了什么问题"></a>Eureka 解决了什么问题</h3><ul><li><p><strong>服务注册和发现</strong></p><ul><li>在上面章节已经讲过，Eureka 允许服务实例自动注册到注册中心报告自己的位置和状态。这使得服务通信之间更加简单。</li><li>例如我们上一章节的案例，我们不使用 <code>Eureka</code>会产生的问题，我们直接就将相关的服务地址写死了。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312281543801.png" alt="image-20231228154320764" style="zoom:100%;float:left"></p></li></ul><ul><li><p><strong>服务健康检查</strong></p><ul><li>Eureka 可以监控服务实例的健康状态，定期发送心跳来告知注册中心其状态，这有助于实现自动发现故障实例并剔除出服务池，确保系统的可靠性。</li><li>我们还是以上面的案例为例，如果 服务 <code>02-spring-cloud-payment-2100</code> 出现故障但是在服务 <code>02-spring-cloud-order-2000</code> 不知道，这会导致服务的不可靠性。</li></ul></li></ul><ul><li><strong>简化了服务间通信</strong> <ul><li>通过 Eureka 注册中心，服务之间的通信变得更加简单，服务实例的位置信息可以动态地从注册中心获取，而不需要硬编码或手动配置服务地址。</li></ul></li></ul><h2 id="Eureka-单机操作"><span class="post-title-index">2. </span><a href="#Eureka-单机操作" class="headerlink" title="Eureka 单机操作"></a>Eureka 单机操作</h2><ul><li><p>实现需求</p><ul><li>我们将上一章节的 订单、支付微服务注册到 <code>Eureka</code> 当中</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建注册中心 <code>03-spring-cloud-singleton-eureka-server-3000</code></li><li>Step-2：创建订单服务 <code>03-spring-cloud-singleton-eureka-order-3100</code></li><li>Step-3：创建支付服务 <code>03-spring-cloud-singleton-eureka-payment-3200</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312291434362.png" alt="image-20231229143406316" style="zoom:100%;float:left"></p></li></ul><h3 id="创建注册中心"><span class="post-title-index">2.1. </span><a href="#创建注册中心" class="headerlink" title="创建注册中心"></a>创建注册中心</h3><ul><li>注册中心服务名：<code>03-spring-cloud-singleton-eureka-server-3000</code></li><li><p>实现步骤</p><ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li></ul></li><li><p>导入 <code>pom.xml</code> 依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的服务端 eureka-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">3000</span></span><br><span class="line"><span class="comment"># 单机版名称</span></span><br><span class="line"><span class="attr">eureka.instance.hostname</span>=<span class="string">localhost</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eureka 服务端-单机节点注册中心</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudSingletonEurekaServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudSingletonEurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建订单服务"><span class="post-title-index">2.2. </span><a href="#创建订单服务" class="headerlink" title="创建订单服务"></a>创建订单服务</h3><ul><li>订单服务名：<code>03-spring-cloud-singleton-eureka-order-3100</code></li><li>实现步骤<ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li></ul></li><li>导入 <code>pom.xml</code> 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">3100</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-eureka-order-3100</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:3000/eureka</span></span><br></pre></td></tr></table></figure><ul><li>Step-3：创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudSingletonEurekaOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudSingletonEurekaOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建支付服务"><span class="post-title-index">2.3. </span><a href="#创建支付服务" class="headerlink" title="创建支付服务"></a>创建支付服务</h3><ul><li>订单服务名：<code>03-spring-cloud-singleton-eureka-payment-3200</code></li><li>实现步骤<ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li></ul></li><li>导入 <code>pom.xml</code> 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">3200</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-eureka-payment-3200</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://localhost:3000/eureka</span></span><br></pre></td></tr></table></figure><ul><li>Step-3：创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-微服务启用类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudSingletonEurekaPaymentApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudSingletonEurekaPaymentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">2.4. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li><p>当我们启动 注册中心、订单服务、支付服务 时，在 <code>Eureka</code> 中观察服务实例情况</p></li><li><p>访问 <code>http://localhost:3000/</code></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312291436891.png" alt="image-20231229143659837"></p></li></ul><h2 id="Eureka-集群操作"><span class="post-title-index">3. </span><a href="#Eureka-集群操作" class="headerlink" title="Eureka 集群操作"></a>Eureka 集群操作</h2><blockquote><p>上面我们已经说过了我们部署单机节点可能会出现节点故障，针对这个问题我们采用的方式是进行集群化部署。</p></blockquote><ul><li><p>实现需求</p><ul><li>我们将上一章节的 订单、支付微服务注册到 <code>Eureka</code> 当中</li></ul></li><li><p>实现思路</p><ul><li>Step-1：创建注册中心1 <code>03-spring-cloud-cluster-eureka-server-3300</code></li><li>Step-2：创建注册中心2 <code>03-spring-cloud-cluster-eureka-server-3400</code></li><li>Step-3：创建订单服务 <code>03-spring-cloud-cluster-eureka-order-3500</code></li><li>Step-4：创建支付服务1 <code>03-spring-cloud-cluster-eureka-payment-3600</code></li><li>Step-5：创建支付服务2 <code>03-spring-cloud-cluster-eureka-payment-3700</code></li></ul></li><li><p>代码结构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021602600.png" alt="image-20240102160234554" style="zoom:100%;float:left"></p></li></ul><h3 id="创建注册中心1"><span class="post-title-index">3.1. </span><a href="#创建注册中心1" class="headerlink" title="创建注册中心1"></a>创建注册中心1</h3><ul><li>注册中心服务名：<code>03-spring-cloud-cluster-eureka-server-3300</code></li><li><p>实现步骤</p><ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li></ul></li><li><p>Step-1：导入 <code>pom.xml</code> 依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的服务端 eureka-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Step-2：修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">3300</span></span><br><span class="line"><span class="comment"># 集群版名称</span></span><br><span class="line"><span class="attr">eureka.instance.hostname</span>=<span class="string">eureka3300.com</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3400.com:3400/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>Step-3：创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Eureka 服务端1-集群节点注册中心</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-01-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudClusterEurekaServer1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudClusterEurekaServer1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：由于我们采用的集群配置，其中 <code>properties</code> 文件中的集群名称对应着 <code>hosts</code> 映射文件，需要修改为如下配置：</strong></p><ul><li>路径：<code>C:\Windows\System32\drivers\etc</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Eureka</span><br><span class="line">127.0.0.1 eureka3300.com</span><br><span class="line">127.0.0.1 eureka3400.com</span><br></pre></td></tr></table></figure><h3 id="创建注册中心2"><span class="post-title-index">3.2. </span><a href="#创建注册中心2" class="headerlink" title="创建注册中心2"></a>创建注册中心2</h3><ul><li><p>注册中心服务名： <code>03-spring-cloud-cluster-eureka-server-3400</code></p></li><li><p>实现步骤：同上述 <code>创建注册中心1</code> 一致</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021610787.png" alt="image-20240102161027760" style="zoom:100%;float:left"></p></li></ul><h3 id="创建订单服务-1"><span class="post-title-index">3.3. </span><a href="#创建订单服务-1" class="headerlink" title="创建订单服务"></a>创建订单服务</h3><ul><li>注册中心服务名：<code>03-spring-cloud-cluster-eureka-order-3500</code></li><li>实现步骤<ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：修改配置文件</li></ul></li><li>Step-1：导入 <code>pom.xml</code> 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Step-2：修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">3500</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-cluster-eureka-order</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 默认就是应用名称:端口，设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>Step-3：创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudClusterEurekaOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudClusterEurekaOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Step-4：修改 <code>RestTemplateConfig</code> 文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RestTemplate 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以下内容需要注意：</strong></p><ol><li><p>Eureka 集群注册节点在 <code>application.properties</code> 中需要配置两个集群服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>Eureka 服务实例需要在 <code>application.properties</code> 中配置唯一标识</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认就是应用名称:端口，设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021620917.png" alt="image-20240102162025882" style="zoom:100%;float:left"></p></li><li><p><code>RestTemplateConfig.java</code> 文件中需要添加 <code>@LoadBalanced</code> 做负载均衡。由于我们从订单服务调用两个支付微服务。所以需要进行负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@LoadBalanced</span></span><br><span class="line">   <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="创建支付服务1"><span class="post-title-index">3.4. </span><a href="#创建支付服务1" class="headerlink" title="创建支付服务1"></a>创建支付服务1</h3><ul><li>注册中心服务名：<code>03-spring-cloud-cluster-eureka-payment-3600</code></li><li>实现步骤<ul><li>Step-1：导入 <code>pom.xml</code> 依赖</li><li>Step-2：修改 <code>application.properties</code> 文件</li><li>Step-3：创建主启动类</li><li>Step-4：编写业务类</li></ul></li><li>Step-1：导入 <code>pom.xml</code> 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公共依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册中心的客户端端 eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Step-2：修改 <code>application.properties</code> 文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">3600</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-cluster-eureka-payment</span></span><br><span class="line"><span class="comment"># 是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-payment:3600</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-cluster-eureka-payment:3600</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>Step-3：创建主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;cn.wickson.cloud&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudClusterEurekaPayment1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudClusterEurekaPayment1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Step-4：编写业务类</p><ul><li>具体业务详见 <code>微服务-基础知识</code> 那一章节内容</li></ul></li><li><p><strong>以下内容需要注意：</strong></p><ol><li>Eureka 集群注册节点在 <code>application.properties</code> 中需要配置两个集群服务</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://eureka3300.com:3300/eureka,http://eureka3400.com:3400/eureka</span></span><br></pre></td></tr></table></figure><ol><li>Eureka 服务实例需要在 <code>application.properties</code> 中配置唯一标识</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认就是应用名称:端口，设置Eureka服务实例的唯一标识为 spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="attr">eureka.instance.instance-id</span>=<span class="string">spring-cloud-cluster-eureka-order:3500</span></span><br><span class="line"><span class="comment"># 设置Eureka客户端是否偏好使用IP地址注册到Eureka服务器，而不是使用主机名</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021620917.png" alt="image-20240102162025882" style="zoom:100%;float:left"></p><ol><li>spring.application.name 两个支付服务的配置名称一样</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spring-cloud-cluster-eureka-payment</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建支付服务2"><span class="post-title-index">3.5. </span><a href="#创建支付服务2" class="headerlink" title="创建支付服务2"></a>创建支付服务2</h3><ul><li><p>注册中心服务名：<code>03-spring-cloud-cluster-eureka-payment-3700</code></p></li><li><p>实现步骤：同上述 <code>创建支付订单1</code> 一致</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021637829.png" alt="image-20240102163714796" style="zoom:100%;float:left"></p></li></ul><h3 id="单元测试-1"><span class="post-title-index">3.6. </span><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li>我们测试集群环境是否搭建成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401031409099.gif" alt="动画"></p><h2 id="参考博文"><span class="post-title-index">4. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li>具体信息可以参考博文：<a href="https://developer.aliyun.com/article/1133813">https://developer.aliyun.com/article/1133813</a></li></ul><h2 id="Eureka-自我保护"><span class="post-title-index">5. </span><a href="#Eureka-自我保护" class="headerlink" title="Eureka 自我保护"></a>Eureka 自我保护</h2><ul><li><p>自我保护机制是为了避免因网络抖动或分区而影响服务注册中心的整体可用性，保证服务的稳定性和可靠性。例如：当服务主线网络波动时，导致注册中心中的部分节点失去联系，这会让注册中心任务服务已经离线，但并不立即将其从注册表中移除，从而避免了在网络分区期间误删正常服务的情况。</p></li><li><p>当访问注册中心时，如果出现如下内容表示 <code>Eureka</code> 开启了自我保护机制</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401021656958.png" alt="image-20240102165640923"></p></li><li><p><code>Eureka</code> 自我保护机制可以参考这篇博文：<a href="https://www.cnblogs.com/linjiqin/p/10090000.html">https://www.cnblogs.com/linjiqin/p/10090000.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-基础概念（一）</title>
      <link href="/posts/90fb4997.html"/>
      <url>/posts/90fb4997.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Could"><span class="post-title-index">1. </span><a href="#Spring-Could" class="headerlink" title="Spring Could"></a>Spring Could</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/Spring-Cloud">https://github.com/wicksonZhang/Spring-Cloud</a></p></blockquote><h3 id="微服务是什么？"><span class="post-title-index">1.1. </span><a href="#微服务是什么？" class="headerlink" title="微服务是什么？"></a>微服务是什么？</h3><ul><li><p>微服务是针对大型项目复杂性而设计的软件架构模式，它将整个应用拆分成小型、独立的服务单元，每个服务专注于特定的业务功能。这种拆分降低了系统之间的耦合性，是的每个微服务之间能够独立开发、部署和扩展。</p></li><li><p>如下图就是微服务 (<code>microservices</code>) 架构示例：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202503111635692.jpeg" alt="Microservices-3.png"></p></li></ul><h3 id="微服务有什么优缺点"><span class="post-title-index">1.2. </span><a href="#微服务有什么优缺点" class="headerlink" title="微服务有什么优缺点"></a>微服务有什么优缺点</h3><p><strong>优点：</strong></p><ol><li><strong>解耦性：</strong> 微服务架构将业务模块拆分，每个模块通过 <code>API</code> 进行服务调用，降低了模块间的紧密耦合度。</li><li><strong>灵活性和可扩展性：</strong>当模块进行拆分之后每个模块就变得更加独立，而且修改每个模块的内容时不会影响到其他模块。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>分布式系统复杂性：</strong> 微服务拆分后需要处理分布式通信、数据一致性等问题，可能增加项目复杂性。</li><li><strong>部署和运维成本过高：</strong>微服务架构拆分为多个模块之后，涉及到多个模块的维护，而部署时会涉及到多个服务的管理和运维。</li></ol><h3 id="微服务解决了什么问题？"><span class="post-title-index">1.3. </span><a href="#微服务解决了什么问题？" class="headerlink" title="微服务解决了什么问题？"></a>微服务解决了什么问题？</h3><blockquote><p>上面的描述已经解释的差不多了，微服务项目主要还是解决了项目庞大之后不易维护的问题。</p></blockquote><ul><li><strong>2000 ~ 2010 年左右（服务导向架构（<code>SOA</code>））</strong><ul><li>2000年前后至2010年左右是 <code>SOA</code> 概念逐渐兴起和发展的阶段。</li></ul></li><li><strong>2006 年左右（ 云计算和容器技术兴起 ）</strong><ul><li>云计算概念开始在2006年左右兴起，容器技术如Docker于2013年左右开始引起广泛关注。</li></ul></li><li><strong>2010 年左右（ <code>Netflix</code> 和互联网公司的实践 ）</strong><ul><li><code>Netflix</code> 等互联网巨头在2010年左右开始采用微服务架构，并提出了一系列开源工具和实践经验，如 Eureka（服务发现）、<code>Hystrix</code>（容错和降级）、Ribbon（负载均衡）等。</li></ul></li><li><strong>2014 年左右（ Martin Fowler 提出 “微服务” 概念 ）</strong><ul><li>Martin Fowler等人在2014年左右正式提出“微服务”的概念。</li><li>微服务的概念传入中国，2015年左右国内大厂开始进行项目升级，转战微服务</li></ul></li><li><strong>2015 年左右 （ 微服务的流行和演进 ）</strong></li></ul><h3 id="微服务应用场景"><span class="post-title-index">1.4. </span><a href="#微服务应用场景" class="headerlink" title="微服务应用场景"></a>微服务应用场景</h3><ul><li><p><strong>大型复杂应用：</strong> 当项目规模过大时，采用微服务架构可以将整个系统拆分为小的、自治的服务单元。类似于商城系统中可以将支付服务和订单服务进行拆分。</p><p><img src="https://camo.githubusercontent.com/1280055cd63df49c189f555983062d69539e5ddbb6b8f26d0e116a319b4487d6/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323236313532353738392e706e67" alt="image-20231226152558752" style="zoom:100%;float:left"></p></li><li><p><strong>技术异构性需求：</strong> 微服务架构的宗旨在于只对外暴露 <code>api</code> 接口，不在乎内部是用什么语言进行开发，如果不同业务需要采用不同技术栈时可以采用微服务。</p></li><li><p><strong>弹性和可扩展性：</strong> 微服务的架构可以根据业务的发展有针对性的水平扩展具体的服务，而不需要扩展整个应用。</p><p><img src="https://camo.githubusercontent.com/bbfbc2b44ffe87eaf46d70af066b4b167954ef9768a75aebfb617fc675a82ea7/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323236313532373530372e706e67" alt="image-20231226152700480" style="zoom:100%;float:left"></p></li></ul><h2 id="微服务技术架构选型"><span class="post-title-index">2. </span><a href="#微服务技术架构选型" class="headerlink" title="微服务技术架构选型"></a>微服务技术架构选型</h2><h3 id="Java-微服务技术架构选型"><span class="post-title-index">2.1. </span><a href="#Java-微服务技术架构选型" class="headerlink" title="Java 微服务技术架构选型"></a>Java 微服务技术架构选型</h3><p>刚刚我们在上面已经说明了微服务架构需要使用到的一些技术架构。例如，服务注册与发现、负载均衡、网关等等。</p><ul><li><p>下图中说明当前依旧主流使用的微服务技术架构，其中的❌表示不再维护停止更新，✅表示还在维护。</p><p><img src="https://camo.githubusercontent.com/a2f03fb3ae06893120a25c9fc908b0fa8acbed1cbaee7ec971bfa5127fbcebbf/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323236313734373030332e706e67" alt="微服务组件选型" style="zoom:100%;float:left"></p></li></ul><h3 id="Spring-Boot-版本选择"><span class="post-title-index">2.2. </span><a href="#Spring-Boot-版本选择" class="headerlink" title="Spring Boot 版本选择"></a>Spring Boot 版本选择</h3><ul><li><p>Spring Boot <code>github</code> ：<a href="https://github.com/spring-projects/spring-boot">https://github.com/spring-projects/spring-boot</a></p></li><li><p>Spring Boot 官网地址：<a href="https://spring.io/projects/spring-boot">https://spring.io/projects/spring-boot</a></p></li></ul><h3 id="Spring-Cloud-版本选择"><span class="post-title-index">2.3. </span><a href="#Spring-Cloud-版本选择" class="headerlink" title="Spring Cloud 版本选择"></a>Spring Cloud 版本选择</h3><p>Spring Cloud 官网地址：<a href="https://spring.io/projects/spring-cloud/">https://spring.io/projects/spring-cloud/</a></p><ul><li><p>其中如下 <code>api</code> 中涉及相关的版本组件选择：<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p><p><img src="https://camo.githubusercontent.com/bf1afb53cb694a5d94ecb7c1a99bed27ba733a7362680cef59a6ff4c8d85b569/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323236313735393035302e706e67" alt="image-20231226175933030" style="zoom:100%;float:left"></p></li><li><p>Spring Cloud Alibaba 推荐版本：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明">https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E</a></p><p><img src="https://camo.githubusercontent.com/246399ef96148b39f4c33ce3168bcba5aad572ed11bbd9925bcaaa1fb84495ff/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323430313331313131313637352e706e67" alt="image-20240131111113639" style="zoom:100%;float:left"></p></li><li><p>以前是通过伦敦地铁站定义<code>Spring Cloud</code> 版本，现在直接通过年份来代替 <code>Spring Cloud</code> 对应版本，并且对应后面的 <code>Spring Boot</code> 版本号</p><p><img src="https://camo.githubusercontent.com/64f31b4adcc6c2dbae1c1b64cbf1f1a9674dc5163d35b7621dd7558ccb37239f/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323236313735373835332e706e67" alt="image-20231226175710820" style="zoom:100%;float:left"></p></li></ul><h2 id="微服务技术实践"><span class="post-title-index">3. </span><a href="#微服务技术实践" class="headerlink" title="微服务技术实践"></a>微服务技术实践</h2><blockquote><p>我们本次实践的案例是以订单、支付两个模块，但是其中会有很多开发细节《<a href="https://www.bilibili.com/video/BV18E411x7eT">尚硅谷SpringCloud框架开发教程</a>》不太一样，因为在学习过程中和开发是有很大不一样的。</p></blockquote><ul><li><p>需求信息</p><ul><li>我们通过访问订单微服务 <code>02-spring-cloud-order-2000</code> 的接口，然后在订单微服务的内部支付微服务 <code>03-spring-cloud-payment-3000</code> 的接口。</li></ul></li><li><p>实现步骤</p><ul><li>Step-1：创建项目</li><li>Step-2：导入 <code>Maven</code> 依赖</li><li>Step-3：修改 <code>yml/properties</code> 文件</li><li>Step-4：开发业务逻辑</li></ul></li><li><p>项目结构如下，后续新增的模块也会以如下格式进行新增</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">├─Spring-Cloud # 父级工程</span><br><span class="line">│├─01-spring-cloud-common # 公共模块</span><br><span class="line">││  ├─src</span><br><span class="line">││    └─main</span><br><span class="line">││        └─java</span><br><span class="line">││        │   └─cn.wickson.cloud.common</span><br><span class="line">││        │        └─enums     # 枚举类</span><br><span class="line">││        │        ├─handle    # 全局统一处理类</span><br><span class="line">││        │        ├─model  # 实体信息</span><br><span class="line">││        │        │  ├─dto</span><br><span class="line">││        │        │  ├─entity</span><br><span class="line">││        │        │  └─vo</span><br><span class="line">││        │        └─utils     # 工具类信息</span><br><span class="line">││        └─resources</span><br><span class="line">││  </span><br><span class="line">│├─02-spring-cloud-order-2000 # 订单模块</span><br><span class="line">││  ├─src</span><br><span class="line">││    ├─main</span><br><span class="line">││      ├─java</span><br><span class="line">││      │  └─cn.wickson.cloud.order</span><br><span class="line">││      │      ├─config</span><br><span class="line">││      │      ├─controller</span><br><span class="line">││      └─resources</span><br><span class="line">││  </span><br><span class="line">│└─02-spring-cloud-payment-2100 # 支付模块</span><br><span class="line">│├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│├─java</span><br><span class="line">││  └─cn.wickson.cloud.payment</span><br><span class="line">││      ├─controller</span><br><span class="line">││      ├─convert</span><br><span class="line">││      └─service</span><br><span class="line">││      └─impl</span><br><span class="line">│└─resources</span><br></pre></td></tr></table></figure><h3 id="父级工程"><span class="post-title-index">3.1. </span><a href="#父级工程" class="headerlink" title="父级工程"></a>父级工程</h3><ul><li><p>父级工程只提供 <code>pom.xml</code> 依赖信息，具体信息如下：</p><p><img src="https://camo.githubusercontent.com/912bb980fd61197047d789eaf3a77f9e3636a68af95aa60e8f7193faa106e808/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238313134393135342e706e67" alt="image-20231228114944103" style="zoom:100%;float:left"></p></li><li><p><code>pom.xml</code> 信息</p><ul><li>注意：在如下配置没有引入 <code>mybatis</code> 、<code>druid</code> 、<code>mysql-connector-java</code> 这些依赖信息。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--父项目基本信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wickson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-Cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--子项目基本信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>01-spring-cloud-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>02-spring-cloud-order-2000<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>02-spring-cloud-payment-2100<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.12<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapstruct.version</span>&gt;</span>1.5.3.Final<span class="tag">&lt;/<span class="name">mapstruct.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目依赖包统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- spring boot 2.2.2 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- spring cloud Hoxton.SR1 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- hutool工具依赖包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- lombok 工具依赖包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- MapStruct 依赖包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- mapstruct-processor依赖包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="公共模块"><span class="post-title-index">3.2. </span><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h3><blockquote><p>公共模块主要提供了两个服务公用的逻辑。例如，统一的数据结果返回、公共的实体类信息等等。</p></blockquote><ul><li><p>项目具体信息如下：</p><p><img src="https://camo.githubusercontent.com/c64235968b5d917176a2236c88c9d840e367f2af7ee811bfce1b40f53aa82e7d/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238303935303933362e706e67" alt="image-20231228095051904" style="zoom:100%;float:left"></p></li><li><p>其中值得关注的类有两个 <code>GlobalExceptionHandler</code> 、<code>GlobalResponseHandler</code></p><ul><li><code>GlobalExceptionHandler</code>：全局异常处理器</li><li><code>GlobalResponseHandler</code> ：全局统一返回结果集处理器</li></ul></li><li><p><code>GlobalResponseHandler.java</code></p><ul><li>注意：使用时需要在 <code>@ControllerAdvice</code> 添加相关包扫描信息。并且在相关的 <code>@SpringBootApplication</code> 启动类添加包扫描。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据结果统一格式全局处理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(</span></span><br><span class="line"><span class="meta">        basePackages = &#123;&quot;cn.wickson.cloud.payment.controller&quot;, &quot;cn.wickson.cloud.order.controller&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalResponseHandler</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否支持advice功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值：true=表示开启， false=表示关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理response的具体业务方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object body,</span></span><br><span class="line"><span class="params">                                  MethodParameter returnType,</span></span><br><span class="line"><span class="params">                                  MediaType selectedContentType,</span></span><br><span class="line"><span class="params">                                  Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span></span><br><span class="line"><span class="params">                                  ServerHttpRequest request,</span></span><br><span class="line"><span class="params">                                  ServerHttpResponse response)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验Controller层传递过来的值是否为String类结构的数据，为真则转成Json格式，以保持统一格式返回客户端</span></span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toJsonStr(ResultUtil.success(body));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止重复包裹的问题出现</span></span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> ResultUtil) &#123;</span><br><span class="line">            <span class="keyword">return</span> body;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果body实现 ResultUnpacked 接口类，则不需要返回统一结果封装</span></span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> ResultUnpacked) &#123;</span><br><span class="line">            <span class="keyword">return</span> body;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果值给客户端</span></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>SpringCloudOrderApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;cn.wickson.cloud&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="订单模块"><span class="post-title-index">3.3. </span><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><blockquote><p>订单类主要是要调用支付类的信息，所以通过 <code>SpringBoot</code> 提供的 <code>RestTemplate</code> 进行远程调用即可。</p></blockquote><ul><li><p>项目具体信息如下：</p><p><img src="https://camo.githubusercontent.com/54c83fa09cf47280ed0accfe55957a0ad8dbbf1a74c5417905da92377d96f409/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238313031323632322e706e67" alt="image-20231228101224595" style="zoom:100%;float:left"></p></li><li><p><code>OrderController.java</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用支付信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payment 支付信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, ResultUtil.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultUtil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getPayment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultUtil <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/getById/&quot;</span> + id, ResultUtil.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>RestTemplateConfig.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpRequestFactory <span class="title function_">simpleClientHttpRequestFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleClientHttpRequestFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleClientHttpRequestFactory</span>();</span><br><span class="line">        factory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        factory.setConnectTimeout(<span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支付模块"><span class="post-title-index">3.4. </span><a href="#支付模块" class="headerlink" title="支付模块"></a>支付模块</h3><blockquote><p>我们支付模块主要就提供了两个接口，其中一个用于生成支付订单信息，另一个用于查询订单信息。</p></blockquote><ul><li>项目具体信息如下：</li></ul><p><a href="https://camo.githubusercontent.com/23ad15dcab9dad8c30b92cd3720f006b5543e4e62a860fb1320c2cde9cfc5260/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238313135313232382e706e67"><img src="https://camo.githubusercontent.com/23ad15dcab9dad8c30b92cd3720f006b5543e4e62a860fb1320c2cde9cfc5260/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238313135313232382e706e67" alt="image-20231228115104199"></a></p><ul><li><code>PaymentController</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付服务-控制类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-12-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IPaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建支付订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paymentVO 订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> PaymentCreateReqVO paymentVO)</span> &#123;</span><br><span class="line">        <span class="comment">/* Step-1：创建支付订单 */</span></span><br><span class="line">        <span class="built_in">this</span>.paymentService.create(paymentVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据订单id获取支付订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 订单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PaymentRespDTO <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">/* Step-1： 获取支付订单 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.paymentService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>PaymentServiceImpl.java</code><ul><li>在我们 <code>PaymentServiceImpl</code> 中并没有去操作数据库信息，但是不影响我们的核心操作。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IPaymentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Payment&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建支付信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paymentVO 支付info</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(<span class="keyword">final</span> PaymentCreateReqVO paymentVO)</span> &#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> PaymentConvert.INSTANCE.toEntity(paymentVO);</span><br><span class="line">        list.add(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回支付信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PaymentRespDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PaymentRespDTO <span class="title function_">getById</span><span class="params">(<span class="keyword">final</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaymentRespDTO</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PaymentRespDTO</span> <span class="variable">paymentRespDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentRespDTO</span>();</span><br><span class="line">        <span class="keyword">for</span> (Payment payment : list) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">paymentId</span> <span class="operator">=</span> payment.getId();</span><br><span class="line">            <span class="keyword">if</span> (paymentId.equals(id)) &#123;</span><br><span class="line">                paymentRespDTO = PaymentConvert.INSTANCE.toDTO(payment);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paymentRespDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">3.5. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ul><li><p>我们通过调用 订单微服务 ，然后在订单微服务调用支付微服务，如下我们通过 <code>ApiPost</code> 进行测试</p><p><a href="https://camo.githubusercontent.com/3e64a528b51bbe7fd9dbcaaa5f817007160f720892887c7856808cd968004acd/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238313032353638372e676966"><img src="https://camo.githubusercontent.com/3e64a528b51bbe7fd9dbcaaa5f817007160f720892887c7856808cd968004acd/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7769636b736f6e5a68616e672f7374617469632d736f757263652d63646e2f696d616765732f3230323331323238313032353638372e676966" alt="动画"></a></p></li></ul><h2 id="参考博文"><span class="post-title-index">4. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li>尚硅谷 <code>SpringCloud</code> 框架开发教程：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a></li><li>笔记：<a href="https://gitee.com/lixiaogou/cloud2020/tree/master">https://gitee.com/lixiaogou/cloud2020/tree/master</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-类加载器</title>
      <link href="/posts/9314e59f.html"/>
      <url>/posts/9314e59f.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节示例代码：<a href="https://github.com/wicksonZhang/Java-Virtual-Machine/tree/main/01-chapter/src/main/java/cn/wickson/jvm/item04">https://github.com/wicksonZhang/Java-Virtual-Machine/tree/main/01-chapter/src/main/java/cn/wickson/jvm/item04</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403262248049.png" alt="04-类加载器" style="zoom:100%;float:left"></p><hr><h2 id="什么是类加载器？"><span class="post-title-index">2. </span><a href="#什么是类加载器？" class="headerlink" title="什么是类加载器？"></a>什么是类加载器？</h2><p>类加载器：主要将类的字节码加载到内存中，并且在运行时将其转换为 Java 对象的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282113106.png" alt="image-20240228211308931" style="zoom:80%;"></p><hr><h2 id="类加载器的分类"><span class="post-title-index">3. </span><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h2><p>在Java中，类加载器（ClassLoader）根据其加载类的来源和加载策略的不同，可以分为以下几种主要类型：</p><p><strong>启动类加载器（Bootstrap Class Loader）</strong></p><ul><li>启动类加载器：主要负责加载 Java 的核心类库，例如 <code>java.lang</code> 包中的类。</li><li>注意：<strong>启动类加载器是虚拟机底层（C++）实现的类，并不是 Java 类，无法再 Java 中获取对其的引用</strong>。</li></ul><p><strong>扩展类加载器（Extension Class Loader）</strong></p><ul><li>扩展类加载器：主要负责加载 java 的扩展类库，位于JRE 的 <code>lib/ext</code> 目录下的 JAR 文件中的类。</li><li>注意：<strong>扩展类加载器是由 Java 实现的一部分，可以通过 Java 代码获取对其的引用</strong>。</li></ul><p><strong>应用程序类加载器（Application Class Loader）</strong></p><ul><li>应用程序类加载器：主要负责加载应用程序的类路径（classpath）下的类，通常是应用程序的类和第三方库的类，是 <code>sun.misc.Launcher$AppClassLoader</code>类的实例，在JVM启动时创建。</li><li>注意：<strong>扩展类加载器是由 Java 实现的一部分，通常是 Java 开发者自定义类加载器的父加载器。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403252341774.png" alt="image-20240325234103733" style="zoom:100%;float:left"></p><p>通过 Arthas 进行验证，通过输入 <code>classloader</code> 命令可以看到确实存在 <code>Bootstrap</code>、<code>Extension</code>、<code>Application</code> 三个类加载器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[arthas@22540]$ classloader</span><br><span class="line"> name                                                numberOfInstances  loadedCountTotal</span><br><span class="line"> sun.misc.Launcher<span class="variable">$AppClassLoader</span>                    1                  13922</span><br><span class="line"> BootstrapClassLoader                                1                  4128</span><br><span class="line"> com.taobao.arthas.agent.ArthasClassloader           1                  1224</span><br><span class="line"> sun.reflect.DelegatingClassLoader                   300                300</span><br><span class="line"> sun.misc.Launcher<span class="variable">$ExtClassLoader</span>                    1                  66</span><br><span class="line"> javax.management.remote.rmi.NoCallStackClassLoader  2                  2</span><br><span class="line"> sun.reflect.misc.MethodUtil                         1                  1</span><br><span class="line">Affect(row-cnt:7) cost <span class="keyword">in</span> 9 ms.</span><br><span class="line">[arthas@22540]$</span><br></pre></td></tr></table></figure><hr><h2 id="启动类加载器"><span class="post-title-index">4. </span><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h2><p><strong>启动类加载器</strong>：主要负责加载 Java 核心类库（<code>java.lang</code> 包中的类），默认会加载 <code>jre/lib</code> 下的类文件信息。启动类加载器也是优先级最高的，这样做的好处主要是保证了 Java 程序的<strong>安全性</strong>。</p><p>如下是通过 启动类加载器 加载用户 jar 包：</p><blockquote><p>BootStrapClassLoader：01-chapter/BootStrapClassLoader/src/main/java/cn/wickson/classloader/BootStrapClassLoader.java</p><p>BootstrapClassLoaderDemo：01-chapter/src/main/java/cn/wickson/jvm/item04/BootstrapClassLoaderDemo.java</p></blockquote><ul><li>我们创建 BootStrapClassLoader 类并打包成 jar 包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202403261728182.png" alt="image-20240326172858138" style="zoom:100%;float:left"></p><ul><li>我们通过 启动类加载器 加载 <code>BootStrapClassLoader-1.0-SNAPSHOT.jar</code> 包，使用 <code>-Xbootclasspath/a:/jar包目录/jar包名</code> 进行扩展</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202403261631341.png" alt="image-20240326163123295" style="zoom:100%;float:left"></p><ul><li>打印结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Initial BootStrapClassLoader ClassLoader </span><br><span class="line">clazz = class cn.wickson.classloader.BootStrapClassLoader</span><br></pre></td></tr></table></figure><hr><h2 id="扩展类加载器"><span class="post-title-index">5. </span><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h2><p><strong>扩展类加载器</strong>：主要使 java 平台具备了更好的 <strong>模块化</strong> 和 <strong>扩展性</strong>。总的来说，扩展类加载器的存在补充了启动类加载器的功能。例如，Java的服务提供者接口（Service Provider Interface，SPI）机制。</p><blockquote><p>SPI（Service Provider Interface）机制：JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件,主要用于框架中开发，例如Dubbo、Spring、Common-Logging，JDBC等采用采用SPI机制，针对同一接口采用不同的实现提供给不同的用户，从而提高了框架的扩展性。</p><p>相关博文：<a href="https://juejin.cn/post/7132742686099898398">https://juejin.cn/post/7132742686099898398</a></p></blockquote><p>我们实现一个 Java SPI 案例</p><blockquote><p><strong>Logger</strong>：01-chapter/ExtensionClassLoader/src/main/java/cn/wickson/classloader/Logger.java</p><p><strong>MyLoggerProvider1</strong>：01-chapter/ExtensionClassLoader/src/main/java/cn/wickson/classloader/MyLoggerProvider1.java</p><p><strong>MyLoggerProvider2</strong>：01-chapter/ExtensionClassLoader/src/main/java/cn/wickson/classloader/MyLoggerProvider2.java</p><p><strong>cn.wickson.classloader.Logger</strong>：01-chapter/ExtensionClassLoader/src/main/resources/META-INF/services/cn.wickson.classloader.Logger</p><p><strong>ExtensionClassLoaderDemo</strong>：01-chapter/src/main/java/cn/wickson/jvm/item04/ExtensionClassLoaderDemo.java</p></blockquote><ul><li>我们创建 <strong>ExtensionClassLoader</strong> 类并打包成 jar 包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403262126361.png" alt="image-20240326212605281"></p><ul><li><p>我们通过 ExtensionClassLoaderDemo 类SPI机制动态加载<code>Logger</code>接口的具体实现</p></li><li><p>如下演示如何将 <code>ExtensionClassLoader-1.0-SNAPSHOT.jar</code> 加载到 ExtensionClassLoaderDemo 中</p><ul><li>第一步：通过 maven 打包，得到 <code>ExtensionClassLoader-1.0-SNAPSHOT.jar</code></li><li>第二步：在 Project Structure ==&gt; Libraries ==&gt; + ==&gt; java</li><li>具体流程如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403262236568.gif" alt="动画"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtensionClassLoaderDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用ServiceLoader动态加载Logger接口的实现</span></span><br><span class="line">        ServiceLoader&lt;Logger&gt; loader = ServiceLoader.load(Logger.class);</span><br><span class="line">        <span class="keyword">for</span> (Logger logger : loader) &#123;</span><br><span class="line">            logger.log(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyLoggerProvider1.log ==&gt; Hello, World!</span><br><span class="line">MyLoggerProvider2.log ==&gt; Hello, World!</span><br></pre></td></tr></table></figure><hr><h2 id="应用类加载器"><span class="post-title-index">6. </span><a href="#应用类加载器" class="headerlink" title="应用类加载器"></a>应用类加载器</h2><p>应用类加载器：主要负责加载应用程序的类路径（classpath）下的类，包括开发者自己编写的类和第三方类库中的类。</p><p>如下是我们通过应用类加载器加载的类</p><blockquote><p>ApplicationClassLoaderDemo：01-chapter/src/main/java/cn/wickson/jvm/item04/ApplicationClassLoaderDemo.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用程序加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationClassLoaderDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 自定义类对象</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">personClassLoader</span> <span class="operator">=</span> Person.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;personClassLoader = &quot;</span> + personClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三方类对象(hutool)</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">validatorClassLoader</span> <span class="operator">=</span> Validator.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;validatorClassLoader = &quot;</span> + validatorClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">personClassLoader = sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">validatorClassLoader = sun.misc.Launcher$AppClassLoader@18b4aac2</span><br></pre></td></tr></table></figure><h2 id="总结"><span class="post-title-index">7. </span><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403262239129.png" alt="image-20240326223927078"></p><div class="table-container"><table><thead><tr><th>特征</th><th>启动类加载器</th><th>扩展类加载器</th><th>应用程序类加载器</th></tr></thead><tbody><tr><td>加载范围</td><td>Java核心类库</td><td>JRE的扩展类库</td><td>应用程序的类和第三方库</td></tr><tr><td>加载顺序和优先级</td><td>最顶层，最优先级</td><td>第二层，次于启动类加载器</td><td>第三层，次于扩展类加载器</td></tr><tr><td>加载路径</td><td>JDK/lib目录下的核心类库</td><td>JRE/lib/ext目录下的扩展类库</td><td>类路径（classpath）下的类</td></tr><tr><td>实现语言</td><td>C/C++实现</td><td>Java实现</td><td>Java实现</td></tr><tr><td>可替换性</td><td>不可替换</td><td>不可替换</td><td>可以自定义类加载器进行替换</td></tr><tr><td>隔离和管理</td><td>负责加载Java核心类库，与JVM紧密关联</td><td>负责加载JRE的扩展类库</td><td>负责加载应用程序的类</td></tr><tr><td>示例</td><td>java.lang.Object, java.lang.String</td><td>javax.swing.JFrame等</td><td>com.example.MyApplication等</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-类的生命周期</title>
      <link href="/posts/30ee20dd.html"/>
      <url>/posts/30ee20dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节示例代码：<a href="https://github.com/wicksonZhang/Java-Virtual-Machine/tree/main/01-chapter/src/main/java/cn/wickson/jvm/item03">https://github.com/wicksonZhang/Java-Virtual-Machine/tree/main/01-chapter/src/main/java/cn/wickson/jvm/item03</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202403211139100.png" alt="03-类的生命周期"></p><hr><h2 id="JVM-类的生命周期"><span class="post-title-index">2. </span><a href="#JVM-类的生命周期" class="headerlink" title="JVM-类的生命周期"></a>JVM-类的生命周期</h2><p>在 JVM 中类的生命周期主要分为 <strong>加载、连接、初始化、使用和卸载</strong> 这五个部分，这五个部分具体内容如下：</p><ul><li><strong>加载阶段</strong>：主要将类字节码文件加载进 JVM 中。</li><li><strong>连接阶段</strong>：这个部分主要包括验证、准备和解析。</li><li><strong>初始化阶段</strong>：JVM 执行类的初始化代码，这些代码通常包括 静态变量赋值 和 静态代码块。</li><li><strong>使用</strong>：类加载完成并经过初始化后，就可以被应用程序使用。</li><li><strong>卸载</strong>：当类加载器不再需要某个类时，会触发类卸载过程。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202403191548149.png" alt="image-20240319154818102" style="zoom:100%;float:left"></p><hr><h2 id="JVM-类的加载阶段"><span class="post-title-index">3. </span><a href="#JVM-类的加载阶段" class="headerlink" title="JVM-类的加载阶段"></a>JVM-类的加载阶段</h2><p>在类加载阶段主要做的工作是将类的字节码数据加载到 JVM 中，具体内容如下：</p><ul><li><p><strong>查找对应加载类的字节码文件</strong>：类加载器负责根据类的全限定名去文件系统、网络等地方查找对应的字节码文件</p></li><li><p><strong>类加载器加载完成之后，会分配内存空间给字节码文件</strong></p></li><li><p><strong>字节码文件的信息会保存到方法区中</strong>：类加载器加载类后，会将类的元数据信息存储到方法区中，包括类的结构信息、字段信息、方法信息等。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403202214184.png" alt="image-20240320221457096" style="zoom:80%;float:left"></p></li><li><p><strong>JVM 在堆中会创建一个与方法区中的类元数据相对应的 <code>java.lang.Class</code> 对象</strong>：这个类会包含运行时状态、方法的字节码等。这个对象是 Java 反射机制的基础.</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403202217397.png" alt="image-20240320221721340" style="zoom:80%;float:left"></p></li></ul><hr><h2 id="JVM-类的连接阶段"><span class="post-title-index">4. </span><a href="#JVM-类的连接阶段" class="headerlink" title="JVM-类的连接阶段"></a>JVM-类的连接阶段</h2><p>JVM 连接阶段主要分为了三个部分，分别是 验证、准备、解析，具体内容如下：</p><ul><li><strong>验证</strong>：这个阶段主要判断字节码文件是否满足 JVM 规范，例如文件格式验证、元数据验证等等</li><li><strong>准备</strong>：这个阶段主要是给类的静态变量分配内存空间并设置初始值，例如数值类型的默认值为 0 ，引用类型的默认值为 null。</li><li><strong>解析</strong>：这个阶段主要是将符号引用转化为直接引用的过程，例如将类、方法和字段的符号引用转化为内存地址或偏移量。</li></ul><h3 id="验证"><span class="post-title-index">4.1. </span><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证阶段是确保加载的字节码文件符合 JVM 规范的过程：</p><ul><li><p>文件格式校验，是否是以 <strong>0XCAFEBABE</strong> 开头</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282232496.png" alt="image-20240228223233468" style="zoom:100%;float:left"></p></li><li><p>元信息验证，例如所有的类必须有父类</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403202255512.png" alt="image-20240320225510481" style="zoom:100%;float:left"></p></li><li><p>程序指令校验，例如方法内的指令执行到一般强制跳到其他方法中</p></li><li><p>符号引用验证，例如是否访问了其他类的 <strong>private</strong> 方法 </p><blockquote><p>符号引用和直接引用：<a href="https://blog.csdn.net/weixin_42447959/article/details/81675512">https://blog.csdn.net/weixin_42447959/article/details/81675512</a></p></blockquote></li></ul><h3 id="准备"><span class="post-title-index">4.2. </span><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是为类的静态变量分配内存空间并设置初始值的过程，例如每一种数据类型都有对应的默认值。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403202301553.png" alt="image-20240320230101504" style="zoom:70%;float:left"></p><h3 id="解析"><span class="post-title-index">4.3. </span><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是将类的符号引用转化为直接引用的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403202303082.png" alt="image-20240320230345045" style="zoom:100%;float:left"></p><hr><h2 id="JVM-类的初始化阶段"><span class="post-title-index">5. </span><a href="#JVM-类的初始化阶段" class="headerlink" title="JVM-类的初始化阶段"></a>JVM-类的初始化阶段</h2><p>初始化阶段是执行类的<strong>初始化代码（静态变量赋值和静态代码块）</strong>的过程。</p><ul><li>初始化阶段会执行 <strong>静态代码块中的代码</strong>，并<strong>为静态变量赋值</strong>，执行顺序与代码顺序一致。</li></ul><p>如下是代码中通过 <code>jclasslib</code> 编译的一段代码，具体信息如下：</p><ul><li>[0] <init> : 构造方法</init></li><li>[1] main：<code>Main</code> 方法</li><li>[2] <clinit>：初始化阶段执行</clinit></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403202334610.png" alt="image-20240320233452568"></p><div class="table-container"><table><thead><tr><th>字节码位置</th><th>指令</th><th>注释</th></tr></thead><tbody><tr><td>0</td><td>iconst_1</td><td>将 int 型常量值 1 推送至栈顶</td></tr><tr><td>1</td><td>putstatic #2</td><td>将栈顶 int 型数值存入指定类的静态域</td></tr><tr><td>4</td><td>iconst_2</td><td>将 int 型常量值 2 推送至栈顶</td></tr><tr><td>5</td><td>putstatic #2</td><td>将栈顶 int 型数值存入指定类的静态域</td></tr><tr><td>8</td><td>return</td><td>从当前方法返回 void</td></tr></tbody></table></div><h3 id="类的初始化"><span class="post-title-index">5.1. </span><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><p>如下几种方式会导致类的初始化：</p><ol><li>访问一个类的静态变量或者静态方法。</li><li>调用 Class.forName(String className)。</li><li>new 一个该类的对象。</li><li>执行 main() 的当前类</li></ol><p>如下面试题信息，包含了上诉的这种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo02</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo02</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo02</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印的结果信息如下</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DACBCB</span><br></pre></td></tr></table></figure><h3 id="注意事项"><span class="post-title-index">5.2. </span><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在某些特定情况下并不会导致初始化指令的执行，具体内容如下：</p><ol><li>无静态代码块且无静态变量赋值语句。</li><li>有静态变量的声明，但是没有赋值语句。</li><li>静态变量的定义使用 final 关键字，这类变量会在准备阶段直接进行初始化。</li></ol><p>如下面试题信息，包含了上诉的这种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">B02</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;B02.a = &quot;</span> + B02.a); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B02</span> <span class="keyword">extends</span> <span class="title class_">A02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们修改如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// new B02();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;B02.a = &quot;</span> + B02.a); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A02</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B02</span> <span class="keyword">extends</span> <span class="title class_">A02</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无静态变量赋值语句</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="练习题"><span class="post-title-index">6. </span><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>提示内容如下：</p><ul><li>静态变量的定义使用 final 关键字，这类变量会在准备阶段直接进行初始化。</li><li>访问一个类的静态变量或者静态方法会导致类的初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Demo04_A.a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04_A</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init Demo04_A &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-字节码的组成</title>
      <link href="/posts/e84e2393.html"/>
      <url>/posts/e84e2393.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节示例代码：<a href="https://github.com/wicksonZhang/Java-Virtual-Machine/tree/main/01-chapter/src/main/java/cn/wickson/jvm/item01">https://github.com/wicksonZhang/Java-Virtual-Machine/tree/main/01-chapter/src/main/java/cn/wickson/jvm/item01</a></p></blockquote><p>本章节主要讲解的两个核心部分是：字节码的组成、字节码的常见工具 Arthas 的使用。具体内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292335014.png" alt="字节码的组成" style="zoom:100%;float:left"></p><h2 id="如何获取字节码文件"><span class="post-title-index">2. </span><a href="#如何获取字节码文件" class="headerlink" title="如何获取字节码文件"></a>如何获取字节码文件</h2><h3 id="通过-javac-获取"><span class="post-title-index">2.1. </span><a href="#通过-javac-获取" class="headerlink" title="通过 javac 获取"></a>通过 <code>javac</code> 获取</h3><p>例如我们首先将如下 <code>java</code> 代码通过指令 <code>javac</code> 编译成字节码文件，然后再通过 <code>Notepad++</code> 以 16 进制格式打开源文件。</p><ul><li><code>Calculator.java</code> 源文件如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java To Class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        calc.add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Result of addition: &quot;</span> + calc.getResult());</span><br><span class="line"></span><br><span class="line">        calc.subtract(<span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Result of subtraction: &quot;</span> + calc.getResult());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>javac</code> 进行编译 <code>Calculator.java</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\idea-project\Java-Virtual-Machine\01-chapter\src\main\java\cn\wickson\jvm\item01&gt;dir /a /w</span><br><span class="line">...</span><br><span class="line">Calculator.java</span><br><span class="line"></span><br><span class="line">D:\idea-project\Java-Virtual-Machine\01-chapter\src\main\java\cn\wickson\jvm\item01&gt;javac Calculator.java</span><br><span class="line"></span><br><span class="line">D:\idea-project\Java-Virtual-Machine\01-chapter\src\main\java\cn\wickson\jvm\item01&gt;dir /a /w</span><br><span class="line">...</span><br><span class="line">Calculator.class   Calculator.java</span><br></pre></td></tr></table></figure><ul><li>通过 <code>Notepad++</code> 以 16 进制打开 <code>Calculator.class</code> 文件<ul><li>具体操作信息：<a href="https://blog.csdn.net/u010178611/article/details/88900412">如何在notepad++中以16进制显示内容</a></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282232496.png" alt="image-20240228223233468" style="zoom:100%;float:left"></p><h3 id="通过-jclasslib-获取"><span class="post-title-index">2.2. </span><a href="#通过-jclasslib-获取" class="headerlink" title="通过 jclasslib 获取"></a>通过 <code>jclasslib</code> 获取</h3><blockquote><p><code>jclasslib</code>：这个是 <code>Github</code> 上开发的一款查看字节码的插件。</p><p><code>GIthub</code>：<a href="https://github.com/ingokegel/jclasslib">https://github.com/ingokegel/jclasslib</a></p><p><code>Idea</code> 插件：Plugins —&gt; Marketplace —&gt; jclasslib</p></blockquote><ul><li>Windows 本地展示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282241424.png" alt="image-20240228224134386" style="zoom:100%;float:left"></p><ul><li>Idea 插件展示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282250188.png" alt="image-20240228225031165" style="zoom:100%;float:left"></p><h2 id="字节码组成部分"><span class="post-title-index">3. </span><a href="#字节码组成部分" class="headerlink" title="字节码组成部分"></a>字节码组成部分</h2><p>通过上面 <code>jclasslib</code> 的插件信息，我们可以看到字节码信息分为如下 6 个部分：</p><ul><li>基本信息</li><li>常量池</li><li>接口</li><li>字段</li><li>方法</li><li>属性</li></ul><h3 id="基本信息"><span class="post-title-index">3.1. </span><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p><strong>基本信息</strong>：主要包含 魔数、字节码文件对应的 java 版本号、访问标识、父类和接口。</p><ul><li><p><strong>魔数</strong>：字节码文件的头 4 个字节，是一个固定的值：<code>ca fe ba be</code>。</p></li><li><p><strong>主副版本号</strong>：主副版本号指的是编译字节码文件的 <code>JDK</code> 版本号，主要的作用是判断当前字节码的版本和运行时的 JDK 是否兼容。</p><ul><li>如何使用：我们在 <code>主副版本号 - 44</code> 就是当前版本号。</li><li>对应案例：<a href="https://developer.aliyun.com/article/128001">jdk版本冲突Unsupported major.minor version错误定位</a></li></ul></li></ul><h3 id="常量池"><span class="post-title-index">3.2. </span><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p><strong>常量池</strong>：常量池是一组常量的集合，包括字面值常量、符号引用、类和接口名等。</p><h3 id="字段"><span class="post-title-index">3.3. </span><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p><strong>字段表（Field Table）</strong>：描述类的字段，包括字段名称、类型、访问修饰符等。</p><h3 id="方法"><span class="post-title-index">3.4. </span><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>方法表（Method Table）</strong>：描述类的方法，包括方法名称、参数列表、返回类型、访问修饰符等。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282315340.png" alt="image-20240228231520318" style="zoom:100%;float:left"></p><ul><li>对应的 java 代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.result = a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对应字节码信息</li></ul><div class="table-container"><table><thead><tr><th>字节码</th><th>指令</th><th>注释</th></tr></thead><tbody><tr><td>0</td><td>aload_0</td><td>将对象引用（this）加载到操作数栈</td></tr><tr><td>1</td><td>iload_1</td><td>将第一个整数型本地变量加载到操作数栈，<strong>对应 int a</strong></td></tr><tr><td>2</td><td>iload_2</td><td>将第二个整数型本地变量加载到操作数栈，<strong>对应 int b</strong></td></tr><tr><td>3</td><td>iadd</td><td>将操作数栈顶的两个整数相加，并将结果压入操作数栈，<strong>对应 a + b</strong></td></tr><tr><td>4</td><td>putfield #2 <cn wickson jvm item01 calculator.result : i></cn></td><td>将操作数栈顶的整数值存储到Calculator类的result字段中，<strong>对应 this.result =</strong></td></tr><tr><td>7</td><td>return</td><td>返回方法</td></tr></tbody></table></div><h3 id="属性"><span class="post-title-index">3.5. </span><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><strong>属性表（Attribute Table）</strong>：包含了各种附加信息，如代码行号、异常处理器、注解等。</p><h2 id="阿里-Arthas"><span class="post-title-index">4. </span><a href="#阿里-Arthas" class="headerlink" title="阿里 Arthas"></a>阿里 Arthas</h2><blockquote><p>官网地址：<a href="https://arthas.aliyun.com">https://arthas.aliyun.com</a></p></blockquote><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。</p><h3 id="Arthas-安装-amp-启动"><span class="post-title-index">4.1. </span><a href="#Arthas-安装-amp-启动" class="headerlink" title="Arthas 安装&amp;启动"></a>Arthas 安装&amp;启动</h3><blockquote><p>下载地址：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></p></blockquote><ul><li>本次下载的是 <strong>Windows arthas-all-3.7.2</strong> 版本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292255533.png" alt="image-20240229225538435" style="zoom:100%;float:left"></p><ul><li>我们启动我们本次运行的程序 <code>ArthasDemo.java</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292307247.png" alt="image-20240229230745211" style="zoom:100%;float:left"></p><ul><li>启动 Arthas , 可以看到 [6] 就是我们本次启动的程序</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\Software\Arthas&gt;java -jar arthas-boot.jar</span><br><span class="line">[INFO] JAVA_HOME: D:\Software\Java\jre1.8.0_351</span><br><span class="line">[INFO] arthas-boot version: 3.7.2</span><br><span class="line">[INFO] Process 7656 already using port 3658</span><br><span class="line">[INFO] Process 7656 already using port 8563</span><br><span class="line">[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">* [1]: 7656</span><br><span class="line">  [2]: 3440 org.jetbrains.idea.maven.server.RemoteMavenServer36</span><br><span class="line">  [3]: 14692 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">  [4]: 7652 org.jetbrains.idea.maven.server.RemoteMavenServer36</span><br><span class="line">  [5]: 8696</span><br><span class="line">  [6]: 10780 cn.wickson.jvm.item02.ArthasDemo</span><br></pre></td></tr></table></figure><h3 id="Arthas-相关命令"><span class="post-title-index">4.2. </span><a href="#Arthas-相关命令" class="headerlink" title="Arthas 相关命令"></a>Arthas 相关命令</h3><h4 id="查看-DashBoard"><span class="post-title-index">4.2.1. </span><a href="#查看-DashBoard" class="headerlink" title="查看 DashBoard"></a>查看 DashBoard</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们通过如下命令可以看到三块区域信息</span></span><br><span class="line">[arthas@15660]$ dashboard -i 2000 -n 1</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th>NAME</th><th>GROUP</th><th>PRIORITY</th><th>STATE</th><th>CPU%</th><th style="text-align:center">DELTA_TIME</th><th>TIME</th><th>INTERRUPTED</th><th>DAEMON</th></tr></thead><tbody><tr><td style="text-align:center">线程ID</td><td>线程名</td><td>线程组名</td><td>线程优先级</td><td>线程状态</td><td>线程的cpu使用率</td><td style="text-align:center">线程运行增量CPU时间</td><td>总时间</td><td>中断状态</td><td>是否守护线程</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292322216.png" alt="image-20240229232245189" style="zoom:100%;float:left"></p><div class="table-container"><table><thead><tr><th>Memory</th><th>used</th><th>total</th><th>usage</th><th>GC</th></tr></thead><tbody><tr><td>内存区域</td><td>内存使用量</td><td>内存最大值</td><td>内存使用率</td><td>GC</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292323914.png" alt="image-20240229232350893" style="zoom:100%;float:left"></p><p>当前操作系统运行信息</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292325798.png" alt="image-20240229232502766" style="zoom:100%;float:left"></p><h4 id="反编译字节码"><span class="post-title-index">4.2.2. </span><a href="#反编译字节码" class="headerlink" title="反编译字节码"></a>反编译字节码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们可以通过 jad 命令反编译出源码信息</span></span><br><span class="line">[arthas@15660]$ jad cn.wickson.jvm.item02.ArthasDemo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402292327850.png" alt="image-20240229232740814" style="zoom:100%;float:left"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-基础概念</title>
      <link href="/posts/87251719.html"/>
      <url>/posts/87251719.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402272223859.png" alt="JVM 基础概念"></p><h2 id="JVM-解决了什么问题？"><span class="post-title-index">2. </span><a href="#JVM-解决了什么问题？" class="headerlink" title="JVM 解决了什么问题？"></a>JVM 解决了什么问题？</h2><p>JVM（Java Virtual Machine）解决的核心问题之一就是跨平台性，只需要写一份代码即可运行在多个操作系统上。</p><p>如下图所示，首先我们将编写好的 <code>.java</code> 文件通过 <code>javac</code> 编译为 <code>.class</code> 字节码文件，然后通过 <code>JVM</code> 解释为操作系统能够识别的机器码语言。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402272054209.png" alt="image-20240227205401151"></p><hr><h2 id="JVM-是什么？"><span class="post-title-index">3. </span><a href="#JVM-是什么？" class="headerlink" title="JVM 是什么？"></a>JVM 是什么？</h2><p><code>JVM（Java Virtual Machine）</code>：全称为 <code>Java虚拟机</code>，JVM主要的作用就是将 <code>Java</code> 程序编译成的 <code>字节码文件</code> 解释或编译为操作系统能够识别的 <code>机器码指令</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402272109284.png" alt="image-20240227210933236"></p><hr><h2 id="JVM-核心功能"><span class="post-title-index">4. </span><a href="#JVM-核心功能" class="headerlink" title="JVM 核心功能"></a>JVM 核心功能</h2><ol><li><p><strong>字节码执行</strong>：JVM负责解释或编译Java程序编译生成的字节码，并将其转换为本地机器码执行。</p></li><li><p><strong>内存管理</strong>：JVM负责管理Java程序的内存分配和释放。</p><ul><li><strong>C内存管理示例</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用malloc动态分配内存</span></span><br><span class="line">    <span class="type">int</span> *ptr = (<span class="type">int</span> *)malloc(sizeof(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (ptr == NULL) &#123;</span><br><span class="line">        printf(<span class="string">&quot;内存分配失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *ptr = <span class="number">5</span>;</span><br><span class="line">    printf(<span class="string">&quot;指针所指向的值为: %d\n&quot;</span>, *ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    free(ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Java内存管理示例：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryManagementExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Java的自动内存管理机制</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;对象的值为: &quot;</span> + number);</span><br><span class="line">        <span class="comment">// Java的垃圾回收器会自动回收不再使用的对象所占用的内存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>即时编译</strong>：JVM中包含<strong>即时编译器（Just-In-Time Compiler，JIT Compiler）</strong>，它能够将字节码动态编译成本地机器码，以提高程序的执行效率。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402272128171.png" alt="image-20240227212826118"></p></li></ol><hr><h2 id="JVM-的组成"><span class="post-title-index">5. </span><a href="#JVM-的组成" class="headerlink" title="JVM 的组成"></a>JVM 的组成</h2><p>Java虚拟机（JVM）是一个复杂的系统，由多个组件组成，主要包括以下几个部分：</p><ol><li><strong>类加载器子系统（Class Loader Subsystem）</strong>：<ul><li>核心功能：负责加载Class文件，将其转换为JVM内部表示的对象，并加载到内存中。</li><li>组成部分：<strong>启动类加载器（Bootstrap Class Loader）</strong>、<strong>扩展类加载器（Extension Class Loader）</strong>和 <strong>应用程序类加载器（Application Class Loader）</strong></li></ul></li><li><strong>运行时数据区（Runtime Data Area）</strong><ul><li>核心功能：JVM内存管理的主要区域，比如对象的创建和销毁。</li><li>组成部分：<strong>方法区（Method Area）</strong>、<strong>堆（Heap）</strong>、<strong>虚拟机栈（Java Virtual Machine Stacks）</strong>、<strong>本地方法栈（Native Method Stack）</strong></li><li><strong>方法区（Method Area）</strong>：存储类的结构信息、静态变量、常量、方法字节码等数据。</li><li><strong>堆（Heap）</strong>：存储所有对象实例以及数组对象。</li><li><strong>虚拟机栈（Java Virtual Machine Stacks）</strong>：存储线程的方法调用栈、局部变量等信息。</li><li><strong>本地方法栈（Native Method Stack）</strong>：与虚拟机栈类似，但是用于执行本地方法。</li></ul></li><li><strong>执行引擎（Execution Engine）</strong><ul><li>核心功能：负责执行JVM加载的字节码，同时使用即时编译优化性能。</li><li>组成部分：<strong>解释器（Interpreter）</strong>和 <strong>即时编译器（Just-In-Time Compiler，JIT Compiler）</strong>。</li><li><strong>解释器（Interpreter）：</strong>逐条解释字节码并执行。</li><li><strong>即时编译器（Just-In-Time Compiler，JIT Compiler）：</strong>将字节码编译成本地机器码以提高执行效率。</li></ul></li><li><strong>本地方法接口（Native Interface）</strong><ul><li>核心功能：允许Java应用程序调用本地方法（Native Method），即使用C或C++等编程语言编写的方法。</li></ul></li></ol><p>具体 JVM 组成如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402282113106.png" alt="image-20240228211308931"></p><hr><h2 id="JDK、JRE、JVM-有什么区别"><span class="post-title-index">6. </span><a href="#JDK、JRE、JVM-有什么区别" class="headerlink" title="JDK、JRE、JVM 有什么区别"></a>JDK、JRE、JVM 有什么区别</h2><p><strong>JDK（Java Development Kit）</strong></p><ul><li><code>JDK</code> 包含了完整的 <code>Java</code> 运行环境（<code>JRE</code>）</li><li><code>JDK</code> 是 <code>Java</code> 开发工具包，提供了用于开发 <code>Java</code> 应用程序的工具和资源，包括编译器（<code>javac</code>）、运行时库（<code>Java</code>标准库）、调试器（<code>jdb</code>）、文档生成工具（<code>javadoc</code>）等。</li></ul><p><strong>JRE（Java Runtime Environment）</strong></p><ul><li><code>JRE</code> 是 <code>Java</code> 运行时环境，包含了 <code>Java</code> 程序运行所需的核心类库、<code>Java</code> 虚拟机（<code>JVM</code>）和其他运行时所需的支持文件。</li></ul><p><strong>JVM（Java Virtual Machine）</strong></p><ul><li><code>JVM</code> 是 <code>Java</code> 虚拟机，是 <code>Java</code> 程序的运行环境，负责解释和执行 <code>Java</code> 程序编译生成的字节码。</li><li><code>JVM</code> 提供了内存管理、线程管理、安全检查、即时编译等功能，使得 <code>Java</code> 程序能够在不同的操作系统和硬件平台上运行，实现了 <code>Java</code> 的跨平台性。</li></ul><p><code>JDK</code> 包含了 <code>JRE</code> 以及用于开发 <code>Java</code> 应用程序的工具，而JRE包含了 <code>JVM</code> 以及运行 <code>Java</code> 程序所需的核心类库。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402272151189.png" alt="jdl, jre, jvm" style="zoom:70%;float:left"></p><h2 id="参考博文"><span class="post-title-index">7. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://www.bilibili.com/video/BV1r94y1b7eS/?spm_id_from=333.337.search-card.all.click">黑马程序员 JVM 虚拟机入门到实战</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-Trie</title>
      <link href="/posts/3339c948.html"/>
      <url>/posts/3339c948.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/14-Trie">https://github.com/wicksonZhang/data-structure/tree/main/14-Trie</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403192150761.png" alt="Trie" style="zoom:100%;float:left"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Trie-解决了什么问题？"><span class="post-title-index">2.1. </span><a href="#Trie-解决了什么问题？" class="headerlink" title="Trie 解决了什么问题？"></a>Trie 解决了什么问题？</h3><p>Trie：<strong>主要解决了字符串的检索和前缀匹配问题</strong>，可以在 O(m) 的时间复杂度内检索具有特定前缀的字符串集合，其中 m 是要搜索的字符串的长度。</p><p>例如，我们可以借助 Trie 数据结构来实现自动补全、拼写检查等等。如下我们在 Google 浏览器中输入 <code>eng</code> 下面则会出现对应的单词进行补全。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402210915124.png" alt="image-20240221091557071" style="zoom:100%;float:left"></p><h3 id="Trie-是什么？"><span class="post-title-index">2.2. </span><a href="#Trie-是什么？" class="headerlink" title="Trie 是什么？"></a>Trie 是什么？</h3><p>Trie（也称为 前缀树 或 字典树 ）是一种树形数据结构，用于有效地存储和检索字符串数据集中的键值。</p><p>例如，我们需要存储 <code>cat</code>、<code>dog</code>、<code>doggy</code>、<code>does</code>、<code>cast</code>、<code>add</code> 这六个单词，使用 Tire 存储的数据格式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402210923984.png" alt="image-20240221092328944" style="zoom:80%;float:left;"></p><h3 id="Trie-优缺点"><span class="post-title-index">2.3. </span><a href="#Trie-优缺点" class="headerlink" title="Trie 优缺点"></a>Trie 优缺点</h3><p><strong>优点</strong></p><ol><li><strong>高效的前缀匹配</strong>：Trie 具有高效的前缀匹配能力，可以在 O(m) 的时间复杂度内检索具有特定前缀的字符串集合，其中 m 是要搜索的字符串的长度。</li></ol><p><strong>缺点</strong></p><ol><li><strong>空间复杂度高</strong>：Trie 数据结构会大量的占用内存，造成空间的浪费。</li><li><strong>不适合存储大字符集</strong>：当字符集很大时，比如 Unicode 字符集，Trie 的存储和遍历操作可能会变得复杂和低效。</li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trie</span>&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空 Trie</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回键对应的值</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(String key)</span> &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 是否包含给定的键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String key)</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否以给定前缀开头</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">starsWith</span><span class="params">(String prefix)</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加指定的键值对</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String key, V value)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除指定元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String key)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="成员变量初始化"><span class="post-title-index">4.1. </span><a href="#成员变量初始化" class="headerlink" title="成员变量初始化"></a>成员变量初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trie 数据结构实现，用于存储字符串键和对应的值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; 值的类型参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-02-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trie</span>&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根节点信息</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;V&gt; root;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Node-节点初始化"><span class="post-title-index">4.2. </span><a href="#Node-节点初始化" class="headerlink" title="Node 节点初始化"></a>Node 节点初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trie 节点类，用于表示 Trie 树中的每个节点。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; 值的类型参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父节点</span></span><br><span class="line">    Node&lt;V&gt; parentNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子节点信息，用于存储当前节点的子节点，键为字符，值为对应的子节点</span></span><br><span class="line">    HashMap&lt;Character, Node&lt;V&gt;&gt; childNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点对应的字符</span></span><br><span class="line">    Character character;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点对应的值</span></span><br><span class="line">    V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记当前节点是否为单词的结束节点</span></span><br><span class="line">    <span class="type">boolean</span> isEndOfWord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node&lt;V&gt; parentNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parentNode = parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素数量"><span class="post-title-index">4.3. </span><a href="#元素数量" class="headerlink" title="元素数量"></a>元素数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 Trie 中存储的键值对数量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Trie 中存储的键值对数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否为空"><span class="post-title-index">4.4. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查 Trie 是否为空。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果 Trie 不包含任何键值对，则返回 true，否则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空-Trie"><span class="post-title-index">4.5. </span><a href="#清空-Trie" class="headerlink" title="清空 Trie"></a>清空 Trie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空 Trie，移除所有的键值对。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否包含给定的键"><span class="post-title-index">4.6. </span><a href="#是否包含给定的键" class="headerlink" title="是否包含给定的键"></a>是否包含给定的键</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查 Trie 是否包含给定的键。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 要检查的键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果 Trie 包含指定的键，则返回 true，否则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    Node&lt;V&gt; node = node(key);</span><br><span class="line">    <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.isEndOfWord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否以给定前缀开头"><span class="post-title-index">4.7. </span><a href="#是否以给定前缀开头" class="headerlink" title="是否以给定前缀开头"></a>是否以给定前缀开头</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查 Trie 是否包含以给定前缀开头的任何键。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 要检查的前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果 Trie 包含以指定前缀开头的任何键，则返回 true，否则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node(prefix) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加指定的键值对"><span class="post-title-index">4.8. </span><a href="#添加指定的键值对" class="headerlink" title="添加指定的键值对"></a>添加指定的键值对</h3><p>我们添加 <code>cat</code>、<code>dog</code>、<code>doggy</code>、<code>does</code>、<code>cast</code>、<code>add</code> 这六个单词，具体示例图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402211649811.gif" alt="image" style="zoom:100%;float:left"></p><p><strong>实现思路</strong></p><ol><li>Step-1：如果是第一次添加，则需要将根节点进行初始化；</li><li>Step-2：遍历具体的 key ，并创建对应节点，将节点元素添加到根结点中；</li><li>Step-3：如果 Key 已经存在，如果存在则将旧值进行返回；</li><li>Step-4：如果 Key 不存在，则对节点重新赋值；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向 Trie 中添加指定的键值对。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key   要添加的键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 要添加的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String key, V value)</span> &#123;</span><br><span class="line">    checkKey(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-1: 如果是第一次新增根节点为空, 则创建根节点 */</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-2: 遍历节点 */</span></span><br><span class="line">    Node&lt;V&gt; node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> key.charAt(i);</span><br><span class="line">        Node&lt;V&gt; childNode = node.childNode == <span class="literal">null</span> ? <span class="literal">null</span> : node.childNode.get(ch);</span><br><span class="line">        <span class="keyword">if</span> (childNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            childNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(node);</span><br><span class="line">            childNode.character = ch;</span><br><span class="line">            node.childNode = node.childNode == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() : node.childNode;</span><br><span class="line">            node.childNode.put(ch, childNode);</span><br><span class="line">        &#125;</span><br><span class="line">        node = childNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-3: 如果 Key 已经存在，则返回旧值 */</span></span><br><span class="line">    <span class="keyword">if</span> (node.isEndOfWord) &#123;</span><br><span class="line">        node.value = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-4: 如果 Key 不存在，则重新赋值 */</span></span><br><span class="line">    node.value = value;</span><br><span class="line">    node.isEndOfWord = <span class="literal">true</span>;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除指定元素"><span class="post-title-index">4.9. </span><a href="#移除指定元素" class="headerlink" title="移除指定元素"></a>移除指定元素</h3><p>移除指定元素，我们分为如下几种情况：</p><ol><li><p>找不到对应的 Key 或者 对应的 key 不是单词的结尾</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402211727716.gif" alt="image" style="zoom:100%;float:left"></p></li><li><p>对应的 Key 存在子节点，例如我们删除 <code>dog</code></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402211733331.gif" alt="image" style="zoom:100%;float:left"></p></li><li><p>对应的 Key 不存在子节点 并且 对应的 Key 中存在好几个 Key，例如我们删除 <code>add</code>、<code>doggy</code></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402211748708.gif" alt="image" style="zoom:100%;float:left"></p></li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从 Trie 中移除指定的键及其关联的值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 要移除的键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果键存在，则返回原值，否则返回 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">/* Step-1: 找到最后一个字符 */</span></span><br><span class="line">    Node&lt;V&gt; node = node(key);</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span> || !node.isEndOfWord) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-2: 如果存在子节点 */</span></span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> node.value;</span><br><span class="line">    <span class="keyword">if</span> (node.childNode != <span class="literal">null</span> &amp;&amp; !node.childNode.isEmpty()) &#123;</span><br><span class="line">        node.isEndOfWord = <span class="literal">false</span>;</span><br><span class="line">        node.value = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-3: 如果不存在子节点 */</span></span><br><span class="line">    <span class="comment">// 找到最后一个节点的父级节点</span></span><br><span class="line">    Node&lt;V&gt; parentNode;</span><br><span class="line">    <span class="keyword">while</span> ((parentNode = node.parentNode) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 找到父级节点删除对应的子节点</span></span><br><span class="line">        parentNode.childNode.remove(node.character);</span><br><span class="line">        <span class="comment">// add、doggy</span></span><br><span class="line">        <span class="keyword">if</span> (parentNode.isEndOfWord || !parentNode.childNode.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = parentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">4.10. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrieTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        Trie&lt;Integer&gt; trie = <span class="keyword">new</span> <span class="title class_">Trie</span>&lt;&gt;();</span><br><span class="line">        trie.add(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        trie.add(<span class="string">&quot;banana&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, trie.get(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        Assertions.assertEquals(<span class="number">10</span>, trie.get(<span class="string">&quot;banana&quot;</span>));</span><br><span class="line">        Assertions.assertNull(trie.get(<span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContains</span><span class="params">()</span> &#123;</span><br><span class="line">        Trie&lt;Integer&gt; trie = <span class="keyword">new</span> <span class="title class_">Trie</span>&lt;&gt;();</span><br><span class="line">        trie.add(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        trie.add(<span class="string">&quot;banana&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertTrue(trie.contains(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        Assertions.assertTrue(trie.contains(<span class="string">&quot;banana&quot;</span>));</span><br><span class="line">        Assertions.assertFalse(trie.contains(<span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        Trie&lt;Integer&gt; trie = <span class="keyword">new</span> <span class="title class_">Trie</span>&lt;&gt;();</span><br><span class="line">        trie.add(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        trie.add(<span class="string">&quot;banana&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, trie.remove(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        Assertions.assertFalse(trie.contains(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        Assertions.assertNull(trie.get(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        Assertions.assertEquals(<span class="number">10</span>, trie.get(<span class="string">&quot;banana&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSizeAndClear</span><span class="params">()</span> &#123;</span><br><span class="line">        Trie&lt;Integer&gt; trie = <span class="keyword">new</span> <span class="title class_">Trie</span>&lt;&gt;();</span><br><span class="line">        trie.add(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        trie.add(<span class="string">&quot;banana&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, trie.size());</span><br><span class="line">        Assertions.assertFalse(trie.isEmpty());</span><br><span class="line"></span><br><span class="line">        trie.clear();</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, trie.size());</span><br><span class="line">        Assertions.assertTrue(trie.isEmpty());</span><br><span class="line">        Assertions.assertNull(trie.get(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        Assertions.assertNull(trie.get(<span class="string">&quot;banana&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStartsWith</span><span class="params">()</span> &#123;</span><br><span class="line">        Trie&lt;Integer&gt; trie = <span class="keyword">new</span> <span class="title class_">Trie</span>&lt;&gt;();</span><br><span class="line">        trie.add(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        trie.add(<span class="string">&quot;banana&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertTrue(trie.startsWith(<span class="string">&quot;app&quot;</span>));</span><br><span class="line">        Assertions.assertTrue(trie.startsWith(<span class="string">&quot;ban&quot;</span>));</span><br><span class="line">        Assertions.assertFalse(trie.startsWith(<span class="string">&quot;ora&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><span class="post-title-index">5. </span><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>总体来说 Trie 这个数据结构实现还是比较容易，主要的难点还是在添加和删除节点元素。</li><li>Trie 这个数据结构总体来说还是典型的使用空间来换取时间，整体的时间复杂度和对应 Key 的长度有关系。</li></ul><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-哈夫曼树</title>
      <link href="/posts/6a0a85c1.html"/>
      <url>/posts/6a0a85c1.html</url>
      
        <content type="html"><![CDATA[<h2 id="哈夫曼树主要解决了什么问题？"><span class="post-title-index">1. </span><a href="#哈夫曼树主要解决了什么问题？" class="headerlink" title="哈夫曼树主要解决了什么问题？"></a>哈夫曼树主要解决了什么问题？</h2><p>哈夫曼树（Huffman Tree）：<strong>主要解决了数据压缩中的编码问题</strong>。在数据传输和存储中，经常需要对数据进行压缩以减少所需的存储空间或传输带宽。</p><p>例如，我们需要将字符串【ABBBCCCCCCCCDDDDDDEE】转为二进制编码进行传输，需要进行如下操作：</p><ul><li>首先，将字母转为 ASCII 编码，也就是 A-65、B-66、C-67 等等。</li><li>然后，我们再将对应的 ASCII 编码转为二进制，也就是 A-65-1000001、B-66-1000010 等等。</li><li>最后，将所有的字符串进行上述操作，得出的二进制字符串的长度为 160 位。</li></ul><p>如果像上诉这个操作一定会导致我们出现大量的二进制位，占用大量的存储空间。这时我们就可以通过 哈夫曼编码 就可以解决这个问题了。</p><hr><h2 id="哈夫曼树是什么？"><span class="post-title-index">2. </span><a href="#哈夫曼树是什么？" class="headerlink" title="哈夫曼树是什么？"></a>哈夫曼树是什么？</h2><p>哈夫曼树（Huffman Tree）是一种特殊的二叉树，用于构建哈夫曼编码，主要用于数据压缩中。</p><ul><li>如果我们需要构建 “this is an example of a huffman tree” 使用哈夫曼树可能就是像下图展示这样。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402061608354.png" alt="Huffman_tree" style="float:left;zoom:60%;"></p><hr><h2 id="如何构建一颗哈夫曼树"><span class="post-title-index">3. </span><a href="#如何构建一颗哈夫曼树" class="headerlink" title="如何构建一颗哈夫曼树"></a>如何构建一颗哈夫曼树</h2><blockquote><p>我们以开头的字符串 【<code>ABBBCCCCCCCCDDDDDDEE</code>】为例。</p></blockquote><p><strong>实现步骤</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Step-1：计算出每个字符出现的权值（权重，就是出现的次数）</span><br><span class="line">Step-2：以权值作为根节点构建 n 棵二叉树，组成森林</span><br><span class="line">Step-3：在森林中选出 2 个根节点最小的树合并，作为一棵新树的左右子树，且新树的根节点为其左右子树根节点之和</span><br><span class="line">Step-4：从森林中删除刚才选取的 2 棵树，并将新树加入森林</span><br><span class="line">Step-5：重复 3、4 步骤，直到森林只剩一棵树为止，该树即为哈夫曼树</span><br></pre></td></tr></table></figure><p><strong>计算出每个字符出现的权值（权重，就是出现的次数）</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">2</td></tr></tbody></table></div><p><strong>以权值作为根节点构建 n 棵二叉树，组成森林</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402061617726.png" alt="image-20240206161706695" style="zoom:80%;float:left"></p><p><strong>在森林中选出 2 个根节点最小的树合并，作为一棵新树的左右子树，且新树的根节点为其左右子树根节点之和</strong></p><ul><li>首先，作为权重最小的两个根节点是 A、E ，作为左右子节点，根节点就是左右子节点的和。再从森林中删除 A、E 节点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402061621121.png" alt="image-20240206161905233" style="zoom:80%;float:left"></p><ul><li>接着，作为权重最小的根节点就是 B，作为左子节点，根节点就是 （A、E 根节点） + （B 节点）的和。再从森林中删除 B 节点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402061631250.png" alt="image-20240206163105122" style="zoom:80%;float:left"></p><ul><li>重复上诉操作</li></ul><p><strong>重复 3、4 步骤，直到森林只剩一棵树为止，该树即为哈夫曼树</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn@master/images/202402061638938.png" alt="image-20240206163708901" style="zoom:80%;float:left"></p><hr><h2 id="如何计算哈夫曼编码"><span class="post-title-index">4. </span><a href="#如何计算哈夫曼编码" class="headerlink" title="如何计算哈夫曼编码"></a>如何计算哈夫曼编码</h2><p>通过上面构建的哈夫曼树，我们已 左子节点 作为 left（0），右子节点 作为 right（1），可以得出如下对应的哈夫曼编码。</p><ul><li>例如，A从根节点从右到左分别是12、6、3、A，即 1110</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">1110</td><td style="text-align:center">110</td><td style="text-align:center">0</td><td style="text-align:center">10</td><td style="text-align:center">1111</td></tr></tbody></table></div><p>【ABBBCCCCCCCCDDDDDDEE】哈夫曼编码每个字符对应的结果是：1110 110 110 110 0 0 0 0 0 0 0 0 10 10 10 10 10 10 1111</p><hr><h2 id="总结"><span class="post-title-index">5. </span><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>n 个权值构建出来的哈夫曼树拥有 n 个叶子节点。</li><li>每个哈夫曼编码都不是另一个哈夫曼编码的前缀。</li><li>哈夫曼树是带权路径长度最短的树，权值较大的节点离根节点较近。</li><li>带权路径长度：树中所有的叶子节点的权值乘上其到根节点的路径长度与最终的哈夫曼编码总长度成正比关系。</li></ol><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-优先级队列</title>
      <link href="/posts/49c77736.html"/>
      <url>/posts/49c77736.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/13-PriorityQueue">https://github.com/wicksonZhang/data-structure/tree/main/13-PriorityQueue</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403192159210.png" alt="优先级队列" style="zoom:100%;float:left"></p><hr><h2 id="优先级队列是什么"><span class="post-title-index">2. </span><a href="#优先级队列是什么" class="headerlink" title="优先级队列是什么?"></a>优先级队列是什么?</h2><p>优先级队列: 优先级队列也是队列的一种, 但是优先级队列 <strong>没有遵循普通队列的 FIFO(先进先出)</strong> 原则, 而是按照 <strong>优先级高低</strong> 进行出队.</p><ul><li>例如, 下图中的元素 44 虽然在队尾, 但是可以让元素 44 第一个出来.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402061415238.png" alt="image-20240206141415049" style="zoom:100%;float:left;"></p><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><ul><li>优先级队列的接口还是和队列的接口保持一致.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先级队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-02-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(E element)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">deQueue</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列的头元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="成员初始化"><span class="post-title-index">4.1. </span><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h3><ul><li>我们由于队列需要具备可比较性并且需要每次出队时需要将最大元素出队, 所以采用 <strong>二叉堆</strong> 实现优先级队列.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先级队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangZiHeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024-02-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BinaryHeap&lt;E&gt; binaryHeap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(Comparator&lt;E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.binaryHeap = <span class="keyword">new</span> <span class="title class_">BinaryHeap</span>&lt;&gt;(comparator);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素的数量"><span class="post-title-index">4.2. </span><a href="#元素的数量" class="headerlink" title="元素的数量"></a>元素的数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 元素的数量</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> binaryHeap.size();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="是否为空"><span class="post-title-index">4.3. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 是否为空</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> binaryHeap.isEmpty();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="清空元素"><span class="post-title-index">4.4. </span><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 清空元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">       binaryHeap.clear();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="入队"><span class="post-title-index">4.5. </span><a href="#入队" class="headerlink" title="入队"></a>入队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    binaryHeap.add(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队"><span class="post-title-index">4.6. </span><a href="#出队" class="headerlink" title="出队"></a>出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">deQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> binaryHeap.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取队列的头元素"><span class="post-title-index">4.7. </span><a href="#获取队列的头元素" class="headerlink" title="获取队列的头元素"></a>获取队列的头元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列的头元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> binaryHeap.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">4.8. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>我们创建一个对象 Person 比较字段的大小</p><ul><li>Person.java 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> boneBreak;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> boneBreak)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.boneBreak = boneBreak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, boneBreak=&quot;</span> + boneBreak +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.boneBreak - person.boneBreak;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        queue.enQueue(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span> , <span class="number">1</span>));</span><br><span class="line">        queue.enQueue(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span> , <span class="number">2</span>));</span><br><span class="line">        queue.enQueue(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;rose&quot;</span> , <span class="number">3</span>));</span><br><span class="line">        queue.enQueue(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tim&quot;</span> , <span class="number">4</span>));</span><br><span class="line">        queue.enQueue(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jerry&quot;</span> , <span class="number">5</span>));</span><br><span class="line">        queue.enQueue(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jim&quot;</span> , <span class="number">6</span>));</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            System.out.println(queue.deQueue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&#x27;Jim&#x27;, boneBreak=6&#125;</span><br><span class="line">Person&#123;name=&#x27;jerry&#x27;, boneBreak=5&#125;</span><br><span class="line">Person&#123;name=&#x27;tim&#x27;, boneBreak=4&#125;</span><br><span class="line">Person&#123;name=&#x27;rose&#x27;, boneBreak=3&#125;</span><br><span class="line">Person&#123;name=&#x27;tom&#x27;, boneBreak=2&#125;</span><br><span class="line">Person&#123;name=&#x27;jack&#x27;, boneBreak=1&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-二叉堆</title>
      <link href="/posts/7228a904.html"/>
      <url>/posts/7228a904.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/12-BinaryHeap">https://github.com/wicksonZhang/data-structure/tree/main/12-BinaryHeap</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403192059514.png" alt="二叉堆" style="zoom:100%;float:left"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="二叉堆解决了什么问题"><span class="post-title-index">2.1. </span><a href="#二叉堆解决了什么问题" class="headerlink" title="二叉堆解决了什么问题"></a>二叉堆解决了什么问题</h3><p>二叉堆解决的主要问题是在一个动态集合中找到最大或最小元素，并且支持快速的插入和删除操作。</p><ul><li>找到最大或最小元素的时间复杂度：O(1) </li><li>删除和插入的时间复杂度：O(logn)</li></ul><h3 id="二叉堆是什么"><span class="post-title-index">2.2. </span><a href="#二叉堆是什么" class="headerlink" title="二叉堆是什么"></a>二叉堆是什么</h3><p><strong>二叉堆（Binary Heap）：</strong>二叉堆是一种特殊的二叉树数据结构，二叉堆的核心概念如下：</p><ol><li><strong>堆（heap）：</strong>任意节点 i 的值总是 <strong>大于等于（&gt;=） 或者 小于等于（&lt;=） 子节点</strong> 的值。</li><li><strong>最大堆（Max Heap）：</strong> 对于任意节点 i 的值如果 <strong>大于等于（&gt;=） 子节点</strong> 的值。</li><li><strong>最小堆（Min Heap）：</strong>对于任意节点 i 的值如果 <strong>小于等于（&lt;=）子节点</strong> 的值。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401312144073.png" alt="image-20240131214432923"></p><h3 id="二叉堆的性质"><span class="post-title-index">2.3. </span><a href="#二叉堆的性质" class="headerlink" title="二叉堆的性质"></a>二叉堆的性质</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401312153351.png" alt="image-20240131215306300" style="zoom:80%;float:left"></p><p>二叉堆的本质上是一颗完全二叉树，所以二叉堆的索引 i 具备以下性质：</p><ol><li><strong>注意，以下的 i 代表的是索引，n 代表的是元素数量</strong>。</li><li>如果 <strong>i = 0</strong>，它是根节点。<ul><li>例如，节点 72.</li></ul></li><li><p>如果 <strong>i &gt; 0</strong>，它的父节点的索引为 <strong>floor((i - 1) / 2)</strong>。</p><ul><li>例如，节点 43、38 的父节点都是 68。 <strong>floor((3 - 1) / 2) = 1</strong></li></ul></li><li><p>如果 <strong>2i + 1 &lt;= n - 1</strong>，它的左子节点的索引为 <strong>2i + 1</strong>。</p><ul><li>例如，节点 68 的左子节点 43。<strong>2 * 1 + 1 = 3</strong></li></ul></li><li><p>如果 <strong>2i + 1 &gt; n - 1</strong>，它无左子节点。</p><ul><li>例如，节点 47 无左子节点。<strong>2 * 5 + 1 &gt; 10 -1</strong></li></ul></li><li><p>如果 <strong>2i + 2 &lt;= n - 1</strong>，它的右子节点的索引为 <strong>2i + 2</strong>。</p><ul><li>例如，节点 68 的右子节点就是 38。<strong>2 * 1 + 2 = 4</strong></li></ul></li><li><p>如果 <strong>2i + 2 &gt; n - 1</strong>，它无右子节点。</p><ul><li>例如，节点47。<strong>2 * 5 + 2 &gt; 10 - 1</strong></li></ul></li></ol><h3 id="二叉堆优缺点"><span class="post-title-index">2.4. </span><a href="#二叉堆优缺点" class="headerlink" title="二叉堆优缺点"></a>二叉堆优缺点</h3><p><strong>优点</strong></p><ol><li><strong>高效的插入和删除操作：</strong> 二叉堆对于插入和删除操作的时间复杂度都是 O(log n)，其中 n 是堆中元素的数量。</li><li><strong>高效的查找最大值或最小值：</strong>如果是最大堆或者是最小堆，根节点就是最大值或者最小值，时间复杂度为O(1)。</li></ol><p><strong>缺点</strong></p><ol><li><strong>不支持动态大小：</strong>因为二叉堆一般底层可以采用数组实现，所以是不具备动态扩容的。</li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403192036258.png" alt="image-20240319203637199" style="zoom:80%;float:left"></p><ul><li>如下是堆 <strong>Heap</strong> 的接口设计</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Heap</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素的数量</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取堆顶元素</span></span><br><span class="line">    E <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除堆顶元素</span></span><br><span class="line">    E <span class="title function_">remove</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换元素</span></span><br><span class="line">    E <span class="title function_">replace</span><span class="params">(E e)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="初始化元素"><span class="post-title-index">4.1. </span><a href="#初始化元素" class="headerlink" title="初始化元素"></a>初始化元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉堆</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryHeap</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Heap</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组元素</span></span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认初始容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二叉堆是具有可比较性的</span></span><br><span class="line">    <span class="keyword">private</span> Comparator&lt;E&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryHeap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryHeap</span><span class="params">(Comparator&lt;E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">        <span class="built_in">this</span>.elements = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二叉堆一定是具有可比较性的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element1 元素1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element2 元素2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(E element1, E element2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparator.compare(element1, element2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((Comparable&lt;E&gt;) element1).compareTo(element2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取堆顶元素"><span class="post-title-index">4.2. </span><a href="#获取堆顶元素" class="headerlink" title="获取堆顶元素"></a>获取堆顶元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    emptyCheck();</span><br><span class="line">    <span class="keyword">return</span> elements[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">emptyCheck</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Heap is empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><span class="post-title-index">4.3. </span><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p><strong>实现思路</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 我们需要将元素添加在数组的最后一个元素。</span><br><span class="line">2. Step-2: 我们通过判断添加的元素是否比父节点大，如果比父节点大就交换位置。</span><br><span class="line">3. Step-3: 一致持续这个操作，最后如果没有父级节点就推出循环。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402012015100.png" alt="image-20240201201527954"></p><p><strong>实现代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    elementCheck(element);</span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">    elements[size++] = element;</span><br><span class="line">    <span class="comment">// 上滤</span></span><br><span class="line">    siftUp(size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity 容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity - elements.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> capacity + (capacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        E[] newElement = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElement[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftUp</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到需要上滤的元素</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> elements[index];</span><br><span class="line">    <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取父级元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">parentIndex</span> <span class="operator">=</span> index - <span class="number">1</span> &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="type">E</span> <span class="variable">parentElement</span> <span class="operator">=</span> elements[parentIndex];</span><br><span class="line">        <span class="comment">// 比较元素</span></span><br><span class="line">        <span class="keyword">if</span> (compare(parentElement, element) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里和之前思路有点不同，我们直接找到需要替换元素的索引，直接将我们需要的值替换</span></span><br><span class="line">        elements[index] = parentElement;</span><br><span class="line">        index = parentIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    elements[index] = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">elementCheck</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Element is not null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><span class="post-title-index">4.4. </span><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>实现思路</strong></p><ul><li>这个不能使用常规思维进行解决，如果直接删除堆顶元素。那么所有的元素需要向前移动，时间复杂度又变为了 O(n) 。</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Step-1: 将堆顶元素与数组最后一个元素进行交换位置，然后将最后一个元素删除。</span><br><span class="line">2. Step-2: 再将新的堆顶元素与子节点进行比较。</span><br><span class="line">3. Step-3: 如果比子节点小，则将最大子节点的元素进行交换。</span><br><span class="line">4. Step-4: 如果比子节点大，或者没有子节点，则退出循环。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202402012116357.png" alt="image-20240201211657259"></p><p><strong>实现代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    emptyCheck();</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> --size;</span><br><span class="line">    <span class="type">E</span> <span class="variable">root</span> <span class="operator">=</span> elements[<span class="number">0</span>];</span><br><span class="line">    elements[<span class="number">0</span>] = elements[lastIndex];</span><br><span class="line">    elements[lastIndex] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    siftDown(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> elements[index];</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 第一个叶子节点的索引 == 非叶子节点的数量</span></span><br><span class="line">    <span class="comment">// index &lt; 第一个叶子节点的索引</span></span><br><span class="line">    <span class="comment">// 必须保证index位置是非叶子节点</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; half) &#123;</span><br><span class="line">        <span class="comment">// index的节点有2种情况</span></span><br><span class="line">        <span class="comment">// 1.只有左子节点</span></span><br><span class="line">        <span class="comment">// 2.同时有左右子节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认为左子节点跟它进行比较</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">childIndex</span> <span class="operator">=</span> (index &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">E</span> <span class="variable">child</span> <span class="operator">=</span> elements[childIndex];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右子节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> childIndex + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选出左右子节点最大的那个</span></span><br><span class="line">        <span class="keyword">if</span> (rightIndex &lt; size &amp;&amp; compare(elements[rightIndex], child) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            child = elements[childIndex = rightIndex];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (compare(element, child) &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将子节点存放到index位置</span></span><br><span class="line">        elements[index] = child;</span><br><span class="line">        <span class="comment">// 重新设置index</span></span><br><span class="line">        index = childIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    elements[index] = element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除堆顶元素同时插入一个新的元素"><span class="post-title-index">4.5. </span><a href="#删除堆顶元素同时插入一个新的元素" class="headerlink" title="删除堆顶元素同时插入一个新的元素"></a>删除堆顶元素同时插入一个新的元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除堆顶元素同时插入一个新的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">replace</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    elementCheck(element);</span><br><span class="line">    <span class="type">E</span> <span class="variable">root</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        elements[<span class="number">0</span>] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root = elements[<span class="number">0</span>];</span><br><span class="line">        elements[<span class="number">0</span>] = element;</span><br><span class="line">        siftDown(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-哈希表</title>
      <link href="/posts/9eefdb50.html"/>
      <url>/posts/9eefdb50.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/11-Hash">https://github.com/wicksonZhang/data-structure/tree/main/11-Hash</a></p></blockquote><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="哈希表解决了什么问题？"><span class="post-title-index">2.1. </span><a href="#哈希表解决了什么问题？" class="headerlink" title="哈希表解决了什么问题？"></a>哈希表解决了什么问题？</h3><p>哈希表主要解决了在大规模数据集中快速查找元素的问题，哈希表通过映射可以将查询的时间复杂度维持在 O(1) 级别。</p><p>假设我们有一个存储学生信息的系统，每个学生都有一个唯一的学生ID。我们希望能够快速地通过学生ID检索到对应的学生信息，而不需要遍历整个数据集来查找。哈希表通过一个哈希函数将每个学生ID映射到数组的特定位置，这个位置就是该学生信息在数组中的存储位置。这样，我们就可以通过学生ID快速地定位到对应的数组位置，而不需要遍历整个数组。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401222037741.png" alt="image-20240122203736651" style="zoom:60%;float:left"></p><h3 id="哈希表是什么？"><span class="post-title-index">2.2. </span><a href="#哈希表是什么？" class="headerlink" title="哈希表是什么？"></a>哈希表是什么？</h3><p>哈希表（<code>Hash Table</code>）是一种数据结构，用于实现键值对之间的映射关系。它通过将键（key）通过哈希函数映射到一个特定的索引位置，然后在该位置存储相应的值（value）。这使得在搜索、插入和删除操作中能够快速地定位和访问数据，这也使得了哈希表是以空间来换取时间。</p><p>哈希表的关键特点如下：</p><ul><li><strong>哈希函数：</strong>将键映射到索引的函数。良好设计的哈希函数能够最小化碰撞（collision）的概率，即不同的键映射到相同的索引位置的情况。</li><li><strong>碰撞处理：</strong> 当两个不同的键映射到相同的索引位置时，需要一种方法来处理碰撞。常见的方法有<strong>链地址法</strong>和<strong>开放寻址法</strong>。</li><li><strong>数组（桶）：</strong> 存储实际数据的位置。每个索引位置通常称为一个桶，可能存储一个或多个键值对，以处理碰撞。</li></ul><h3 id="哈希表优缺点"><span class="post-title-index">2.3. </span><a href="#哈希表优缺点" class="headerlink" title="哈希表优缺点"></a>哈希表优缺点</h3><p><strong>优点</strong></p><ol><li><strong>快速的查找、插入和删除操作：</strong> 在平均情况下，哈希表的这些操作的时间复杂度为 O(1)，即常数时间。</li><li><strong>灵活的数据存储：</strong> 可以存储任意类型的数据作为值，而键可以是几乎任何数据类型。</li></ol><p><strong>缺点</strong></p><ol><li><strong>碰撞可能导致性能下降：</strong> 如果两个不同的键映射到相同的索引位置，就会发生碰撞。</li><li><strong>空间复杂度可能较高：</strong> 在某些情况下，为了避免碰撞，可能需要分配更多的空间，导致空间复杂度相对较高。</li><li><strong>不适用于有序数据：</strong> 哈希表不保持键值对的顺序，因此对于需要有序访问的情况，可能不是最佳选择。</li></ol><hr><h2 id="哈希函数"><span class="post-title-index">3. </span><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><ul><li><p>哈希函数：将键映射到索引的函数，最后哈希函数返回的是一个索引值。</p><ul><li><p>首先，通过 key 生成哈希值。<code>hashCode(key)</code></p></li><li><p>然后，通过哈希值跟数组的大小进行计算。</p></li><li><p>最后，得出相关的索引值。</p></li></ul></li></ul><ul><li><p>如下是 <code>hash</code> 函数的计算公式</p><ul><li>计算方式一：<code>hashCode(key) % table.length;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hashCode(key) % table.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>计算方式二(推荐方式)</strong>：<code>hashCode(key) &amp; (table.length - 1);</code></li><li>注意：数组的长度设计为 2 的幂（2^n）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hashCode(key) &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><div class="table-container"><table><thead><tr><th>方式</th><th>哈希值</th><th style="text-align:center">计算方式</th><th>数组长度</th><th>索引值</th></tr></thead><tbody><tr><td>计算方式一</td><td>十进制：202</td><td style="text-align:center">%</td><td>十进制：16</td><td>十进制：10</td></tr><tr><td>计算方式二</td><td>二进制：11001010</td><td style="text-align:center">&amp;</td><td>二进制：1111</td><td>二进制：1010</td></tr></tbody></table></div><ul><li>总结：良好的哈希值能够最小化碰撞（collision）的概率，减少哈希碰撞的次数，提升哈希性能。</li></ul><hr><h2 id="哈希值的计算"><span class="post-title-index">4. </span><a href="#哈希值的计算" class="headerlink" title="哈希值的计算"></a>哈希值的计算</h2><p><strong>注意：</strong> <strong>哈希值一定是一个整数</strong>，最后的索引值才会是整数。</p><p>哈希值的类型可以分为很多种，例如 整数类型、浮点类型、字符串类型 等等。根据不同的类型会产生不同的哈希值，在下面会分别进行讨论：</p><h3 id="整数类型（int、long）"><span class="post-title-index">4.1. </span><a href="#整数类型（int、long）" class="headerlink" title="整数类型（int、long）"></a>整数类型（int、long）</h3><p><strong>int 类型</strong></p><ul><li><strong>整数类型 int 的哈希值就是整型</strong>，具体代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>long 类型</strong></p><ul><li>long 是长整型占 8 个字节 64 位，但是最后返回的哈希值是 int 整型，所以需要将 64 位长整型的值进行一些位运算操作，并将结果截断为32位整型。<ul><li><code>value &gt;&gt;&gt; 32</code>: 这是一个无符号右移操作符，它将<code>value</code>的二进制表示向右移动32位。</li><li><code>value ^ (value &gt;&gt;&gt; 32)</code>: 这是一个按位异或操作符（^），它对两个二进制数进行位级别的异或运算。</li><li><code>(int)(value ^ (value &gt;&gt;&gt; 32))</code>: 最后，将得到的64位值强制类型转换为32位整型。这将导致只保留结果的低32位，丢弃高32位。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(<span class="type">long</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (key ^ (key &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点类型（float、double）"><span class="post-title-index">4.2. </span><a href="#浮点类型（float、double）" class="headerlink" title="浮点类型（float、double）"></a>浮点类型（float、double）</h3><p><strong>float 类型</strong></p><ul><li>浮点类型 float 的不是整型，我们可以得到 float 的二进制数，再将二进制转为对应的十进制，具体代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(<span class="type">float</span> key)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> Float.floatToIntBits(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如下是浮点类型的证明过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByFloat</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">7.2f</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> Float.floatToIntBits(key);</span><br><span class="line">    System.out.println(<span class="string">&quot;code = &quot;</span> + code); <span class="comment">// 1088841318</span></span><br><span class="line">    System.out.println(<span class="string">&quot;code = &quot;</span> + Integer.toBinaryString(code)); <span class="comment">// 1000000111001100110011001100110</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>double 类型</strong></p><ul><li>long 是长整型占 8 个字节 64 位，我们可以将 double 转为 long 类型，然后进行位运算，并将结果截断为32位整型。<ul><li><code>Double.doubleToLongBits(key)</code>: 这个方法将一个双精度浮点数 <code>key</code> 转换为一个长整型 <code>long</code> 的比特表示。</li><li><code>code ^ (code &gt;&gt;&gt; 32)</code>:  这是一个按位异或操作符（^），它将刚刚得到的64位长整型 <code>code</code> 与右移32位后的值进行异或运算。</li><li><code>(int) (code ^ (code &gt;&gt;&gt; 32))</code>: 最后，将得到的64位值强制类型转换为32位整型。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(<span class="type">float</span> key)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">code</span> <span class="operator">=</span> Double.doubleToLongBits(key);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (code ^ (code &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串类型（String）"><span class="post-title-index">4.3. </span><a href="#字符串类型（String）" class="headerlink" title="字符串类型（String）"></a>字符串类型（String）</h3><p>字符串的类型和二进制转十进制的方式有点类似，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">        hashCode = hashCode * <span class="number">31</span> + key.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下是字符串类型的证明过程，字符串的类型和二进制转十进制的方式有点类似。</p><ul><li>例如字符串 <code>Jack</code>，本质上还是由字符组成（字符的本质就是一个 ASCII 数），所以哈希值可以表示为 <code>J * n^3 + a * n^2 + c * n^1 + k * n^0</code></li><li>我们将  <code>J * n^3 + a * n^2 + c * n^1 + k * n^0</code> 简化为 <code>[(j * n + a) * n + c] * n + k</code>，在 <code>JDK</code> 中可以将 n 看出 31 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">        hashCode = hashCode * <span class="number">31</span> + key.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;hashCode = &quot;</span> + hashCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义对象类型"><span class="post-title-index">4.4. </span><a href="#自定义对象类型" class="headerlink" title="自定义对象类型"></a>自定义对象类型</h3><p>对象类型的哈希值计算本质上还是对字段的属性进行计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, <span class="type">float</span> height, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; Float.compare(person.height, height) == <span class="number">0</span> &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> Integer.hashCode(age);</span><br><span class="line">        hashCode = hashCode + Float.hashCode(height);</span><br><span class="line">        hashCode = hashCode + name.hashCode();</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashCode-和-equals"><span class="post-title-index">4.5. </span><a href="#hashCode-和-equals" class="headerlink" title="hashCode() 和 equals()"></a><code>hashCode()</code> 和 <code>equals()</code></h3><p>我们通过如下面 <code>Person</code> 案例来说明，为什么当对象重写了 <code>hashCode()</code> 之后一定要重写 <code>equals()</code>?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(person, person);</span><br><span class="line">    hashMap.put(person1, person1);</span><br><span class="line">    hashMap.put(<span class="string">&quot;object&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    System.out.println(<span class="string">&quot;hashMap.size() = &quot;</span> + hashMap.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题一：如果不重写 <code>Person</code> 对象的 <code>hashCode()</code> 和 <code>equals()</code> 会怎样？</strong></p><ul><li><strong>最后 <code>hashMap.size()</code> 打印的结果为 3</strong></li><li>因为我们将对象作为 key ，而 key 存储的是内存地址，所以得出了 3.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401242337977.png" alt="image-20240124233743895" style="zoom:100%;float:left"></p><p>测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(person, person);</span><br><span class="line">    hashMap.put(person1, person1);</span><br><span class="line">    hashMap.put(<span class="string">&quot;object&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    hashMap.forEach((key, value) -&gt; System.out.println(<span class="string">&quot;key = &quot;</span> + key + <span class="string">&quot;, value = &quot;</span> +value));</span><br><span class="line">    System.out.println(<span class="string">&quot;hashMap.size() = &quot;</span> + hashMap.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key = com.wickson.hash.entity.Person@20322d26, value = com.wickson.hash.entity.Person@20322d26</span></span><br><span class="line"><span class="comment">// key = com.wickson.hash.entity.Person@49993335, value = com.wickson.hash.entity.Person@49993335</span></span><br><span class="line"><span class="comment">// key = object, value = java.lang.Object@27a5f880</span></span><br><span class="line"><span class="comment">// hashMap.size() = 3</span></span><br></pre></td></tr></table></figure><p><strong>问题二：如果重写 <code>Person</code> 对象的 <code>hashCode()</code> 和 <code>equals()</code> 会怎样？</strong></p><ul><li><strong>最后 <code>hashMap.size()</code> 打印的结果为 2</strong>，因为 <code>person1</code> Key 会把 <code>person</code> 的 Key 覆盖掉。</li><li>首先，调用 <code>person</code> 和 <code>person1</code> 的 <code>key</code> 通过 <code>hashCode()</code> 计算出来的值一定是一致的。</li><li>然后，在调用 <code>person</code> 和 <code>person1</code> 的 <code>equals()</code> 进行比较两个 <code>key</code> 是否一致，最后认定是同一个key。</li><li>最后，如果认定为同一个 <code>key</code> ，所以最后再将 <code>person1</code> 的 <code>value</code> 覆盖掉 <code>person</code> 的 <code>value</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401242344028.png" alt="image-20240124234416004" style="zoom:100%;float:left"></p><ul><li>测试代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(person, person);</span><br><span class="line">    hashMap.put(person1, person1);</span><br><span class="line">    hashMap.put(<span class="string">&quot;object&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    hashMap.forEach((key, value) -&gt; System.out.println(<span class="string">&quot;key = &quot;</span> + key + <span class="string">&quot;, value = &quot;</span> +value));</span><br><span class="line">    System.out.println(<span class="string">&quot;hashMap.size() = &quot;</span> + hashMap.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key = com.wickson.hash.entity.Person@4360c18b, value = com.wickson.hash.entity.Person@4360c18b</span></span><br><span class="line"><span class="comment">// key = object, value = java.lang.Object@396f6598</span></span><br><span class="line"><span class="comment">// hashMap.size() = 2</span></span><br></pre></td></tr></table></figure><p><strong>问题三：如果重写 <code>Person</code> 对象的 <code>hashCode()</code> ，不重写 <code>equals()</code> 会怎样？</strong></p><ul><li><strong>最后 <code>hashMap.size()</code> 打印的结果是 2。</strong></li><li>首先，调用 <code>person</code> 和 <code>person1</code> 的 <code>key</code> 通过 <code>hashCode()</code> 计算出来的值一定是一致的。</li><li>然后，由于 <code>person</code> 和 <code>person1</code> 并未重写 <code>equals()</code> 方法，所以比较的是内存地址.</li><li>最后，通过链表的形式将 <code>person1</code> 追加到 <code>person</code> 后面，所有最后的 <code>hashMap.size()</code> 是 3.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401252102038.png" alt="image-20240125210213947" style="zoom:100%;float:left"></p><ul><li>测试代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(person, person);</span><br><span class="line">    hashMap.put(person1, person1);</span><br><span class="line">    hashMap.put(<span class="string">&quot;object&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    hashMap.forEach((key, value) -&gt; System.out.println(<span class="string">&quot;key = &quot;</span> + key + <span class="string">&quot;, value = &quot;</span> +value));</span><br><span class="line">    System.out.println(<span class="string">&quot;hashMap.size() = &quot;</span> + hashMap.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key = com.wickson.hash.entity.Person@4360c18b, value = com.wickson.hash.entity.Person@4360c18b</span></span><br><span class="line"><span class="comment">// key = com.wickson.hash.entity.Person@4360c18b, value = com.wickson.hash.entity.Person@4360c18b</span></span><br><span class="line"><span class="comment">// key = object, value = java.lang.Object@396f6598</span></span><br></pre></td></tr></table></figure><p><strong>问题四：如果重写 <code>Person</code> 对象的 <code>equals()</code>  ，不重写 <code>hashCode()</code> 会怎样？</strong></p><ul><li><p><strong>最后 <code>hashMap.size()</code> 打印的结果有可能是 2 或者 3。</strong></p></li><li><p>当 <code>hashMap.size()</code> <strong>结果为 3</strong> 时，具体分析情况如下：</p><ul><li>由于没有重写 <code>hashCode()</code> ，通过 <code>hashCode()</code> 计算出来的索引值是不一致的，属于正常情况，情况如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401242337977.png" alt="image-20240124233743895" style="zoom:100%;float:left"></p></li><li><p>当 <code>hashMap.size()</code> <strong>结果为 2</strong> 时，具体分析情况如下：</p><ul><li>首先，由于没有重写 <code>hashCode()</code> ，所以采用内存地址作为 <code>key</code> 。</li><li>然后，当把 <code>key</code> 作为内存地址进行比较时，如果最后得出的索引值是一致的就会产生碰撞。</li><li>最后，碰撞之后就会比较 <code>equlas()</code> ，但最后结果是一致的就会将上一个 <code>key</code> 的 <code>value</code> 进行覆盖。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401242344028.png" alt="image-20240124234416004" style="zoom:100%;float:left"></p><ul><li>测试代码如下，我们创建了 <code>100W</code> 个对象，但最后的结果少了 233。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeByObject</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="number">175.1f</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        hashMap.put(person, person);</span><br><span class="line">    &#125;</span><br><span class="line">    hashMap.forEach((key, value) -&gt; System.out.println(<span class="string">&quot;key = &quot;</span> + key + <span class="string">&quot;, value = &quot;</span> +value));</span><br><span class="line">    System.out.println(<span class="string">&quot;hashMap.size() = &quot;</span> + hashMap.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hashMap.size() = 999767</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="哈希碰撞"><span class="post-title-index">5. </span><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h2><p>哈希冲突也被称为哈希碰撞，指的是 2 个不同的 key 经过哈希函数计算出相同的结果。<code>key1 ≠ key2，hash(key1) = hash(key2)</code></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401222117148.png" alt="image-20240122211758112" style="zoom:100%;float:left"></p><p>解决哈希碰撞的方法如下</p><ul><li>开放寻址法：按照一定的规则向其他地址探测，一直到找到空桶。</li><li>在哈希法：设计多个哈希函数。</li><li>链地址发：通过链表将同一 index 的元素串起来。</li></ul><h3 id="链地址法"><span class="post-title-index">5.1. </span><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>链地址法(Separate Chaining)：通过链表将同一index的元素串起来。具体如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401222114103.png" alt="image-20240122211453061" style="zoom:100%;float:left"></p><p>如下是 <code>JDK 1.8</code> 解决哈希冲突的方案</p><ul><li>首先，添加元素是需要判断当前哈希表容量是否大于 64 且 单链表的节点数量是否大于 8。</li><li>然后，如果不满足上诉条件，哈希冲突时则采用单链表进行存储。如果满足上诉条件，则将链表转为红黑树。</li><li>最后，当红黑树节点数量少到一定程度时，又会转为单向链表。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401222246155.png" alt="image-20240122224640122" style="zoom:100%;float:left"></p><hr><h2 id="Map-接口设计"><span class="post-title-index">6. </span><a href="#Map-接口设计" class="headerlink" title="Map 接口设计"></a><code>Map</code> 接口设计</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401292030041.png" alt="image-20240129203018923" style="zoom:100%;float:left"></p><ul><li><code>Map&lt;K, V&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>; <span class="comment">// 元素数量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">// 集合是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>; <span class="comment">// 清除所有元素</span></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">put</span><span class="params">(K key, V value)</span>; <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">get</span><span class="params">(K key)</span>; <span class="comment">// 获取元素</span></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">remove</span><span class="params">(K key)</span>; <span class="comment">// 删除元素</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containKey</span><span class="params">(K key)</span>; <span class="comment">// 是否包含Key</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containValue</span><span class="params">(V value)</span>; <span class="comment">// 是否包含Value</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Visitor&lt;K, V&gt; visitor)</span>; <span class="comment">// 遍历集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Visitor</span>&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> stop;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(K key, V value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="HashMap-具体实现"><span class="post-title-index">7. </span><a href="#HashMap-具体实现" class="headerlink" title="HashMap 具体实现"></a><code>HashMap</code> 具体实现</h2><h3 id="Node节点初始化"><span class="post-title-index">7.1. </span><a href="#Node节点初始化" class="headerlink" title="Node节点初始化"></a>Node节点初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashMap 实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; Key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; Value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储元素大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;K, V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 &lt;&lt; 4 : 00001 ==&gt; 10000 = 16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.table = <span class="keyword">new</span> <span class="title class_">Node</span>[DEFAULT_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点为红色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点为黑色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node&lt;K, V&gt; 节点实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="type">int</span> hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Key</span></span><br><span class="line">        K key;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// value</span></span><br><span class="line">        V value;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> RED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子节点</span></span><br><span class="line">        Node&lt;K, V&gt; leftNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右子节点</span></span><br><span class="line">        Node&lt;K, V&gt; rightNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父级节点</span></span><br><span class="line">        Node&lt;K, V&gt; parentNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value, Node&lt;K, V&gt; parentNode)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.hash = key == <span class="literal">null</span> ? <span class="number">0</span> : key.hashCode();</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.parentNode = parentNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否存在叶子节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftNode == <span class="literal">null</span> &amp;&amp; rightNode == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否该节点的度为2</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTwoChildren</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftNode != <span class="literal">null</span> &amp;&amp; rightNode != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否是左子树</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeftChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parentNode != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span> == parentNode.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否是右子树</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRightChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parentNode != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span> == parentNode.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 兄弟节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Node&lt;K, V&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Node&lt;K, V&gt; <span class="title function_">sibling</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeftChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parentNode.rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isRightChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parentNode.leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素数量"><span class="post-title-index">7.2. </span><a href="#元素数量" class="headerlink" title="元素数量"></a>元素数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否为空"><span class="post-title-index">7.3. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除所有元素"><span class="post-title-index">7.4. </span><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><ul><li>清空元素的本质就是将数组的元素清空</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">        table[i] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><span class="post-title-index">7.5. </span><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取元素"><span class="post-title-index">7.6. </span><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    Node&lt;K, V&gt; node = node(key);</span><br><span class="line">    <span class="keyword">return</span> node != <span class="literal">null</span> ? node.value : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title function_">node</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先，找到节点</span></span><br><span class="line">    Node&lt;K, V&gt; node = table[index(key)];</span><br><span class="line">    <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> key == <span class="literal">null</span> ? <span class="number">0</span> : key.hashCode();</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> compare(key, node.key, h1, node.hash);</span><br><span class="line">        <span class="keyword">if</span> (compare == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = node.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><span class="post-title-index">7.7. </span><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(K key)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> remove(node(key));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> V <span class="title function_">remove</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> node.value;</span><br><span class="line">       <span class="comment">// 删除度为 2 的节点</span></span><br><span class="line">       <span class="keyword">if</span> (node.hasTwoChildren()) &#123;</span><br><span class="line">           <span class="comment">// 找到当前元素的前驱节点</span></span><br><span class="line">           Node&lt;K, V&gt; predecessorNode = successor(node);</span><br><span class="line">           node.key = predecessorNode.key;</span><br><span class="line">           node.value = predecessorNode.value;</span><br><span class="line">           node = predecessorNode;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 删除 node：node节点的度要么是1，要么是0</span></span><br><span class="line">       Node&lt;K, V&gt; removeNode = node.leftNode != <span class="literal">null</span> ? node.leftNode : node.rightNode;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> index(node);</span><br><span class="line">       <span class="comment">// 如果 node 是为删除度为1的节点</span></span><br><span class="line">       <span class="keyword">if</span> (removeNode != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 更换父级节点</span></span><br><span class="line">           removeNode.parentNode = node.parentNode;</span><br><span class="line">           <span class="keyword">if</span> (removeNode.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 当只存在根节点，根节点的度为1的情况</span></span><br><span class="line">               table[index] = removeNode;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node == node.parentNode.leftNode) &#123;</span><br><span class="line">               node.parentNode.leftNode = removeNode;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               node.parentNode.rightNode = removeNode;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 删除之后的处理</span></span><br><span class="line">           afterRemove(removeNode);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 删除叶子节点, 且只有根节点元素</span></span><br><span class="line">           table[index] = <span class="literal">null</span>;</span><br><span class="line">           <span class="comment">// 删除之后的处理</span></span><br><span class="line">           afterRemove(node);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除叶子节点, 有可能当前节点在父级节点的左边，也有可能在父级节点的右边</span></span><br><span class="line">           <span class="keyword">if</span> (node == node.parentNode.leftNode) &#123;</span><br><span class="line">               node.parentNode.leftNode = <span class="literal">null</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               node.parentNode.rightNode = <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 删除之后的处理</span></span><br><span class="line">           afterRemove(node);</span><br><span class="line">       &#125;</span><br><span class="line">       size--;</span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="是否包含-Value"><span class="post-title-index">7.8. </span><a href="#是否包含-Value" class="headerlink" title="是否包含 Value"></a>是否包含 Value</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Node&lt;K, V&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K, V&gt; kvNode : table) &#123;</span><br><span class="line">        <span class="keyword">if</span> (kvNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.offer(kvNode);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Node&lt;K, V&gt; node = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(value, node.value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.leftNode);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.rightNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否包含-Key"><span class="post-title-index">7.9. </span><a href="#是否包含-Key" class="headerlink" title="是否包含 Key"></a>是否包含 Key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node(key) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title function_">node</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先，找到节点</span></span><br><span class="line">    Node&lt;K, V&gt; node = table[index(key)];</span><br><span class="line">    <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> key == <span class="literal">null</span> ? <span class="number">0</span> : key.hashCode();</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> compare(key, node.key, h1, node.hash);</span><br><span class="line">        <span class="keyword">if</span> (compare == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = node.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历集合"><span class="post-title-index">7.10. </span><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Visitor&lt;K, V&gt; visitor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span> || visitor == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Node&lt;K, V&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K, V&gt; kvNode : table) &#123;</span><br><span class="line">        <span class="keyword">if</span> (kvNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.offer(kvNode);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Node&lt;K, V&gt; node = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (visitor.visit(node.key, node.value)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.leftNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.rightNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">8. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-映射</title>
      <link href="/posts/4ac7a052.html"/>
      <url>/posts/4ac7a052.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/10-Map">https://github.com/wicksonZhang/data-structure/tree/main/10-Map</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403182015227.png" alt="映射（map）"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Map-解决了什么问题？"><span class="post-title-index">2.1. </span><a href="#Map-解决了什么问题？" class="headerlink" title="Map 解决了什么问题？"></a>Map 解决了什么问题？</h3><p>例如，我们在全国的行政区划表中，需要通过 行政区划 Code 找到对应的 Name 名称 , 如果使用的是数组进行存储的话，我们需要找到某个元素，可能是从头找到尾，时间复杂度可能为O(n)，这会导致效率会特别低。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401152349766.png" alt="image-20240115234920722" style="zoom:100%;float:left"></p><p>如果使用数组实现代码如下</p><ul><li>如果我们底层采用的数组，最好的情况可能是 O(1)，最坏的情况是 O(n)，平均时间复杂度为 O(n)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用List存储地址信息</span></span><br><span class="line">List&lt;DivisionInfo&gt; divisionInfos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">divisionInfos.add(<span class="keyword">new</span> <span class="title class_">DivisionInfo</span>(<span class="number">110000</span> <span class="string">&quot;北京&quot;</span>));</span><br><span class="line">divisionInfos.add(<span class="keyword">new</span> <span class="title class_">DivisionInfo</span>(<span class="number">120000</span>, <span class="string">&quot;天津&quot;</span>));</span><br><span class="line">divisionInfos.add(<span class="keyword">new</span> <span class="title class_">DivisionInfo</span>(<span class="number">130000</span>, <span class="string">&quot;河北省&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">divisionInfos.forEach(divisionInfo -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">11000</span> == divisionInfo.getNumberCode()) &#123;</span><br><span class="line">        name = divisionInfo.getName();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果使用映射Map实现的代码如下</p><ul><li>如果我们底层采用的红黑树，最好的情况O(logn)，最坏的情况O(logn)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, DivisionInfo&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">110000</span>, <span class="keyword">new</span> <span class="title class_">DivisionInfo</span>(<span class="number">110000</span> <span class="string">&quot;北京&quot;</span>));</span><br><span class="line">map.put(<span class="number">120000</span>, <span class="keyword">new</span> <span class="title class_">DivisionInfo</span>(<span class="number">120000</span>, <span class="string">&quot;天津&quot;</span>));</span><br><span class="line">map.put(<span class="number">130000</span>, <span class="keyword">new</span> <span class="title class_">DivisionInfo</span>(<span class="number">130000</span>, <span class="string">&quot;河北省&quot;</span>));</span><br><span class="line"><span class="comment">// 直接通过Map获取信息</span></span><br><span class="line"><span class="type">DivisionInfo</span> <span class="variable">divisionInfo</span> <span class="operator">=</span> map.get(<span class="number">110000</span>);</span><br></pre></td></tr></table></figure><h3 id="Map-是什么？"><span class="post-title-index">2.2. </span><a href="#Map-是什么？" class="headerlink" title="Map 是什么？"></a>Map 是什么？</h3><p>在数据结构中，映射（Mapping）是一种将键（Key）与值（Value）关联起来的结构，也被称为字典、哈希表或关联数组，具体的实现方式有很多种。</p><h3 id="Map-优缺点"><span class="post-title-index">2.3. </span><a href="#Map-优缺点" class="headerlink" title="Map 优缺点"></a>Map 优缺点</h3><p><strong>优点</strong></p><ol><li><strong>快速查询：</strong> Map提供了通过键直接访问值的机制，因此在查找特定元素时具有很高的效率。在Hash情况下，查找操作的时间复杂度是常量级别（O(1)）。在红黑树的情况下，查找操作的时间复杂度是对数级别（O(logn)）</li><li><strong>唯一性：</strong> Map中的键必须是唯一的，这确保了每个键都对应一个唯一的值。这在需要建立唯一关联关系的场景下非常有用。</li><li><strong>灵活性：</strong> Map适用于各种数据关联问题，可以用于构建字典、缓存、配置表等多种应用。不同实现方式（如哈希表、红黑树）可以满足不同的需求。</li></ol><p><strong>缺点</strong></p><ol><li><strong>哈希冲突：</strong> 在使用哈希表实现的Map中，可能会发生哈希冲突，即不同的键映射到相同的哈希桶。</li><li><strong>顺序不确定：</strong> Map通常不保证元素的顺序，这在一些情况下可能是一个缺点。</li><li><strong>复杂性：</strong> 某些Map的实现（例如红黑树）相对复杂，可能需要更多的计算资源和时间来维护数据结构的平衡性。</li></ol><hr><h2 id="Map-接口设计"><span class="post-title-index">3. </span><a href="#Map-接口设计" class="headerlink" title="Map 接口设计"></a>Map 接口设计</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401180946816.png" alt="image-20240118094653763" style="zoom:100%;float:left"></p><ul><li><code>Map&lt;K,V&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>; <span class="comment">// 元素数量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">// 集合是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>; <span class="comment">// 清除所有元素</span></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">put</span><span class="params">(K key, V value)</span>; <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">get</span><span class="params">(K key)</span>; <span class="comment">// 获取元素</span></span><br><span class="line"></span><br><span class="line">    V <span class="title function_">remove</span><span class="params">(K key)</span>; <span class="comment">// 删除元素</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containKey</span><span class="params">(K key)</span>; <span class="comment">// 是否包含Key</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containValue</span><span class="params">(V value)</span>; <span class="comment">// 是否包含Value</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Visitor&lt;K, V&gt; visitor)</span>; <span class="comment">// 遍历集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Visitor</span>&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> stop;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(K key, V value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Map-代码实现"><span class="post-title-index">4. </span><a href="#Map-代码实现" class="headerlink" title="Map 代码实现"></a>Map 代码实现</h2><h3 id="Node节点初始化"><span class="post-title-index">4.1. </span><a href="#Node节点初始化" class="headerlink" title="Node节点初始化"></a>Node节点初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于红黑树实现映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 节点为红色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点为黑色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node&lt;K, V&gt; 节点实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="comment">// Key</span></span><br><span class="line">        K key;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// value</span></span><br><span class="line">        V value;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> RED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子节点</span></span><br><span class="line">        Node&lt;K, V&gt; leftNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右子节点</span></span><br><span class="line">        Node&lt;K, V&gt; rightNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父级节点</span></span><br><span class="line">        Node&lt;K, V&gt; parentNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value, Node&lt;K, V&gt; parentNode)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.parentNode = parentNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否存在叶子节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftNode == <span class="literal">null</span> &amp;&amp; rightNode == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否该节点的度为2</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTwoChildren</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftNode != <span class="literal">null</span> &amp;&amp; rightNode != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否是左子树</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeftChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parentNode != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span> == parentNode.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否是右子树</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRightChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parentNode != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span> == parentNode.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 兄弟节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Node&lt;K, V&gt; <span class="title function_">sibling</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeftChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parentNode.rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isRightChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parentNode.leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量初始化"><span class="post-title-index">4.2. </span><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Node&lt;K, V&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素数量"><span class="post-title-index">4.3. </span><a href="#元素数量" class="headerlink" title="元素数量"></a>元素数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否为空"><span class="post-title-index">4.4. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除所有元素"><span class="post-title-index">4.5. </span><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><span class="post-title-index">4.6. </span><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>添加元素主要是基于红黑树，所以如下代码会涉及到相关红黑树代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    keyNotNullCheck(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加第一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">// 添加新节点之后进行处理</span></span><br><span class="line">        afterPut(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step2：如果当前节点不是父级节点，那就需要找到父级节点</span></span><br><span class="line">    Node&lt;K, V&gt; node = root;</span><br><span class="line">    Node&lt;K, V&gt; parent = root;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将传递进来的元素与父级节点进行比较</span></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        cmp = compare(key, node.key);</span><br><span class="line">        parent = node;</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.leftNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.key = key;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> node.value;</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step3：我们将需要添加的元素添加在父级节点的那个位置</span></span><br><span class="line">    Node&lt;K, V&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        parent.rightNode = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.leftNode = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">    afterPut(newNode);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map 添加元素之后作的处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">afterPut</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断当前添加的父级节点</span></span><br><span class="line">    Node&lt;K, V&gt; parentNode = node.parentNode;</span><br><span class="line">    <span class="keyword">if</span> (parentNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        black(node);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-1：添加的节点父节点正好是 black */</span></span><br><span class="line">    <span class="keyword">if</span> (isBlack(parentNode)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-2：添加的节点 `uncle` 节点是 `Red` */</span></span><br><span class="line">    <span class="comment">// 叔父节点</span></span><br><span class="line">    Node&lt;K, V&gt; uncle = parentNode.sibling();</span><br><span class="line">    <span class="comment">// 祖父节点</span></span><br><span class="line">    Node&lt;K, V&gt; grandNode = red(parentNode.parentNode);</span><br><span class="line">    <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">        <span class="comment">// 将 parent 节点染成黑色</span></span><br><span class="line">        black(parentNode);</span><br><span class="line">        <span class="comment">// 将 uncle 节点染成黑色</span></span><br><span class="line">        black(uncle);</span><br><span class="line">        <span class="comment">// 将 grand 节点染成红色，向上进行合并，当作新添加的节点进行处理。</span></span><br><span class="line">        afterPut(grandNode);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-3：添加的节点 `uncle` 节点是 `Black` */</span></span><br><span class="line">    <span class="comment">// 判断父级节点是否是左子节点</span></span><br><span class="line">    <span class="keyword">if</span> (parentNode.isLeftChild()) &#123; <span class="comment">// L</span></span><br><span class="line">        <span class="comment">// 判断自己是否是左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.isLeftChild()) &#123; <span class="comment">// LL</span></span><br><span class="line">            <span class="comment">// 将 `parent` 节点染成黑色</span></span><br><span class="line">            black(parentNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// LR</span></span><br><span class="line">            <span class="comment">// 将 `parent` 节点染成黑色</span></span><br><span class="line">            black(node);</span><br><span class="line">            <span class="comment">// 将 `parent` 进行左旋转，将二叉树变为 `LL`</span></span><br><span class="line">            rotateLeft(parentNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 `grand` 节点进行右旋</span></span><br><span class="line">        rotateRight(grandNode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// R</span></span><br><span class="line">        <span class="keyword">if</span> (node.isLeftChild()) &#123; <span class="comment">// RL</span></span><br><span class="line">            <span class="comment">// 将 `node` 节点染成黑色</span></span><br><span class="line">            black(node);</span><br><span class="line">            <span class="comment">// 将 `parent` 进行右旋转，将二叉树变为 `RR`</span></span><br><span class="line">            rotateRight(parentNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// RR</span></span><br><span class="line">            <span class="comment">// 将 `parent` 节点染成黑色</span></span><br><span class="line">            black(parentNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 `grand` 进行左旋转，使二叉树变得平衡</span></span><br><span class="line">        rotateLeft(grandNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取元素"><span class="post-title-index">4.7. </span><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key Key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    Node&lt;K, V&gt; node = node(key);</span><br><span class="line">    <span class="keyword">return</span> node != <span class="literal">null</span> ? node.value : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key Key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;K, V&gt; <span class="title function_">node</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;K, V&gt; node = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> compare(key, node.key);</span><br><span class="line">        <span class="keyword">if</span> (compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compare &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.leftNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><span class="post-title-index">4.8. </span><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> remove(node(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> V <span class="title function_">remove</span><span class="params">(Node&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> node.value;</span><br><span class="line">    <span class="comment">// 删除度为 2 的节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.hasTwoChildren()) &#123;</span><br><span class="line">        <span class="comment">// 找到当前元素的前驱节点</span></span><br><span class="line">        Node&lt;K, V&gt; predecessorNode = predecessor(node);</span><br><span class="line">        node.key = predecessorNode.key;</span><br><span class="line">        node.value = predecessorNode.value;</span><br><span class="line">        node = predecessorNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 node：node节点的度要么是1，要么是0</span></span><br><span class="line">    Node&lt;K, V&gt; removeNode = node.leftNode != <span class="literal">null</span> ? node.leftNode : node.rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 node 是为删除度为1的节点</span></span><br><span class="line">    <span class="keyword">if</span> (removeNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 更换父级节点</span></span><br><span class="line">        removeNode.parentNode = node.parentNode;</span><br><span class="line">        <span class="keyword">if</span> (removeNode.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 当只存在根节点，根节点的度为1的情况</span></span><br><span class="line">            root = removeNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node == node.parentNode.leftNode) &#123;</span><br><span class="line">            node.parentNode.leftNode = removeNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.parentNode.rightNode = removeNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除之后的处理</span></span><br><span class="line">        afterRemove(removeNode);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 删除叶子节点, 且只有根节点元素</span></span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 删除之后的处理</span></span><br><span class="line">        afterRemove(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除叶子节点, 有可能当前节点在父级节点的左边，也有可能在父级节点的右边</span></span><br><span class="line">        <span class="keyword">if</span> (node == node.parentNode.leftNode) &#123;</span><br><span class="line">            node.parentNode.leftNode = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.parentNode.rightNode = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除之后的处理</span></span><br><span class="line">        afterRemove(node);</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否包含-Key"><span class="post-title-index">4.9. </span><a href="#是否包含-Key" class="headerlink" title="是否包含 Key"></a>是否包含 Key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否包含Key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node(key) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否包含Value"><span class="post-title-index">4.10. </span><a href="#是否包含Value" class="headerlink" title="是否包含Value"></a>是否包含Value</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否包含 Value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过队列实现</span></span><br><span class="line">    Queue&lt;Node&lt;K, V&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        Node&lt;K, V&gt; node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(value, node.value)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(node.leftNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(node.rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">4.11. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;Integer, String&gt; treeMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在每个测试方法执行之前初始化 TreeMap</span></span><br><span class="line">        treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        treeMap.put(<span class="number">5</span>, <span class="string">&quot;five&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="number">8</span>, <span class="string">&quot;eight&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="number">4</span>, <span class="string">&quot;four&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSize</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, treeMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertFalse(treeMap.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClear</span><span class="params">()</span> &#123;</span><br><span class="line">        treeMap.clear();</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, treeMap.size());</span><br><span class="line">        Assertions.assertTrue(treeMap.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPut</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 添加新元素</span></span><br><span class="line">        Assertions.assertNull(treeMap.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>));</span><br><span class="line">        Assertions.assertEquals(<span class="number">6</span>, treeMap.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新已存在的元素</span></span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;one&quot;</span>, treeMap.put(<span class="number">1</span>, <span class="string">&quot;newOne&quot;</span>));</span><br><span class="line">        Assertions.assertEquals(<span class="number">6</span>, treeMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;five&quot;</span>, treeMap.get(<span class="number">5</span>));</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;three&quot;</span>, treeMap.get(<span class="number">3</span>));</span><br><span class="line">        Assertions.assertNull(treeMap.get(<span class="number">10</span>)); <span class="comment">// 不存在的键返回 null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;five&quot;</span>, treeMap.remove(<span class="number">5</span>));</span><br><span class="line">        Assertions.assertNull(treeMap.get(<span class="number">5</span>)); <span class="comment">// 已删除的键应返回 null</span></span><br><span class="line">        Assertions.assertEquals(<span class="number">4</span>, treeMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContainKey</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(treeMap.containKey(<span class="number">3</span>));</span><br><span class="line">        Assertions.assertFalse(treeMap.containKey(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContainValue</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(treeMap.containValue(<span class="string">&quot;eight&quot;</span>));</span><br><span class="line">        Assertions.assertFalse(treeMap.containValue(<span class="string">&quot;ten&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Visitor 接口的实现类，用于测试遍历</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">TestVisitor</span> <span class="keyword">extends</span> <span class="title class_">Map</span>.Visitor&lt;Integer, String&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(Integer key, String value)</span> &#123;</span><br><span class="line">                result.append(key).append(<span class="string">&quot;:&quot;</span>).append(value).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 返回 false，以便遍历所有节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TestVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestVisitor</span>();</span><br><span class="line">        treeMap.traversal(visitor);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;2:two 3:three 4:four 5:five 8:eight &quot;</span>, visitor.result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实战练习"><span class="post-title-index">5. </span><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><h3 id="文件打印"><span class="post-title-index">5.1. </span><a href="#文件打印" class="headerlink" title="文件打印"></a>文件打印</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能对比：红黑树和链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparisonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treeMapTest</span><span class="params">()</span> &#123;</span><br><span class="line">        Times.test(<span class="string">&quot;treeMapTest&quot;</span>, () -&gt; common(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(), file()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] file() &#123;</span><br><span class="line">        <span class="type">FileInfo</span> <span class="variable">fileInfo</span> <span class="operator">=</span> Files.read(<span class="string">&quot;D:\\java\\jdk-8\\jdk1.8.0_211\\src\\java\\util&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;java&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件数量：&quot;</span> + fileInfo.getFiles());</span><br><span class="line">        System.out.println(<span class="string">&quot;代码行数：&quot;</span> + fileInfo.getLines());</span><br><span class="line">        String[] words = fileInfo.words();</span><br><span class="line">        System.out.println(<span class="string">&quot;单词数量：&quot;</span> + words.length);</span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">common</span><span class="params">(TreeMap&lt;String, Integer&gt; treeMap, String[] words)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> treeMap.get(word);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">totalCount</span> <span class="operator">=</span> count == <span class="literal">null</span> ? <span class="number">1</span> : count + <span class="number">1</span>;</span><br><span class="line">            treeMap.put(word, totalCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建 Visitor 接口的实现类，用于测试遍历</span></span><br><span class="line">        treeMap.traversal(<span class="keyword">new</span> <span class="title class_">Map</span>.Visitor&lt;String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(String key, Integer value)</span> &#123;</span><br><span class="line">               <span class="comment">// System.out.println(&quot;key = &quot; + key + &quot;, &quot; + &quot;value = &quot; + value);</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            treeMap.containKey(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            treeMap.remove(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果信息</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">【treeMapTest】</span><br><span class="line">开始：20:13:29.446</span><br><span class="line">文件数量：364</span><br><span class="line">代码行数：212580</span><br><span class="line">单词数量：879293</span><br><span class="line">结束：20:13:30.896</span><br><span class="line">耗时：1.45秒</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-集合</title>
      <link href="/posts/e55af03c.html"/>
      <url>/posts/e55af03c.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/9-Set">https://github.com/wicksonZhang/data-structure/tree/main/9-Set</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403172251210.png" alt="集合（List、Set）" style="zoom:100%;float:left"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="集合是什么"><span class="post-title-index">2.1. </span><a href="#集合是什么" class="headerlink" title="集合是什么"></a>集合是什么</h3><p>集合（Set）：是一种抽象的数据结构，<strong>用于存储无序且唯一的元素</strong>。它是由一组不同元素构成的，其中每个元素都是独一无二的，没有重复。</p><h3 id="集合的优缺点"><span class="post-title-index">2.2. </span><a href="#集合的优缺点" class="headerlink" title="集合的优缺点"></a>集合的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>唯一性：</strong>在某种情况下来说，集合中的元素唯一可以确保数据的一致性和准确性。</li><li><strong>无序性：</strong>在集合不需要考虑顺序的情况下，简化了对数据的处理。</li></ol><p><strong>缺点</strong></p><ol><li><strong>无序性可能不适用某些场景：</strong> 在某些情况下，需要按照特定的顺序处理元素，此时集合的无序性可能成为一个缺点。</li><li><strong>不适合频繁的插入和删除操作：</strong> 一些集合实现对于频繁的插入和删除操作可能不够高效，例如，对于数组实现的集合，插入和删除可能需要移动大量元素。</li></ol><h3 id="集合的应用场景"><span class="post-title-index">2.3. </span><a href="#集合的应用场景" class="headerlink" title="集合的应用场景"></a>集合的应用场景</h3><ol><li><strong>元素去重：</strong>这个应该是使用比较多的。例如，一般使用 Set 集合可以对集合进行去重。</li><li><strong>新增统计在线用户数：</strong>如果说要确保在线用户数，我们可以获取对应的 <code>ip</code> 进行统计。</li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><p>链表实现</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401112319095.png" alt="image-20240111231949027" style="zoom:100%;float:left"></p><p>红黑树实现</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401112320266.png" alt="image-20240111232049223" style="zoom:75%;float:left"></p><ul><li><code>Set.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set 集合接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除所有元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E element)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历集合</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Visitor&lt;E&gt; visitor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Visitor.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Visitor</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> stop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(E element)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="链表-代码实现"><span class="post-title-index">4. </span><a href="#链表-代码实现" class="headerlink" title="链表-代码实现"></a>链表-代码实现</h2><h3 id="初始化"><span class="post-title-index">4.1. </span><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>由于是基于链表实现，我们选择通过双向链表进行实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过双向链表实现集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListSet</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;E&gt;();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素数量"><span class="post-title-index">4.2. </span><a href="#元素数量" class="headerlink" title="元素数量"></a>元素数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合是否为空"><span class="post-title-index">4.3. </span><a href="#集合是否为空" class="headerlink" title="集合是否为空"></a>集合是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空元素"><span class="post-title-index">4.4. </span><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    list.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合是否包含某个元素"><span class="post-title-index">4.5. </span><a href="#集合是否包含某个元素" class="headerlink" title="集合是否包含某个元素"></a>集合是否包含某个元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合是否包含某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.contains(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><span class="post-title-index">4.6. </span><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>添加的思路是：如果存在将新值覆盖掉旧值，如果不存在就将元素添加到集合中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;element must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.indexOf(element);</span><br><span class="line">    <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">        list.set(index, element);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><span class="post-title-index">4.7. </span><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;element must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.indexOf(element);</span><br><span class="line">    <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">        list.remove(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历集合"><span class="post-title-index">4.8. </span><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> visitor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Visitor&lt;E&gt; visitor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (visitor == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visitor.visit(list.get(i))) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">4.9. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListSetTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListSet&lt;Integer&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">ListSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSize</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">1</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">3</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="number">2</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.clear();</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(set.isEmpty());</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertFalse(set.isEmpty());</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertTrue(set.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClear</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertFalse(set.isEmpty());</span><br><span class="line"></span><br><span class="line">        set.clear();</span><br><span class="line"></span><br><span class="line">        Assertions.assertTrue(set.isEmpty());</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContains</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">1</span>));</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">2</span>));</span><br><span class="line">        Assertions.assertFalse(set.contains(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, set.size());</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">1</span>));</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.remove(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">1</span>, set.size());</span><br><span class="line">        Assertions.assertFalse(set.contains(<span class="number">1</span>));</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Visitor&lt;Integer&gt; visitor = <span class="keyword">new</span> <span class="title class_">Visitor</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(Integer element)</span> &#123;</span><br><span class="line">                result.append(element).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        set.traversal(visitor);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;1 2 3 &quot;</span>, result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="红黑树-代码实现"><span class="post-title-index">5. </span><a href="#红黑树-代码实现" class="headerlink" title="红黑树-代码实现"></a>红黑树-代码实现</h2><h3 id="初始化-1"><span class="post-title-index">5.1. </span><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><ul><li>由于是基于红黑树实现，我们选择通过红黑树进行实现集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树实现集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedBlackTree&lt;E&gt; tree = <span class="keyword">new</span> <span class="title class_">RedBlackTree</span>&lt;E&gt;();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素数量-1"><span class="post-title-index">5.2. </span><a href="#元素数量-1" class="headerlink" title="元素数量"></a>元素数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tree.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合是否为空-1"><span class="post-title-index">5.3. </span><a href="#集合是否为空-1" class="headerlink" title="集合是否为空"></a>集合是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tree.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空元素-1"><span class="post-title-index">5.4. </span><a href="#清空元素-1" class="headerlink" title="清空元素"></a>清空元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    tree.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合是否包含某个元素-1"><span class="post-title-index">5.5. </span><a href="#集合是否包含某个元素-1" class="headerlink" title="集合是否包含某个元素"></a>集合是否包含某个元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合是否包含某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tree.contains(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素-1"><span class="post-title-index">5.6. </span><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>添加的思路是：如果存在将新值覆盖掉旧值，如果不存在就将元素添加到集合中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    tree.add(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素-1"><span class="post-title-index">5.7. </span><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    tree.remove(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历集合-1"><span class="post-title-index">5.8. </span><a href="#遍历集合-1" class="headerlink" title="遍历集合"></a>遍历集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> visitor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(Visitor&lt;E&gt; visitor)</span> &#123;</span><br><span class="line">    tree.inorderTraversal(<span class="keyword">new</span> <span class="title class_">Visitor</span>&lt;E&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(E element)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> visitor.visit(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><span class="post-title-index">5.9. </span><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListSetTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeSet&lt;Integer&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSize</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">1</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">3</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="number">2</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, set.size());</span><br><span class="line"></span><br><span class="line">        set.clear();</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(set.isEmpty());</span><br><span class="line"></span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertFalse(set.isEmpty());</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertTrue(set.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClear</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertFalse(set.isEmpty());</span><br><span class="line"></span><br><span class="line">        set.clear();</span><br><span class="line"></span><br><span class="line">        Assertions.assertTrue(set.isEmpty());</span><br><span class="line">        Assertions.assertEquals(<span class="number">0</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContains</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">1</span>));</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">2</span>));</span><br><span class="line">        Assertions.assertFalse(set.contains(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, set.size());</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">1</span>));</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.remove(<span class="number">1</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">1</span>, set.size());</span><br><span class="line">        Assertions.assertFalse(set.contains(<span class="number">1</span>));</span><br><span class="line">        Assertions.assertTrue(set.contains(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="number">2</span>);</span><br><span class="line">        set.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Visitor&lt;Integer&gt; visitor = <span class="keyword">new</span> <span class="title class_">Visitor</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">visit</span><span class="params">(Integer element)</span> &#123;</span><br><span class="line">                result.append(element).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        set.traversal(visitor);</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;1 2 3 &quot;</span>, result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="性能对比"><span class="post-title-index">6. </span><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><ul><li>需求：我们通过测试读取文件，将文件中的内容进行去重，对比使用链表和红黑树操作集合 添加、查询、删除 所花费的时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能对比：红黑树和链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparisonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] file() &#123;</span><br><span class="line">        <span class="type">FileInfo</span> <span class="variable">fileInfo</span> <span class="operator">=</span> Files.read(<span class="string">&quot;C:\\Users\\wicks\\Desktop\\java-source\\java\\util\\concurrent&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;java&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件数量：&quot;</span> + fileInfo.getFiles());</span><br><span class="line">        System.out.println(<span class="string">&quot;代码行数：&quot;</span> + fileInfo.getLines());</span><br><span class="line">        String[] words = fileInfo.words();</span><br><span class="line">        System.out.println(<span class="string">&quot;单词数量：&quot;</span> + words.length);</span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">common</span><span class="params">(Set&lt;String&gt; set, String[] words)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            set.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            set.contains(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            set.remove(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><span class="post-title-index">6.1. </span><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ListSetTest</span><span class="params">()</span> &#123;</span><br><span class="line">    Times.test(<span class="string">&quot;ListSet&quot;</span>, () -&gt; common(<span class="keyword">new</span> <span class="title class_">ListSet</span>&lt;&gt;(), file()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【ListSet】</span><br><span class="line">开始：<span class="number">00</span>:<span class="number">13</span>:<span class="number">33.876</span></span><br><span class="line">文件数量：<span class="number">88</span></span><br><span class="line">代码行数：<span class="number">62399</span></span><br><span class="line">单词数量：<span class="number">256149</span></span><br><span class="line">结束：<span class="number">00</span>:<span class="number">13</span>:<span class="number">37.393</span></span><br><span class="line">耗时：<span class="number">3.517</span>秒</span><br></pre></td></tr></table></figure><h3 id="红黑树"><span class="post-title-index">6.2. </span><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treeSetTest</span><span class="params">()</span> &#123;</span><br><span class="line">    Times.test(<span class="string">&quot;TreeSet&quot;</span>, () -&gt; common(<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(), file()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【TreeSet】</span><br><span class="line">开始：<span class="number">00</span>:<span class="number">14</span>:<span class="number">36.354</span></span><br><span class="line">文件数量：<span class="number">88</span></span><br><span class="line">代码行数：<span class="number">62399</span></span><br><span class="line">单词数量：<span class="number">256149</span></span><br><span class="line">结束：<span class="number">00</span>:<span class="number">14</span>:<span class="number">36.693</span></span><br><span class="line">耗时：<span class="number">0.338</span>秒</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">7. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-红黑树</title>
      <link href="/posts/e37c4dd3.html"/>
      <url>/posts/e37c4dd3.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节需要用到前面章节：二叉树、平衡二叉树、B树的知识。</p><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/8-RedBlackTree">https://github.com/wicksonZhang/data-structure/tree/main/8-RedBlackTree</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403142200788.png" alt="红黑树"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是红黑树"><span class="post-title-index">2.1. </span><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a>什么是红黑树</h3><p>红黑树是在 <code>AVL</code> 树和 <code>B</code> 树基础上面进行发展而来的，所以红黑树也是一种自平衡的二叉搜索树。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312272046577.png" alt="image-20231227204630559" style="zoom:100%;float:left"></p><h3 id="红黑树优缺点"><span class="post-title-index">2.2. </span><a href="#红黑树优缺点" class="headerlink" title="红黑树优缺点"></a>红黑树优缺点</h3><p><strong>优点</strong></p><ol><li><strong>平衡性：</strong>红黑树是基于二叉查找树（<code>BST</code>）的一种改进和扩展，这也确保了树的高度不会过高。</li><li><strong>高效的插入和删除：</strong>红黑树主要还是基于 <code>AVL</code> 和 <code>B</code> 两种数据结构进行历史演进而来，红黑树解决了 <code>AVL</code> 频繁插入、删除的问题。所以使得插入、删除和搜索等操作的时间复杂度可以保持在对数级别（O(log n)）。</li></ol><p><strong>缺点</strong></p><ol><li><strong>复杂性：</strong>红黑树结合了 <code>B</code> 树和 <code>AVL</code> 树的特性，导致添加和删除时需要涉及到元素的左旋和右旋，这也使得了红黑树的实现和理解稍微复杂一些。</li></ol><h3 id="红黑树解决了什么问题"><span class="post-title-index">2.3. </span><a href="#红黑树解决了什么问题" class="headerlink" title="红黑树解决了什么问题"></a>红黑树解决了什么问题</h3><ol><li><p><strong>红黑树主要解决了二叉查找树可能出现的不平衡性问题</strong>。</p><ul><li>二叉查找树的不平衡可能会导致性能退化，使得搜索、插入和删除等操作的时间复杂度从理想的 <strong>O(log n)</strong> 变为最坏情况下的 <strong>O(n)</strong></li></ul></li><li><p><code>AVL</code> 树也解决了二叉搜索树可能出现的不平衡问题， 红黑树相比于 <code>AVL</code> 树又做了哪些优化呢？</p><ul><li><p>平衡调整的频率</p><ul><li><code>AVL</code> 树在频繁的插入和删除时会导致整棵树进行频繁的调整，这也需要更多的旋转操作，这会导致整棵树的性能下降。</li></ul><ul><li><code>红黑树</code> 红黑树采用通过颜色标记和一系列的平衡规则来确保整棵树的平衡，尤其是涉及到大量的插入和删除操作时尤为明显。</li></ul></li></ul></li></ol><h3 id="生活中对应的场景"><span class="post-title-index">2.4. </span><a href="#生活中对应的场景" class="headerlink" title="生活中对应的场景"></a>生活中对应的场景</h3><ol><li><code>java</code> 中的 <code>HashMap</code> 、<code>TreeMap</code> 集合就采用到了红黑树。</li></ol><hr><h2 id="红黑树的基本特性（重要）"><span class="post-title-index">3. </span><a href="#红黑树的基本特性（重要）" class="headerlink" title="红黑树的基本特性（重要）"></a>红黑树的基本特性（重要）</h2><h3 id="红黑树的性质"><span class="post-title-index">3.1. </span><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312272046577.png" alt="image-20231227204630559" style="zoom:100%;float:left"></p><p><strong>红黑树必须满足以下 5 条性质</strong></p><ol><li>节点是 <strong><code>Red</code></strong> 或者 <strong>Black</strong></li><li>根节点是 <strong>Black</strong></li><li>叶子节点（外部节点、空节点） 都是 <strong>Black</strong></li><li><strong><code>Red</code></strong> 节点的子节点都是 <strong>Black</strong><ol><li><strong><code>Red</code></strong> 节点的 parent 都是 <strong>Black</strong></li><li>根节点到叶子节点的所有路径上不能又 2 个连续的 <strong><code>Red</code></strong> 节点</li></ol></li><li>从任意节点到 叶子节点 的所有路径都包含相同数据的 <strong>Black</strong> 节点</li></ol><h3 id="红黑树的等价交换"><span class="post-title-index">3.2. </span><a href="#红黑树的等价交换" class="headerlink" title="红黑树的等价交换"></a>红黑树的等价交换</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312272207977.png" alt="image-20231227220740921" style="zoom:80%;float:left"></p><p>红黑树 和 4阶B树（2-3-4 树）具有等价性。</p><p><strong>Black</strong> 和 <strong><code>Red</code></strong> 子节点融合在一起可以形成一个B树节点。</p><p>红黑树的 <strong>Black</strong> 节点个数与 4阶B树 的节点总个数相等。</p><hr><h2 id="红黑树的实现"><span class="post-title-index">4. </span><a href="#红黑树的实现" class="headerlink" title="红黑树的实现"></a>红黑树的实现</h2><blockquote><p><a href="https://github.com/wicksonZhang/data-structure/tree/main/8-RedBlackTree">https://github.com/wicksonZhang/data-structure/tree/main/8-RedBlackTree</a></p></blockquote><h3 id="UML-类图"><span class="post-title-index">4.1. </span><a href="#UML-类图" class="headerlink" title="UML 类图"></a><code>UML</code> 类图</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401071951348.png" alt="image-20240107195115320" style="zoom:100%;float:left"></p><h3 id="红黑树添加元素"><span class="post-title-index">4.2. </span><a href="#红黑树添加元素" class="headerlink" title="红黑树添加元素"></a>红黑树添加元素</h3><blockquote><p>在 B 树中，新添加的元素必定会被添加到叶子节点中。</p><p>4阶B树中所有节点的元素个数 x 都满足 1 &lt;= x &lt;= 3。</p></blockquote><p>我们基于如下图的红黑树，如果新增一个新元素有多少种情况？</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312282242709.png" alt="1" style="zoom:80%;float:left"></p><p>一共会有 12 种情况，假设所有添加的情况为x，具体如下：</p><ol><li>节点 17 的左右子节点，即两种情况，x = 2</li><li>节点 33 的左右子节点，即两种情况, x = 4</li><li>节点 46 的左子节点，即1种情况，x = 5</li><li>节点 50 的左右子节点，即两种情况，x = 7</li><li>节点 72 的左右子节点，即两种情况，x = 9</li><li>节点 76 的右子节点，即两种情况，x = 10</li><li>节点 88 的左右子节点，即两种情况，x = 12</li></ol><h3 id="红黑树添加元素存在的问题"><span class="post-title-index">4.3. </span><a href="#红黑树添加元素存在的问题" class="headerlink" title="红黑树添加元素存在的问题"></a>红黑树添加元素存在的问题</h3><ol><li><p>添加新元素中存在什么问题？</p><ul><li><p>虽然我们添加新元素会存在 12 种情况，但是在 <code>红黑树的5条基本特性</code> 中的第四条有如下几条规定，增加了添加的不确定性：</p></li><li><p>第一条：Red 节点的子节点都是 Black</p></li><li><p>第二条：Red 节点的 parent 都是 Black</p></li><li><p>第三条：根节点到叶子节点的所有路径上不能又 2 个连续的 <code>Red</code> 节点</p></li></ul></li><li><p>针对 <code>Red 节点的子节点都是 Black</code> 这种情况，有如下四种添加情况以满足，所以不用进行处理：</p><ul><li><p>节点 46 的左子节点</p></li><li><p>节点 76 的右子节点</p></li><li><p>节点 88 的左右子节点</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312282256906.png" alt="1" style="zoom:80%;float:left"></p></li><li><p>针对 <code>Red 节点的 parent 都是 Black</code> 这种情况，有如下八种添加情况不满足：</p><ul><li>节点 17 的左右子节点</li><li>节点 33 的左右子节点</li><li>节点 50 的左右子节点</li><li>节点 72 的左右子节点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312282258271.png" alt="1" style="zoom:80%;"></p></li></ol><h3 id="修复红黑树添加存在的问题"><span class="post-title-index">4.4. </span><a href="#修复红黑树添加存在的问题" class="headerlink" title="修复红黑树添加存在的问题"></a>修复红黑树添加存在的问题</h3><p>针对上面八种添加存在的问题，我们分为两种情况处理：</p><ul><li>情况一：<code>uncle</code> 节点是 <code>Black</code> 。</li><li>情况二：<code>uncle</code> 节点是 <code>Red</code>。</li></ul><h4 id="uncle-节点是-Black"><span class="post-title-index">4.4.1. </span><a href="#uncle-节点是-Black" class="headerlink" title="uncle 节点是 Black"></a><code>uncle</code> 节点是 <code>Black</code></h4><p>添加节点 <code>uncle</code> 节点是 <code>Black</code> 的有<strong>节点 50 的左右子节点（48，52）</strong>、<strong>节点 72 的左右子节点（60，74）</strong>，针对这四个节点我们采取如下方式处理：</p><ol><li>符合 <code>LL</code> 情况的节点：60</li><li>符合 <code>RR</code> 情况的节点：52</li><li>符合 <code>LR</code> 情况的节点：74</li><li>符合 <code>RL</code> 情况的节点：48</li></ol><h5 id="符合-LL-情况"><span class="post-title-index">4.4.1.1. </span><a href="#符合-LL-情况" class="headerlink" title="符合 LL 情况"></a>符合 <code>LL</code> 情况</h5><p>符合 <code>LL</code> 情况的节点是 <strong>60</strong> ，我们在 <code>AVL</code> 章节中给出的方式是进行右旋转即可。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032121247.png" alt="image-20240103212108203" style="zoom:100%;float:left"></p><p>具体的实现步骤如下：</p><ol><li>首先，将 <code>parent</code> 节点染成黑色。</li><li>然后，将 <code>grand</code> 节点染成红色。</li><li>最后，将 <code>grand</code> 节点进行右旋。</li></ol><h5 id="符合-RR-情况"><span class="post-title-index">4.4.1.2. </span><a href="#符合-RR-情况" class="headerlink" title="符合 RR 情况"></a>符合 <code>RR</code> 情况</h5><p>符合 <code>RR</code> 情况的节点是 <strong>52</strong> ，我们在 <code>AVL</code> 章节中给出的方式是进行左旋转即可。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032131089.png" alt="image-20240103213108063" style="zoom:100%;float:left"></p><p>具体的实现步骤如下：</p><ol><li>首先，将 <code>parent</code> 节点染成黑色。</li><li>然后，将 <code>grand</code> 节点染成红色。</li><li>最后，将 <code>grand</code> 节点进行左旋。</li></ol><h5 id="符合-LR-情况"><span class="post-title-index">4.4.1.3. </span><a href="#符合-LR-情况" class="headerlink" title="符合 LR 情况"></a>符合 <code>LR</code> 情况</h5><p>符合 <code>LR</code> 情况的节点是 <strong>74</strong>，我们在 <code>AVL</code> 章节中给出的方式是先进行左旋转，在进行右旋转。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032136309.png" alt="image-20240103213638282" style="zoom:100%;float:left"></p><p>具体的实现步骤如下：</p><ol><li><p>首先，将 <code>grand</code> 节点染成红色。</p></li><li><p>然后，将 <code>node</code> 节点染成黑色。</p></li><li>其次，将 <code>parent</code> 进行左旋转，将二叉树变为 <code>LL</code>（76 -&gt; 74 -&gt; 72 -&gt; 60）</li><li>最后，将 <code>grand</code> 进行一次右旋转，使二叉树变得平衡（76 &lt;- 74 -&gt; 72 -&gt; 60）</li></ol><h5 id="符合-RL-情况"><span class="post-title-index">4.4.1.4. </span><a href="#符合-RL-情况" class="headerlink" title="符合 RL 情况"></a>符合 <code>RL</code> 情况</h5><p>符合 <code>RL</code> 情况的节点是 <strong>48</strong>，我们在 <code>AVL</code> 章节中给出的方式是先进行右旋转，在进行左旋转。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032148385.png" alt="image-20240103214850350" style="zoom:100%;float:left"></p><p>具体的实现步骤如下：</p><ol><li><p>首先，将 <code>grand</code> 节点染成红色。</p></li><li><p>然后，将 <code>node</code> 节点染成黑色。</p></li><li>其次，将 <code>parent</code> 进行右旋转，将二叉树变为 <code>RR</code>（46 -&gt; 48 -&gt; 50 -&gt; 52）</li><li>最后，将 <code>grand</code> 进行左旋转，使二叉树变得平衡（46 &lt;- 48 -&gt; 50 -&gt; 52）</li></ol><h4 id="uncle-节点是-Red"><span class="post-title-index">4.4.2. </span><a href="#uncle-节点是-Red" class="headerlink" title="uncle 节点是 Red"></a><code>uncle</code> 节点是 <code>Red</code></h4><p>添加节点 <code>uncle</code> 节点是 <code>Red</code> 的有<strong>节点 17 的左右子节点（10，20）</strong>、<strong>节点 33 的左右子节点（30，36）</strong>，针对这四个节点我们采取如下方式处理：</p><ul><li>符合上溢 <code>LL</code> 情况的节点：10</li><li>符合上溢 <code>RR</code> 情况的节点：36</li><li>符合上溢 <code>LR</code> 情况的节点：20</li><li>符合上溢 <code>RL</code> 情况的节点：30</li></ul><h5 id="符合上溢-LL-情况"><span class="post-title-index">4.4.2.1. </span><a href="#符合上溢-LL-情况" class="headerlink" title="符合上溢 LL 情况"></a>符合上溢 <code>LL</code> 情况</h5><p>符合 <code>LL</code> 情况的节点是 <strong>10</strong>。这里需要使用到 B 树的特性，由于该树是 3 阶B树，3阶B树的根节点的子节点的个数为 [ 2, 3 ]，如果超过了就需要进行上溢。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032216717.png" alt="image-20240103221608665" style="zoom:80%;float:left"></p><p>具体的实现步骤如下：</p><ol><li>首先，将 parent 节点染成黑色。</li><li>然后，将 uncle 节点染成黑色。</li><li>其次，将 grand 节点染成红色，向上进行合并，当作新添加的节点进行处理。</li><li>最后，如果向上合并时，还出现上溢，则持续进行上溢到根节点，将根节点染成 Black。</li></ol><h5 id="符合上溢-RR-情况"><span class="post-title-index">4.4.2.2. </span><a href="#符合上溢-RR-情况" class="headerlink" title="符合上溢 RR 情况"></a>符合上溢 <code>RR</code> 情况</h5><p>符合 <code>RR</code> 情况的节点是 <strong>36</strong>。这里需要使用到 B 树的特性，由于该树是 3 阶B树，3阶B树的根节点的子节点的个数为 [ 2, 3 ]，如果超过了就需要进行上溢。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032224776.png" alt="image-20240103222411719" style="zoom:80%;float:left"></p><p>具体的实现步骤如下：</p><ol><li><p>首先，将 parent 节点染成黑色。</p></li><li><p>然后，将 uncle 节点染成黑色。</p></li><li><p>其次，将 grand 节点染成红色，向上进行合并，当作新添加的节点进行处理。</p></li><li>最后，如果向上合并时，还出现上溢，则持续进行上溢到根节点，将根节点染成 Black。</li></ol><h5 id="符合上溢-LR-情况"><span class="post-title-index">4.4.2.3. </span><a href="#符合上溢-LR-情况" class="headerlink" title="符合上溢 LR 情况"></a>符合上溢 <code>LR</code> 情况</h5><p>符合上溢 <code>LR</code> 情况的节点是 <strong>20</strong>。这里需要使用到 B 树的特性，由于该树是 3 阶B树，3阶B树的根节点的子节点的个数为 [ 2, 3 ]，如果超过了就需要进行上溢。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032230952.png" alt="image-20240103223009892" style="zoom:80%;float:left"></p><p>具体的实现步骤如下：</p><ol><li><p>首先，将 parent 节点染成黑色。</p></li><li><p>然后，将 uncle 节点染成黑色。</p></li><li><p>其次，将 grand 节点染成红色，向上进行合并，当作新添加的节点进行处理。</p></li><li>最后，如果向上合并时，还出现上溢，则持续进行上溢到根节点，将根节点染成 Black。</li></ol><h5 id="符合上溢-RL-情况"><span class="post-title-index">4.4.2.4. </span><a href="#符合上溢-RL-情况" class="headerlink" title="符合上溢 RL 情况"></a>符合上溢 <code>RL</code> 情况</h5><p>符合上溢 <code>RL</code> 情况的节点是 <strong>30</strong>。这里需要使用到 B 树的特性，由于该树是 3 阶B树，3阶B树的根节点的子节点的个数为 [ 2, 3 ]，如果超过了就需要进行上溢。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401032233755.png" alt="image-20240103223327696" style="zoom:80%;float:left"></p><p>具体的实现步骤如下：</p><ol><li><p>首先，将 parent 节点染成黑色。</p></li><li><p>然后，将 uncle 节点染成黑色。</p></li><li><p>其次，将 grand 节点染成红色，向上进行合并，当作新添加的节点进行处理。</p></li><li>最后，如果向上合并时，还出现上溢，则持续进行上溢到根节点，将根节点染成 Black。</li></ol><h3 id="红黑树删除元素"><span class="post-title-index">4.5. </span><a href="#红黑树删除元素" class="headerlink" title="红黑树删除元素"></a>红黑树删除元素</h3><blockquote><p>我们删除需要明确的一点是：<strong>在删除中，最后真正被删除的一定是叶子节点</strong></p></blockquote><p>我们上面说过，最后一定删除的是叶子节点。那么上图中就会存在两种情况，叶子节点为红色或者黑色。</p><ol><li><p><strong>叶子节点为红色</strong></p><ul><li>叶子节点为红色的情况不需要进行处理。例如，不管是删除17、33、50、72 都是一样，不会改变红黑树的性质。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072224675.gif" alt="动画" style="zoom:80%;float:left"></p></li><li><p><strong>叶子节点为黑色</strong></p><ul><li>我们删除拥有 2 个 Red 子节点的 Black 节点。例如，我们删除的是 25 这个节点，具体情况如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072212299.gif" alt="动画" style="zoom:100%;float:left"></p><ul><li>我们删除拥有 1 个 Red 子节点的 Black 节点。例如，我们删除的是 46 这个节点，具体情况如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072230714.gif" alt="动画" style="zoom:100%;float:left"></p><ul><li>我们删除叶子节点 Black 节点。例如，我们删除的是 88 这个节点，具体情况如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072237319.gif" alt="动画" style="zoom:100%;float:left"></p></li></ol><h3 id="修复删除存在的问题"><span class="post-title-index">4.6. </span><a href="#修复删除存在的问题" class="headerlink" title="修复删除存在的问题"></a>修复删除存在的问题</h3><h4 id="删除叶子节点为红色"><span class="post-title-index">4.6.1. </span><a href="#删除叶子节点为红色" class="headerlink" title="删除叶子节点为红色"></a>删除叶子节点为红色</h4><p>如果叶子节点为红色，我们是不用进行任何处理的。因为并不会影响我们红黑树的特性</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072212299.gif" alt="动画" style="zoom:100%;float:left"></p><h4 id="删除叶子节点为黑色"><span class="post-title-index">4.6.2. </span><a href="#删除叶子节点为黑色" class="headerlink" title="删除叶子节点为黑色"></a>删除叶子节点为黑色</h4><p>我们将上面示例的图转变为 B 树进行处理，具体如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072217270.png" alt="image-20240107221710215" style="zoom:80%;float:left"></p><h5 id="2-个-Red-子节点的-Black"><span class="post-title-index">4.6.2.1. </span><a href="#2-个-Red-子节点的-Black" class="headerlink" title="2 个 Red 子节点的 Black"></a>2 个 Red 子节点的 Black</h5><p>符合 <code>2 个 Red 子节点的 Black 节点</code> 的节点是 25，我们这对这个情况进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072212299.gif" alt="动画" style="zoom:100%;float:left"></p><p>实现思路：</p><ol><li>Step-1：首先，我们找到被删除节点的前驱节点 17 。</li><li>Step-2：然后，我们将前驱节点 17 覆盖掉节点 25 的值。</li><li>Step-3：其次，删除节点 17。</li><li>Step-4：我们将节点 17 传入给红黑树，但前面已经说过了叶子节点为红色不用处理。</li></ol><h5 id="1-个-Red-子节点的-Black"><span class="post-title-index">4.6.2.2. </span><a href="#1-个-Red-子节点的-Black" class="headerlink" title="1 个 Red 子节点的 Black"></a>1 个 Red 子节点的 Black</h5><p>符合 <code>1 个 Red 子节点的 Black 节点</code> 的节点是 46，我么针对这个情况进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072230714.gif" alt="动画" style="zoom:100%;float:left"></p><p>实现思路：</p><ol><li>Step-1：首先，找到被删除节点 46 的前驱或者后继节点。</li><li>Step-2：然后，更换父级节点。将节点 46 的父级节点指向节点 50。</li><li>Step-3：其次，更换节点位置。将节点 46 的父级节点的右子节点指向节点 50。</li><li>Step-4：最后，我们将节点 50 染成黑色。</li></ol><h5 id="叶子节点-Black"><span class="post-title-index">4.6.2.3. </span><a href="#叶子节点-Black" class="headerlink" title="叶子节点 Black"></a>叶子节点 Black</h5><p><strong>情况一：删除的 Black 的叶子节点 sibling 为 Black，且至少存在红色子节点</strong></p><ul><li><p>符合 <code>叶子节点 Black 节点</code> 的节点是 88，我么针对这个情况进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401072237319.gif" alt="动画" style="zoom:100%;float:left"></p></li></ul><p>实现思路</p><ol><li>Step-1：当叶子节点 Black 被删除时，会导致 B 树进行下溢。</li><li>Step-2：如果 sibling 至少有 1 个 Red 子节点，我们则进行旋转操作。</li><li>Step-3：旋转之后的中心节点继承 <code>parent</code> 的颜色。</li><li>Step-4：旋转之后的左右节点染成 <strong>Black</strong>。</li></ol><p><strong>情况二：删除的 Black 的叶子节点 sibling 为 Black，且不存在红色子节点</strong></p><ul><li><p>符合 <code>叶子节点 Black 节点</code> 的节点是 88，我么针对这个情况进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401082301824.gif" alt="动画" style="zoom:100%;float:left;"></p></li></ul><p>实现思路</p><ol><li>Step-1：判定条件，sibling没有 1 个 Red 子节点</li><li>Step-2：将 sibling 染成 Red、parent 染成 Black 即可修复红黑树性质</li></ol><p><strong>情况三：删除的 Black 的叶子节点 sibling 为 Red</strong></p><ul><li><p>符合 <code>叶子节点 Black 节点</code> 的节点是 88，我么针对这个情况进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401082308967.gif" alt="动画" style="zoom:100%;float:left"></p></li></ul><p>实现思路</p><ol><li><p>Step-1：将 sibling 染成 Black，parent 染成 Red，进行旋转</p></li><li><p>Step-2：于是又回到了 sibling 为 Black 的情况</p></li></ol><h3 id="代码实现"><span class="post-title-index">4.7. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="构造器"><span class="post-title-index">4.7.1. </span><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><blockquote><p>上面已经说过了红黑树是来源于 <code>AVL</code> 树和 <code>B</code> 树，所以我们的代码还是基于二叉树进行开发。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedBlackTree</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">BST</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedBlackTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedBlackTree</span><span class="params">(Comparator&lt;E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(comparator);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 红色节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 黑色节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建红黑树节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent  父级节点信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Node&lt;E&gt; <span class="title function_">createNode</span><span class="params">(E element, Node&lt;E&gt; parent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedBlackNode</span>&lt;&gt;(element, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RedBlackNode</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">RedBlackNode</span><span class="params">(E element, Node&lt;E&gt; parentNode)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(element, parentNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="红黑树的辅助节点"><span class="post-title-index">4.7.2. </span><a href="#红黑树的辅助节点" class="headerlink" title="红黑树的辅助节点"></a>红黑树的辅助节点</h4><blockquote><p>基于上面的构造器的信息，但是我们针对红黑树也有一些定制化的开发。</p></blockquote><p>红黑树的辅助节点代码</p><ul><li>对添加的节点进行染色</li><li>添加红色或者黑色节点</li><li>判断红黑树节点的颜色</li><li>返回当前节点的兄弟节点</li></ul><h5 id="对添加的节点进行染色"><span class="post-title-index">4.7.2.1. </span><a href="#对添加的节点进行染色" class="headerlink" title="对添加的节点进行染色"></a>对添加的节点进行染色</h5><ul><li>我们对添加的节点进行染色时，需要将 <code>BST</code> 的节点强制转换红黑树的节点进行染色。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对添加节点进行染色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node  节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> color 颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">color</span><span class="params">(Node&lt;E&gt; node, <span class="type">boolean</span> color)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ((RedBlackNode&lt;E&gt;) node).color = color;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加红色或者黑色节点"><span class="post-title-index">4.7.2.2. </span><a href="#添加红色或者黑色节点" class="headerlink" title="添加红色或者黑色节点"></a>添加红色或者黑色节点</h5><ul><li>我们基于 <code>对添加的节点进行染色</code> 代码进行扩展，可以添加红色节点或者添加黑色节点。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加红色节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">red</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> color(node, RED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加黑色节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">black</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> color(node, BLACK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判断红黑树节点的颜色"><span class="post-title-index">4.7.2.3. </span><a href="#判断红黑树节点的颜色" class="headerlink" title="判断红黑树节点的颜色"></a>判断红黑树节点的颜色</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断红黑树节点的颜色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">colorOf</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node == <span class="literal">null</span> ? BLACK : ((RedBlackNode&lt;E&gt;) node).color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是红色节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isRed</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> colorOf(node) == RED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是红色节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isBlack</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> colorOf(node) == BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="返回当前节点的兄弟节点"><span class="post-title-index">4.7.2.4. </span><a href="#返回当前节点的兄弟节点" class="headerlink" title="返回当前节点的兄弟节点"></a>返回当前节点的兄弟节点</h5><ul><li>该方法是在 <code>BinaryTree</code> 中 <code>Node&lt;E&gt;</code> 进行添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兄弟节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">sibling</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isLeftChild()) &#123;</span><br><span class="line">        <span class="keyword">return</span> parentNode.rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRightChild()) &#123;</span><br><span class="line">        <span class="keyword">return</span> parentNode.leftNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加"><span class="post-title-index">4.7.3. </span><a href="#添加" class="headerlink" title="添加"></a>添加</h4><blockquote><p>我们只需要按照 <strong>修复添加存在的问题</strong> 中的思路进行实现即可</p></blockquote><ul><li>添加代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterAdd</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断当前添加的父级节点</span></span><br><span class="line">    Node&lt;E&gt; parentNode = node.parentNode;</span><br><span class="line">    <span class="keyword">if</span> (parentNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        black(node);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-1：添加的节点父节点正好是 black */</span></span><br><span class="line">    <span class="keyword">if</span> (isBlack(parentNode)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-2：添加的节点 `uncle` 节点是 `Red` */</span></span><br><span class="line">    <span class="comment">// 叔父节点</span></span><br><span class="line">    Node&lt;E&gt; uncle = parentNode.sibling();</span><br><span class="line">    <span class="comment">// 祖父节点</span></span><br><span class="line">    Node&lt;E&gt; grandNode = parentNode.parentNode;</span><br><span class="line">    <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">        <span class="comment">// 将 parent 节点染成黑色</span></span><br><span class="line">        black(parentNode);</span><br><span class="line">        <span class="comment">// 将 uncle 节点染成黑色</span></span><br><span class="line">        black(uncle);</span><br><span class="line">        <span class="comment">// 将 grand 节点染成红色，向上进行合并，当作新添加的节点进行处理。</span></span><br><span class="line">        afterAdd(red(grandNode));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step-3：添加的节点 `uncle` 节点是 `Black` */</span></span><br><span class="line">    <span class="comment">// 判断父级节点是否是左子节点</span></span><br><span class="line">    <span class="keyword">if</span> (parentNode.isLeftChild()) &#123; <span class="comment">// L</span></span><br><span class="line">        <span class="comment">// 将 `grand` 节点染成红色</span></span><br><span class="line">        red(grandNode);</span><br><span class="line">        <span class="comment">// 判断自己是否是左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.isLeftChild()) &#123; <span class="comment">// LL</span></span><br><span class="line">            <span class="comment">// 将 `parent` 节点染成黑色</span></span><br><span class="line">            black(parentNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// LR</span></span><br><span class="line">            <span class="comment">// 将 `parent` 节点染成黑色</span></span><br><span class="line">            black(node);</span><br><span class="line">            <span class="comment">// 将 `parent` 进行左旋转，将二叉树变为 `LL`</span></span><br><span class="line">            rotateLeft(parentNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 `grand` 节点进行右旋</span></span><br><span class="line">        rotateRight(grandNode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// R</span></span><br><span class="line">        <span class="comment">// 将 `grand` 节点染成红色</span></span><br><span class="line">        red(grandNode);</span><br><span class="line">        <span class="keyword">if</span> (node.isRightChild()) &#123; <span class="comment">// RR</span></span><br><span class="line">            <span class="comment">// 将 `parent` 节点染成黑色</span></span><br><span class="line">            black(parentNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// RL</span></span><br><span class="line">            <span class="comment">// 将 `node` 节点染成黑色</span></span><br><span class="line">            black(node);</span><br><span class="line">            <span class="comment">// 将 `parent` 进行右旋转，将二叉树变为 `RR`</span></span><br><span class="line">            rotateRight(parentNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 `grand` 进行左旋转，使二叉树变得平衡</span></span><br><span class="line">        rotateLeft(grandNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><span class="post-title-index">4.7.4. </span><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>我们只需要按照 <strong>修复删除存在的问题</strong> 中的思路进行实现即可</p></blockquote><ul><li>添加代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterRemove</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">        <span class="comment">/* Step-1：如果叶子节点为红色，不用处理 */</span></span><br><span class="line"><span class="comment">//        if (isRed(node)) return;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-2：1 个 Red 子节点的 Black 节点 */</span></span><br><span class="line">        <span class="keyword">if</span> (isRed(node)) &#123;</span><br><span class="line">            black(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除的节点是根节点</span></span><br><span class="line">        Node&lt;E&gt; parentNode = node.parentNode;</span><br><span class="line">        <span class="keyword">if</span> (parentNode == <span class="literal">null</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Step-3：叶子节点 Black 节点 */</span></span><br><span class="line">        <span class="comment">// leftNode == null =》 leftNode 就是被删除的节点</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leftNode</span> <span class="operator">=</span> parentNode.leftNode == <span class="literal">null</span> || node.isLeftChild();</span><br><span class="line">        Node&lt;E&gt; siblingNode = leftNode ? parentNode.rightNode : parentNode.leftNode;</span><br><span class="line">        <span class="keyword">if</span> (leftNode) &#123; <span class="comment">// 被删除的节点在左边，兄弟节点在右边</span></span><br><span class="line">            <span class="comment">// 兄弟节点是红色</span></span><br><span class="line">            <span class="keyword">if</span> (isRed(siblingNode)) &#123;</span><br><span class="line">                black(siblingNode);</span><br><span class="line">                red(parentNode);</span><br><span class="line">                rotateLeft(parentNode);</span><br><span class="line">                <span class="comment">// 更换兄弟节点</span></span><br><span class="line">                siblingNode = parentNode.rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 兄弟节点必然是黑色</span></span><br><span class="line">            <span class="keyword">if</span> (isBlack(siblingNode.leftNode) &amp;&amp; isRed(siblingNode.rightNode)) &#123;</span><br><span class="line">                <span class="comment">// 兄弟节点没有 1 个红色子节点，父节点要向下跟兄弟节点合并</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">parentBlack</span> <span class="operator">=</span> isBlack(parentNode);</span><br><span class="line">                black(parentNode);</span><br><span class="line">                red(siblingNode);</span><br><span class="line">                <span class="keyword">if</span> (parentBlack) &#123;</span><br><span class="line">                    afterRemove(parentNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 兄弟节点至少有 1 个红色子节点，向兄弟节点借元素</span></span><br><span class="line">                <span class="keyword">if</span> (isBlack(siblingNode.rightNode)) &#123;</span><br><span class="line">                    rotateRight(siblingNode);</span><br><span class="line">                    siblingNode = parentNode.rightNode;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                color(siblingNode, colorOf(parentNode));</span><br><span class="line">                black(siblingNode.rightNode);</span><br><span class="line">                black(parentNode);</span><br><span class="line">                rotateLeft(parentNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 被删除的节点在右边，兄弟节点在左边</span></span><br><span class="line">            <span class="comment">// 兄弟节点是红色</span></span><br><span class="line">            <span class="keyword">if</span> (isRed(siblingNode)) &#123;</span><br><span class="line">                black(siblingNode);</span><br><span class="line">                red(parentNode);</span><br><span class="line">                rotateRight(parentNode);</span><br><span class="line">                <span class="comment">// 更换兄弟节点</span></span><br><span class="line">                siblingNode = parentNode.leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 兄弟节点必然是黑色</span></span><br><span class="line">            <span class="keyword">if</span> (isBlack(siblingNode.leftNode) &amp;&amp; isRed(siblingNode.rightNode)) &#123;</span><br><span class="line">                <span class="comment">// 兄弟节点没有 1 个红色子节点，父节点要向下跟兄弟节点合并</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">parentBlack</span> <span class="operator">=</span> isBlack(parentNode);</span><br><span class="line">                black(parentNode);</span><br><span class="line">                red(siblingNode);</span><br><span class="line">                <span class="keyword">if</span> (parentBlack) &#123;</span><br><span class="line">                    afterRemove(parentNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 兄弟节点至少有 1 个红色子节点，向兄弟节点借元素</span></span><br><span class="line">                <span class="keyword">if</span> (isBlack(siblingNode.leftNode)) &#123;</span><br><span class="line">                    rotateLeft(siblingNode);</span><br><span class="line">                    siblingNode = parentNode.leftNode;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                color(siblingNode, colorOf(parentNode));</span><br><span class="line">                black(siblingNode.leftNode);</span><br><span class="line">                black(parentNode);</span><br><span class="line">                rotateRight(parentNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">4.8. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedBlackTreeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        RedBlackTree&lt;Integer&gt; tree = <span class="keyword">new</span> <span class="title class_">RedBlackTree</span>&lt;&gt;();</span><br><span class="line">        tree.add(<span class="number">10</span>);</span><br><span class="line">        tree.add(<span class="number">5</span>);</span><br><span class="line">        tree.add(<span class="number">15</span>);</span><br><span class="line">        assertEquals(<span class="number">3</span>, tree.size());</span><br><span class="line">        assertTrue(tree.contains(<span class="number">10</span>));</span><br><span class="line">        assertTrue(tree.contains(<span class="number">5</span>));</span><br><span class="line">        assertTrue(tree.contains(<span class="number">15</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        RedBlackTree&lt;Integer&gt; tree = <span class="keyword">new</span> <span class="title class_">RedBlackTree</span>&lt;&gt;();</span><br><span class="line">        tree.add(<span class="number">10</span>);</span><br><span class="line">        tree.add(<span class="number">5</span>);</span><br><span class="line">        tree.add(<span class="number">15</span>);</span><br><span class="line">        tree.remove(<span class="number">5</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, tree.size());</span><br><span class="line">        assertFalse(tree.contains(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="AVL树-、红黑树"><span class="post-title-index">5. </span><a href="#AVL树-、红黑树" class="headerlink" title="AVL树 、红黑树"></a><code>AVL</code>树 、红黑树</h2><ol><li><code>AVL树</code><ul><li>平衡标准比较严格：每个左右子树的高度差不超过1</li><li>最大高度是 <code>1.44 * log2(n+ 2) - 1.328</code> （100 W个节点，<code>AVL</code>树最大树高28）</li><li>搜索、添加、删除都是 <code>O(logn)</code> 复杂度,其中添加仅需 <code>0(1)</code> 次旋转调整、删除最多需要 <code>O(logn)</code> 次旋转调整</li></ul></li><li>红黑树<ul><li>平衡标准比较宽松:没有一条路径会大于其他路径的2倍</li><li>最大高度是 <code>2 * log2(n+ 1)</code> （100 W个节点,红黑树最大树高40）</li><li>搜索、添加、删除都是 <code>O(logn)</code> 复杂度,其中添加、删除都仅需 <code>0(1)</code> 次旋转调整</li></ul></li><li>总结<ul><li>搜索、添加、删除都是 <code>O(logn)</code> 复杂度,其中添加、删除都仅需 <code>0(1)</code> 次旋转调整</li><li>相对于 <code>AVL</code> 树来说，红黑树牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能要优于 <code>AVL</code> 树</li><li>红黑树的平均统计性能优于 <code>AVL</code> 树，实际应用中更多选择使用红黑树</li></ul></li></ol><p>例如，我们插入数据 ：10、35、47、11、5、57、39、14、27、26、84、75、63、41、37、24、96 对比二叉搜索树、AVL树、红黑树的区别</p><p>二叉搜索树</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401102257322.png" alt="image-20240110225736243" style="zoom:80%;float:left"></p><p><code>AVL</code> 树</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401102258680.png" alt="image-20240110225816607" style="zoom:80%;float:left"></p><p>红黑树</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202401102258943.png" alt="image-20240110225853867" style="zoom:80%;float:left"></p><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-B树</title>
      <link href="/posts/1cb98b25.html"/>
      <url>/posts/1cb98b25.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403132223270.png" alt="B树" style="zoom:100%;float:left"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是B树"><span class="post-title-index">2.1. </span><a href="#什么是B树" class="headerlink" title="什么是B树?"></a>什么是B树?</h3><p>B-Tree 是一种自平衡的树形结构，通过二叉搜索树发展而来。</p><ul><li><p>B-Tree 中一个节点中可以存储多个元素，一个 <code>B-Tree</code> 中某个节点存在最多的子节点我们称为几阶 <code>B-Tree</code>。</p></li><li><p>B-Tree 可以分为 <code>3阶B树、4阶B树、5阶B树</code> 等等，具体如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251105313.png" alt="image-20231225110535253" style="zoom:80%;float:left"></p></li></ul><h3 id="B树的优缺点"><span class="post-title-index">2.2. </span><a href="#B树的优缺点" class="headerlink" title="B树的优缺点"></a>B树的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>高效的操作</strong>：B-Tree 在查找、添加、删除时可以将时间复杂度维护在 <code>O(logn)</code> 级别。因为 <code>B-Tree</code> 是基于平衡二叉搜索树，这也就导致了 <code>B-Tree</code> 平衡性和稳定性。</li></ol><p><strong>缺点</strong></p><ol><li><p><strong>空间开销会增大</strong>：由于每个节点中可能会存在多个元素，这就导致需要额外的空间来存储子节点的索引信息。</p></li><li><p><strong>代码复杂度较高：</strong>针对 B树 的实现和维护可能相对复杂，因为在节点添加时会导致节点上溢、合并等操作。</p></li></ol><h3 id="B树解决了什么问题？"><span class="post-title-index">2.3. </span><a href="#B树解决了什么问题？" class="headerlink" title="B树解决了什么问题？"></a>B树解决了什么问题？</h3><ol><li><p>二叉搜索树</p><ul><li>在传统的二叉搜索树中，数据分布在不同的块或页中。这就意味着，在进行插入或查找操作时，频繁的磁盘读取或写入会不可避免地发生。这种I/O操作频繁性会直接影响系统性能，成为系统的瓶颈。</li></ul></li><li><p>B树主要解决了磁盘 <code>I/O</code> 的问题</p><ul><li>B-Tree中由于一个节点中存储了多个元素，使得每个节点中的大小与磁盘块大小相近。这就意味着每次读取或者写入磁盘时，可以高效利用磁盘 <code>I/O</code>。</li><li>B-Tree中保持了平衡二叉树的平衡性，这也会导致二叉树的高度较低，从根节点到叶子节点的路径较短，可以更快的锁定目标数据在磁盘页或块中，减少磁盘的 <code>I/O</code> 操作。</li></ul></li></ol><h3 id="生活中对应的场景"><span class="post-title-index">2.4. </span><a href="#生活中对应的场景" class="headerlink" title="生活中对应的场景"></a>生活中对应的场景</h3><ol><li><p>满足 <code>B-Tree</code> 特性需要保证数据量足够大和频繁的对数据进行操作</p></li><li><p>数据库中就应用到了 <code>B-Tree</code> 的特性</p></li><li>文件系统也应用到了 <code>B-Tree</code> 的特性</li></ol><hr><h2 id="B树的基本特性（重要）"><span class="post-title-index">3. </span><a href="#B树的基本特性（重要）" class="headerlink" title="B树的基本特性（重要）"></a>B树的基本特性（重要）</h2><p>一个元素的子节点元素最大的度，我们称为m阶B树。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251105313.png" alt="image-20231225110535253" style="zoom:80%;float:left"></p><ol><li><strong>如果一个节点中存储的元素为 <code>n</code> ，则有如下规则</strong>：<ul><li>根节点：1 &lt;= n &lt;= m - 1<ul><li>例如：3阶B树的根节点最多为 1 &lt;= n &lt;= 2，即 根节点存储的元素的范围为 [ 1, 2 ]</li><li>例如：4阶B树的根节点最多为 1 &lt;= n &lt;= 3，即 根节点存储的元素的范围为 [ 1, 3 ]</li></ul></li><li>非根节点：[ m/2 ] - 1 &lt;= n &lt;= m - 1。其中 [ m/2 ] 会进行向上取整，例如 [ 3 / 2 ] = 2<ul><li>例如：3阶B树的非根节点最多为 1 &lt;= n &lt;= 2，即 非根节点存储的元素的范围为 [ 1, 2 ]</li><li>例如：4阶B树的非根节点最多为 1 &lt;= n &lt;= 3，即 非根节点存储的元素的范围为 [ 1, 3 ]</li></ul></li></ul></li><li><strong>如果存在子节点，则子节点存在如下规则</strong>：<ul><li>子节点的个数： <code>y = n + 1</code></li><li>根节点的子节点个数为：<code>2 &lt;= y &lt;= m</code><ul><li>例如：3阶B树的根节点的子节点个数的范围为 <code>2 &lt;= y &lt;= 3</code>，3阶B树的根节点的子节点的个数为 [ 2, 3 ]</li><li>例如：4阶B树的根节点的子节点个数的范围为 <code>2 &lt;= y &lt;= 4</code>，4阶B树的根节点的子节点的个数为 [ 2, 4 ]</li></ul></li><li>非根节点的子节点个数为：<code>[m/2] &lt;= y &lt;= m</code>，其中 [ m/2 ] 会进行向上取整，例如 [ 3 / 2 ] = 2<ul><li>例如：3阶B树的非根节点的子节点个数的范围为 <code>2 &lt;= y &lt;= 3</code> , 3阶B树的非根节点的子节点的个数为 [ 2, 3 ]</li><li>例如：4阶B树的非根节点的子节点个数的范围为 <code>2 &lt;= y &lt;= 4</code> , 4阶B树的非根节点的子节点的个数为 [ 2, 4 ]</li></ul></li></ul></li></ol><hr><h2 id="B树的操作"><span class="post-title-index">4. </span><a href="#B树的操作" class="headerlink" title="B树的操作"></a>B树的操作</h2><h3 id="搜索"><span class="post-title-index">4.1. </span><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>如下图中，我们在 3 阶 B 树中进行搜索元素，具体流程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251601206.gif" alt="动画" style="zoom:100%;float:left"></p><p>实现思路如下：</p><ul><li>Step-1：首先，我们从根节点元素进行，从大到小在节点内部进行遍历查找。</li><li>Step-2：然后，如果命中就结束查找。</li><li>Step-3：最后，如果未命中就在去对应的节点中进行查找，重复 <code>Step-1</code> 的操作。</li></ul><h3 id="添加"><span class="post-title-index">4.2. </span><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>如下图中，我们在 3 阶 B 树中进行添加 51、54 元素，具体流程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251618387.gif" alt="动画" style="zoom:100%;float:left"></p><p>实现思路如下：</p><ul><li>Step-1：首先，我们查找当前需要添加元素的位置，由于 B-Tree 也是遵循二叉树的原则，也是遵循从左到右进行查找。</li><li>Step-2：然后，找到添加元素的位置之后判断节点的大小，如果大于则添加到元素右边，小于则添加到元素左边。</li><li>Step-3：最后，添加元素，更新元素数量。</li></ul><h3 id="添加导致的上溢"><span class="post-title-index">4.3. </span><a href="#添加导致的上溢" class="headerlink" title="添加导致的上溢"></a>添加导致的上溢</h3><p>由于刚才添加的元素是正常情况，没有导致元素上溢。但根据 3阶B树 的原则，非根节点元素不能超过2，如下我们添加元素 99 的情况就会导致元素上溢：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251633326.gif" alt="动画" style="zoom:100%;float:left"></p><p>实现思路如下：</p><ul><li>Step-1：首先，将新添加的节点添加到对应的叶子节点时，如果一个节点已经满了，节点的元素数量达到了上限，这个时候就会上溢。</li><li>Step-2：然后，找到当前节点的中间元素，进行向上分裂。</li><li>Step-3：最后，如果上面节点也出现这个问题，则继续向上分裂。</li></ul><h3 id="删除"><span class="post-title-index">4.4. </span><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除叶子节点，具体操作如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251659602.gif" alt="动画" style="zoom:100%;float:left"></p><p>删除非叶子节点，具体操作如下图</p><ul><li>针对删除非叶子节点，我们只需要找到对应的前驱或者后继节点，将删除的元素进行覆盖，再把前驱或者后继节点删除即可。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251705192.gif" alt="动画" style="zoom:100%;float:left"></p><h3 id="删除导致的下溢"><span class="post-title-index">4.5. </span><a href="#删除导致的下溢" class="headerlink" title="删除导致的下溢"></a>删除导致的下溢</h3><p>遵循3阶B树的特性，节点存储的元素和子节点个数遵循如下原则：</p><ol><li>3阶B树节点存储的元素<ul><li>根节点：1 &lt;= n &lt;= 2，[ 1, 2 ]</li><li>非根节点：1 &lt;= n &lt;= 2，[ 1, 2 ]</li></ul></li><li>3阶B树子节点个数<ul><li>根节点：2 &lt;= y &lt;= 3，[ 2, 3 ]</li><li>非根节点：2 &lt;= y &lt;= 4，[ 2, 4 ]</li></ul></li><li>如下我们删除节点 90 ，就导致了B树的下溢。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312251757795.gif" alt="动画"></p><p>实现思路：</p><ul><li>Step-1：首先，我们需要检查相邻的节点。如果兄弟节点中有一个节点包含超过最小限制的元素数量，可以考虑从兄弟节点借一个元素来避免下溢。</li><li>Step-2：然后，我们进行节点合并。如果相邻节点的元素数量都低于最小限制，那么考虑将这些节点合并。</li><li>Step-3：最后，我们重复以上操作。如果在进行上述操作后，父节点也发生了下溢，可能需要递归地进行合并操作，以保持B树的平衡性。</li></ul><hr><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-平衡二叉树</title>
      <link href="/posts/a9b5848b.html"/>
      <url>/posts/a9b5848b.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/7-AVL">https://github.com/wicksonZhang/data-structure/tree/main/7-AVL</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403122253015.png" alt="平衡二叉树（AVL）"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是平衡二叉树"><span class="post-title-index">2.1. </span><a href="#什么是平衡二叉树" class="headerlink" title="什么是平衡二叉树"></a>什么是平衡二叉树</h3><p>平衡二叉树也被称为 <code>AVL</code> 树，是一种树形结构的数据结构，为了保持平衡，它的核心是左右子树高度不能相差1的二叉树。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312151728867.png" alt="image-20231215172839133" style="zoom:80%;float:left"></p><h3 id="平衡二叉树解决了什么问题"><span class="post-title-index">2.2. </span><a href="#平衡二叉树解决了什么问题" class="headerlink" title="平衡二叉树解决了什么问题"></a>平衡二叉树解决了什么问题</h3><ol><li><p>平衡二叉树主要解决的是 二叉搜索树 性能退化的问题。</p></li><li><p>在普通二叉搜索树中，如果数据按照某种顺序插入或者删除时，会导致树退回为链表，直接导致查询、删除的时间复杂度变为 O(n)。</p></li></ol><ul><li><p>如下图中就是二叉搜索树退回为了链表</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312151740047.png" alt="image-20231215174027993"></p></li></ul><h3 id="平衡二叉树的优缺点"><span class="post-title-index">2.3. </span><a href="#平衡二叉树的优缺点" class="headerlink" title="平衡二叉树的优缺点"></a>平衡二叉树的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>快速的查找、插入和删除</strong>：由于<code>AVL</code>维持了较低的高度，使得查找、插入和删除操作的时间复杂度始终保持在O(log n)。</li><li><strong>平衡性的文档</strong>：<code>AVL</code>树保证了树的平衡性，每个节点的左右子树高度差不超过1，这确保了在各种操作下的稳定性和高效性。</li></ol><p><strong>缺点</strong></p><ol><li><strong>复杂的代码</strong>：由于需要维护平衡性，则插入和删除需要执行树的旋转来维持平衡，这些操作会增加算法的复杂度和开销。</li><li><strong>额外的空间开销</strong>：每个节点需要额外的空间来存储平衡因子或者其他信息来维护树的平衡性，这会增加内存开销。</li><li><strong>不适合频繁插入、删除操作的场景：</strong> 如果应用程序的主要操作是频繁的插入和删除，而不是查找操作，<code>AVL</code>树可能不是最佳选择。因为频繁的旋转操作可能会导致性能下降，其他数据结构（比如跳表或者B树）可能更适合这种情况。</li></ol><h3 id="生活中对应的场景"><span class="post-title-index">2.4. </span><a href="#生活中对应的场景" class="headerlink" title="生活中对应的场景"></a>生活中对应的场景</h3><ul><li>Windows对进程地址空间的管理用到了<code>AVL</code></li></ul><hr><h2 id="二叉树失衡的情况"><span class="post-title-index">3. </span><a href="#二叉树失衡的情况" class="headerlink" title="二叉树失衡的情况"></a>二叉树失衡的情况</h2><h3 id="添加导致的失衡"><span class="post-title-index">3.1. </span><a href="#添加导致的失衡" class="headerlink" title="添加导致的失衡"></a>添加导致的失衡</h3><ul><li><p>如下图中，当添加 13 这个节点时，会导致祖先节点进行失衡。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181518602.png" alt="image-20231218151818560" style="zoom: 50%; float: left;"></p></li></ul><h3 id="添加导致的失衡的解决方案"><span class="post-title-index">3.2. </span><a href="#添加导致的失衡的解决方案" class="headerlink" title="添加导致的失衡的解决方案"></a>添加导致的失衡的解决方案</h3><p>目前添加导致的失衡存在如下四种情况：</p><ul><li>LL - 右旋转（单旋）</li><li>RR - 左旋转（单旋）</li><li>LR - RR 左旋转，LL右旋转（双旋）</li><li><code>RL</code> - LL 右旋转，RR左旋转（双旋）</li></ul><h4 id="LL-右旋转（单旋）"><span class="post-title-index">3.2.1. </span><a href="#LL-右旋转（单旋）" class="headerlink" title="LL - 右旋转（单旋）"></a>LL - 右旋转（单旋）</h4><p>如下图中，其中 <code>n</code> 代表 <code>node</code> ，<code>p</code> 代表 <code>parent</code> ，<code>g</code> 代表 <code>grandparent</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181533299.png" alt="image-20231218153324262" style="zoom:80%;float:left;"></p><p>当需要在节点 <code>n</code> 的左子树 <code>T0</code> 中添加元素，则会导致节点 <code>g</code> 失衡。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181536841.png" alt="image-20231218153600806" style="zoom:77%;float:left"></p><p>当节点 <code>g</code> 左边的左边节点失去平衡时，我们称这种情况为 <code>LL</code>。针对这种情况我们需要进行右旋转，具体如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181736147.png" alt="image-20231218153925113" style="zoom:67%;float:left"></p><p>解决思路（<strong>右旋转</strong>）</p><ul><li>首先，我们将节点 <code>g</code> 的左子树指向节点 <code>p</code> 的右子树，即：<code>g.left = p.right</code>。</li><li>然后，再将节点 <code>p</code> 的右子树指向节点 <code>g</code> ，即：<code>p.right = g</code>。</li><li>最后，让节点 <code>p</code> 成为这颗子树的根节点。</li><li>当修改完成之后这仍然是一颗二叉搜索树：<code>T0 &lt; n &lt; T1 &lt; p &lt; T2 &lt; g &lt; T3</code>。</li></ul><p>注意事项</p><ul><li><code>T2、p、g</code> 的 <code>parent</code> 属性</li><li>更新 <code>g、p</code> 的高度</li></ul><h4 id="RR-左旋转（单旋）"><span class="post-title-index">3.2.2. </span><a href="#RR-左旋转（单旋）" class="headerlink" title="RR - 左旋转（单旋）"></a>RR - 左旋转（单旋）</h4><p>现在需要在节点 <code>n</code> 的左子树或者右子树 <code>T2、T3</code> 中添加元素，则会导致节点 <code>g</code> 失衡。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181747942.png" alt="image-20231218174705906" style="zoom:90%;float:left"></p><p>当节点 <code>g</code> 右边的右边节点失去平衡时，我们称这种情况为 <code>RR</code>。针对这种情况我们需要进行左旋转，具体如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181753090.png" alt="image-20231218175336042" style="zoom:80%;float:left"></p><p>解决思路（<strong>左旋转</strong>）</p><ul><li>首先，我们将节点 <code>g</code> 的右子树指向节点 <code>p</code> 的左子树，即：<code>g.right= p.left</code>。</li><li>然后，再将节点 <code>p</code> 的左子树指向节点 <code>g</code> ，即：<code>p.left= g</code>。</li><li>最后，让节点 <code>p</code> 成为这颗子树的根节点。</li><li>当修改完成之后这仍然是一颗二叉搜索树：<code>T0 &lt; g &lt; T1 &lt; p &lt; T2 &lt; g &lt; T3</code>。</li></ul><p>注意事项</p><ul><li><code>T3、p、g</code> 的 <code>parent</code> 属性。</li><li>更新 <code>g、p</code> 的高度。</li></ul><h4 id="LR-RR-左旋转，LL右旋转（双旋）"><span class="post-title-index">3.2.3. </span><a href="#LR-RR-左旋转，LL右旋转（双旋）" class="headerlink" title="LR - RR 左旋转，LL右旋转（双旋）"></a>LR - RR 左旋转，LL右旋转（双旋）</h4><p>当节点 <code>p</code> 是 节点 <code>g</code> 的 <code>left</code> 节点，节点 <code>n</code> 是 节点 <code>p</code> 的 <code>right</code> 节点，现在往节点 <code>n</code> 添加节点，这种情况称为 <code>LR</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181757757.png" alt="image-20231218175742727" style="zoom:100%;float:left"></p><p>如果是 <code>LR</code>，我们先进行一次左旋转，将二叉树变为 <code>LL</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181758004.png" alt="image-20231218175843975" style="zoom:100%;float:left"></p><p>然后再进行一次右旋转，即可使树达到平衡。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312181759185.png" alt="image-20231218175927159" style="zoom:100%;float:left"></p><h4 id="RL-LL-右旋转，RR左旋转（双旋）"><span class="post-title-index">3.2.4. </span><a href="#RL-LL-右旋转，RR左旋转（双旋）" class="headerlink" title="RL - LL 右旋转，RR左旋转（双旋）"></a><code>RL</code> - LL 右旋转，RR左旋转（双旋）</h4><p>当节点 p 是 节点 g 的 right 节点，节点 n 是 节点 p 的 left 节点，现在往 节点 n 添加节点，这种情况称为 <code>RL</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312182031987.png" alt="image-20231218203110939" style="zoom:100%;float:left"></p><p>如果是 <code>RL</code>，我们先进行一次右旋转，将二叉树变为 <code>RR</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312182032685.png" alt="image-20231218203234640" style="zoom:70%;float:left"></p><p>然后再进行左旋转，即可达到平衡。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312182033799.png" alt="image-20231218203315778" style="zoom:80%;float:left"></p><h3 id="删除导致的失衡"><span class="post-title-index">3.3. </span><a href="#删除导致的失衡" class="headerlink" title="删除导致的失衡"></a>删除导致的失衡</h3><ul><li>例如，当我们需要删除如下二叉树中的节点（16）时，会导致父节点进行失衡。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202154660.png" alt="image-20231220215416628" style="zoom:100%;float:left"></p><h3 id="删除导致的失衡的解决方案"><span class="post-title-index">3.4. </span><a href="#删除导致的失衡的解决方案" class="headerlink" title="删除导致的失衡的解决方案"></a>删除导致的失衡的解决方案</h3><ul><li>删除导致的失衡和添加导致的失衡需要考虑的情况是差不多的</li></ul><h4 id="LL-右旋转（单旋）-1"><span class="post-title-index">3.4.1. </span><a href="#LL-右旋转（单旋）-1" class="headerlink" title="LL - 右旋转（单旋）"></a>LL - 右旋转（单旋）</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202206951.png" alt="image-20231220220613912"></p><h4 id="RR-左旋转（单旋）-1"><span class="post-title-index">3.4.2. </span><a href="#RR-左旋转（单旋）-1" class="headerlink" title="RR - 左旋转（单旋）"></a>RR - 左旋转（单旋）</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202206679.png" alt="image-20231220220643639"></p><h4 id="LR-RR-左旋转，LL右旋转（双旋）-1"><span class="post-title-index">3.4.3. </span><a href="#LR-RR-左旋转，LL右旋转（双旋）-1" class="headerlink" title="LR - RR 左旋转，LL右旋转（双旋）"></a>LR - RR 左旋转，LL右旋转（双旋）</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202207768.png" alt="image-20231220220721720"></p><h4 id="RL-LL-右旋转，RR左旋转（双旋）-1"><span class="post-title-index">3.4.4. </span><a href="#RL-LL-右旋转，RR左旋转（双旋）-1" class="headerlink" title="RL - LL 右旋转，RR左旋转（双旋）"></a><code>RL</code> - LL 右旋转，RR左旋转（双旋）</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202207747.png" alt="image-20231220220748695"></p><hr><h2 id="平衡二叉树"><span class="post-title-index">4. </span><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h3 id="UML-类图"><span class="post-title-index">4.1. </span><a href="#UML-类图" class="headerlink" title="UML 类图"></a><code>UML</code> 类图</h3><ul><li>平衡二叉树是在 <strong>二叉搜索树</strong> 基础上进行开发的，如下是 <code>UML</code> 类图。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202237012.png" alt="image-20231220223742969" style="zoom:100%;float:left"></p><h3 id="代码实现"><span class="post-title-index">4.2. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>我们平衡二叉树是基于二叉搜索树进行开发，所以当我们的二叉搜索树添加完节点之后，如果当前二叉树失衡之后，我们需要恢复平衡。具体操作如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312202147315.gif" alt="动画"></p></li><li><p>实现的思路如下（我们的代码就是基于如下思路进行开发）</p><ul><li>首先，我们基于 <code>BST</code> 进行开发，当我们新添加元素时需要保证 <code>AVL</code> 和 <code>BST</code> 互不影响。</li><li>其次，当 <code>AVL</code> 添加时需要判断当前树是否处于平衡状态。</li><li>然后，如果这棵树处于平衡状态我们则更新这颗树的高度。</li><li>最后，如果当前树不处于平衡状态时需要重新让这棵树处于平衡。</li></ul></li></ul><h4 id="添加节点-afterAdd"><span class="post-title-index">4.2.1. </span><a href="#添加节点-afterAdd" class="headerlink" title="添加节点 - afterAdd()"></a>添加节点 - <code>afterAdd()</code></h4><ul><li><p>我们基于 <code>BST</code> 进行开发，当我们新添加元素时需要保证 <code>AVL</code> 和 <code>BST</code> 互不影响。</p><ul><li>我们需要在 <code>BST.java</code> 中修改 <code>add()</code> ，如果是基于 <code>AVL</code> 那么则需要进行添加节点之后进行处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数检查</span></span><br><span class="line">    checkedElementNotNull(element);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果当前的父级节点为 null ，则代表添加第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// TODO ...</span></span><br><span class="line">        <span class="comment">// 新添加节点之后处理</span></span><br><span class="line">        afterAdd(root);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果当前的父级节点不为 null ,我们将需要添加的元素添加在父级节点的那个位置</span></span><br><span class="line">    Node&lt;E&gt; newNode = createNode(element, parent);</span><br><span class="line">    <span class="comment">// TODO ...</span></span><br><span class="line">    afterAdd(newNode);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点之后进行调整</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterAdd</span><span class="params">(Node&lt;E&gt; node)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>由于 <code>AVL.java</code>  继承了 <code>BST.java</code> 所以在 <code>BST</code> 中需要重写 <code>afterAdd()</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterAdd</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((node = node.parentNode) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断整棵树是否平衡，如果平衡，则更新高度，如果不平衡，则恢复平衡</span></span><br><span class="line">        <span class="keyword">if</span> (isBalanced(node)) &#123;</span><br><span class="line">            <span class="comment">// 更新高度</span></span><br><span class="line">            updateHeight(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 恢复平衡</span></span><br><span class="line">            rebalanced(node);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="是否平衡-isBalanced"><span class="post-title-index">4.2.2. </span><a href="#是否平衡-isBalanced" class="headerlink" title="是否平衡 - isBalanced()"></a>是否平衡 - <code>isBalanced()</code></h4><ul><li><p>当 <code>AVL</code> 添加时需要基于平衡因子判断当前树是否处于平衡状态，具体的思路就是判断左右子树的高度是否小于等于1</p><ul><li>我们判断是否处于平衡，主要是在 <code>isBalanced(Node&lt;E&gt; node)</code> 中进行判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否平衡</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(((AVLNode&lt;E&gt;) node).balanceFactor()) &lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 <code>AVLNode&lt;E&gt;</code> 主要是针对我们平衡二叉树进行使用与 <code>BST</code> 无关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL 节点信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(E element, Node&lt;E&gt; parentNode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(element, parentNode);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 平衡因子</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">balanceFactor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> leftNode == <span class="literal">null</span> ? <span class="number">0</span> : ((AVLNode&lt;E&gt;) leftNode).height;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> rightNode == <span class="literal">null</span> ? <span class="number">0</span> : ((AVLNode&lt;E&gt;) rightNode).height;</span><br><span class="line">        <span class="keyword">return</span> leftHeight - rightHeight;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="更新高度-updateHeight"><span class="post-title-index">4.2.3. </span><a href="#更新高度-updateHeight" class="headerlink" title="更新高度 - updateHeight()"></a>更新高度 - <code>updateHeight()</code></h4><ul><li><p>如果这棵树处于平衡状态我们则更新这颗树的高度，具体的思路就是当前节点的父级节点的高度</p><ul><li>我们更新高度主要在 <code>updateHeight(Node&lt;E&gt; node)</code> 中进行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新节点高度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    ((AVLNode&lt;E&gt;) node).updateHeight();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中更新高度的方法 <code>updateHeight()</code> 在 <code>AVLNode&lt;E&gt;</code> 中进行封装即可，树的高度等于左右子树中的最大值 + 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL 节点信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(E element, Node&lt;E&gt; parentNode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(element, parentNode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> leftNode == <span class="literal">null</span> ? <span class="number">0</span> : ((AVLNode&lt;E&gt;) leftNode).height;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> rightNode == <span class="literal">null</span> ? <span class="number">0</span> : ((AVLNode&lt;E&gt;) rightNode).height;</span><br><span class="line">        height = <span class="number">1</span> + Math.max(leftHeight, rightHeight);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="恢复平衡-rebalanced"><span class="post-title-index">4.2.4. </span><a href="#恢复平衡-rebalanced" class="headerlink" title="恢复平衡 - rebalanced()"></a>恢复平衡 - <code>rebalanced()</code></h4><ul><li><p>如果当前树处于不平衡状态时需要重新让这棵树处于平衡，具体的思路请看 《添加导致的失衡的解决方案》</p><ul><li>如果当前树处于不平衡状态，主要是在 <code>rebalanced(Node&lt;E&gt; node)</code> 中进行判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重新恢复平衡</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> grand 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rebalanced</span><span class="params">(Node&lt;E&gt; grand)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; parent = ((AVLNode&lt;E&gt;) grand).tallerChild();</span><br><span class="line">    Node&lt;E&gt; node = ((AVLNode&lt;E&gt;) parent).tallerChild();</span><br><span class="line">    <span class="comment">// parent 是 grand 的左子树</span></span><br><span class="line">    <span class="keyword">if</span> (parent.isLeftChild()) &#123; <span class="comment">// L</span></span><br><span class="line">        <span class="keyword">if</span> (node.isLeftChild()) &#123; <span class="comment">// LL</span></span><br><span class="line">            rotateRight(grand);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// LR</span></span><br><span class="line">            rotateLeft(parent);</span><br><span class="line">            rotateRight(grand);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// R</span></span><br><span class="line">        <span class="keyword">if</span> (node.isLeftChild()) &#123; <span class="comment">// RL</span></span><br><span class="line">            rotateRight(parent);</span><br><span class="line">            rotateLeft(grand);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// RR</span></span><br><span class="line">            rotateLeft(grand);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中在 <code>AVLNode&lt;E&gt;</code> 中获取高度比较高的子节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL 节点信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(E element, Node&lt;E&gt; parentNode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(element, parentNode);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// TODO ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高度比较高的子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">tallerChild</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> leftNode == <span class="literal">null</span> ? <span class="number">0</span> : ((AVLNode&lt;E&gt;) leftNode).height;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> rightNode == <span class="literal">null</span> ? <span class="number">0</span> : ((AVLNode&lt;E&gt;) rightNode).height;</span><br><span class="line">        <span class="comment">// 左子树高，就返回左子树</span></span><br><span class="line">        <span class="keyword">if</span> (leftHeight &gt; rightHeight) <span class="keyword">return</span> leftNode;</span><br><span class="line">        <span class="comment">// 右子树高，就返回右子树</span></span><br><span class="line">        <span class="keyword">if</span> (leftHeight &lt; rightHeight) <span class="keyword">return</span> rightNode;</span><br><span class="line">        <span class="keyword">return</span> isLeftChild() ? leftNode : rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>左旋和右旋的相关代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> grand 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateLeft</span><span class="params">(Node&lt;E&gt; grand)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; parent = grand.rightNode;</span><br><span class="line">    Node&lt;E&gt; child = parent.leftNode;</span><br><span class="line">    grand.rightNode = child;</span><br><span class="line">    parent.leftNode = grand;</span><br><span class="line">    afterRotate(grand, parent, child);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> grand 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotateRight</span><span class="params">(Node&lt;E&gt; grand)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; parent = grand.leftNode;</span><br><span class="line">    Node&lt;E&gt; child = parent.rightNode;</span><br><span class="line">    grand.leftNode = child;</span><br><span class="line">    parent.rightNode = grand;</span><br><span class="line">    afterRotate(grand, parent, child);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">afterRotate</span><span class="params">(Node&lt;E&gt; grand, Node&lt;E&gt; parent, Node&lt;E&gt; child)</span> &#123;</span><br><span class="line">    <span class="comment">// 让 parent 成为子树的根节点</span></span><br><span class="line">    parent.parentNode = grand.parentNode;</span><br><span class="line">    <span class="keyword">if</span> (grand.isLeftChild()) &#123;</span><br><span class="line">        grand.parentNode.leftNode = parent;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grand.isLeftChild()) &#123;</span><br><span class="line">        grand.parentNode.leftNode = parent;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root = parent;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 更新 child 的parent</span></span><br><span class="line">    <span class="keyword">if</span> (child != <span class="literal">null</span>) &#123;</span><br><span class="line">        child.parentNode = grand;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 更新 grand 的 parent</span></span><br><span class="line">    grand.parentNode = parent;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 更新高度</span></span><br><span class="line">    updateHeight(grand);</span><br><span class="line">    updateHeight(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除节点-afterRemove"><span class="post-title-index">4.2.5. </span><a href="#删除节点-afterRemove" class="headerlink" title="删除节点 - afterRemove()"></a>删除节点 - <code>afterRemove()</code></h4><ul><li><p>我们基于 <code>BST</code> 进行开发，当我们新添加元素时需要保证 <code>AVL</code> 和 <code>BST</code> 互不影响。</p><ul><li>我们需要在 <code>BST.java</code> 中修改 <code>remove()</code> ，如果是基于 <code>AVL</code> 那么则需要进行删除节点之后进行处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果 node 是为删除度为1的节点</span></span><br><span class="line">    <span class="keyword">if</span> (removeNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// TODO ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除之后的处理</span></span><br><span class="line">        afterRemove(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 删除叶子节点, 且只有根节点元素</span></span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 删除之后的处理</span></span><br><span class="line">        afterRemove(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除叶子节点, 有可能当前节点在父级节点的左边，也有可能在父级节点的右边</span></span><br><span class="line">        <span class="comment">// TODO ...</span></span><br><span class="line">        <span class="comment">// 删除之后的处理</span></span><br><span class="line">        afterRemove(node);</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于 <code>AVL.java</code>  继承了 <code>BST.java</code> 所以在 <code>BST</code> 中需要重写 <code>afterRemove()</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除之后做处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterRemove</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((node = node.parentNode) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断整棵树是否平衡，如果平衡，则更新高度，如果不平衡，则恢复平衡</span></span><br><span class="line">        <span class="keyword">if</span> (isBalanced(node)) &#123;</span><br><span class="line">            <span class="comment">// 更新高度</span></span><br><span class="line">            updateHeight(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 恢复平衡</span></span><br><span class="line">            rebalanced(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><span class="post-title-index">4.3. </span><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>添加<ul><li>可能会导致所有的祖先节点都失衡</li><li>只要让高度最低的失衡节点恢复平衡，整棵树就会恢复平衡【仅需O(1)次调整】</li></ul></li><li>删除<ul><li>可能会导致父节点或祖先节点失衡</li><li>恢复平衡后，可能会导致更高层的祖先节点失衡【最多需要O(logn)次调整】</li></ul></li><li>平均时间复杂度<ul><li>搜素：O(logn)</li><li>添加：O(logn)，仅需O(1)次旋转</li><li>删除：O(logn)，最多需要O(logn)次旋转操作</li></ul></li></ul><h3 id="单元测试"><span class="post-title-index">4.4. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVL&lt;Integer&gt; avlTree;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        avlTree = <span class="keyword">new</span> <span class="title class_">AVL</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加一些元素作为测试数据</span></span><br><span class="line">        avlTree.add(<span class="number">5</span>);</span><br><span class="line">        avlTree.add(<span class="number">3</span>);</span><br><span class="line">        avlTree.add(<span class="number">7</span>);</span><br><span class="line">        avlTree.add(<span class="number">2</span>);</span><br><span class="line">        avlTree.add(<span class="number">4</span>);</span><br><span class="line">        avlTree.add(<span class="number">6</span>);</span><br><span class="line">        avlTree.add(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSizeAndClear</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">7</span>, avlTree.size());</span><br><span class="line">        assertFalse(avlTree.isEmpty());</span><br><span class="line"></span><br><span class="line">        avlTree.clear();</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">0</span>, avlTree.size());</span><br><span class="line">        assertTrue(avlTree.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBalanceAfterAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 添加节点后，检查 AVL 树是否保持平衡</span></span><br><span class="line">        assertTrue(isBalanced(avlTree.root));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBalanceAfterRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在移除节点后，检查 AVL 树是否保持平衡</span></span><br><span class="line">        avlTree.remove(<span class="number">3</span>);</span><br><span class="line">        assertTrue(isBalanced(avlTree.root));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(BinaryTree.Node&lt;Integer&gt; node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">balanceFactor</span> <span class="operator">=</span> ((AVL.AVLNode&lt;Integer&gt;) node).balanceFactor();</span><br><span class="line">        <span class="keyword">return</span> Math.abs(balanceFactor) &lt;= <span class="number">1</span> &amp;&amp; isBalanced(node.leftNode) &amp;&amp; isBalanced(node.rightNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-二叉搜索树</title>
      <link href="/posts/977d6ecc.html"/>
      <url>/posts/977d6ecc.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/6-BST">https://github.com/wicksonZhang/data-structure/tree/main/6-BST</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403112000480.png" alt="二叉搜索树"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是二叉搜索树"><span class="post-title-index">2.1. </span><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h3><ol><li><p>二叉搜索树（Binary Search Tree，<code>BST</code>）：二叉搜索树是二叉树的一种，二叉搜索树中每个节点中最多有两个子节点，左子节点和右子节点。</p><ul><li>其中任意一个节点的值都要 <strong>大于</strong> 其左子树所有节点的值</li><li>其中任意一个节点的值都要 <strong>小于</strong> 其右子树所有节点的值</li><li>它的左右子树也是一颗二叉搜索树</li></ul></li><li><p>注意：二叉搜索树中存储的元素必须具备可比较性，且不允许为 null</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312010951236.png" alt="image-20231201095154187" style="zoom:80%;float:left"></p></li></ol><h3 id="二叉搜索树解决了什么问题"><span class="post-title-index">2.2. </span><a href="#二叉搜索树解决了什么问题" class="headerlink" title="二叉搜索树解决了什么问题"></a>二叉搜索树解决了什么问题</h3><ol><li>如果从数组的角度进行考虑，数组如果添加、删除、查找元素的话，最好可能是 <strong>O(1)</strong> ，最坏的情况可能是 <strong>O(n)</strong>，平均是 <strong>O(n)</strong>。</li><li>但二叉搜索树就进一步的解决了这个问题：<ul><li><strong>高效查找</strong>：由于其有序性质，可以利用二分搜索的方式快速定位到所需的节点，平均时间复杂度为 O(log n)。</li><li><strong>有序性：</strong> <code>BST</code> 中的节点按照特定的顺序排列。左子树的所有节点的值都小于根节点的值，右子树的所有节点的值都大于根节点的值。</li><li><strong>插入和删除操作：</strong> <code>BST</code> 允许相对快速地执行插入和删除操作。通过维护树的结构，并根据节点值的大小关系进行调整，可以在平均情况下以 O(log n) </li></ul></li></ol><h3 id="二叉搜索树的优缺点"><span class="post-title-index">2.3. </span><a href="#二叉搜索树的优缺点" class="headerlink" title="二叉搜索树的优缺点"></a>二叉搜索树的优缺点</h3><p><strong>优点</strong></p><ol><li>高效的查找：<code>BST</code> 的结构使得查找操作高效，平均情况下时间复杂度为 O(log n)，其中 n 是节点数量。</li><li>高效的插入和删除： 在大部分情况下，插入和删除操作的时间复杂度也为 O(log n)，使得动态数据集的维护更为高效。</li><li>自然的排序：<code>BST</code> 的结构使得它天然具有排序性质，中序遍历 <code>BST</code> 可以得到有序的节点序列。</li></ol><p><strong>缺点</strong></p><ol><li>可能的不平衡性：在某些情况下，<code>BST</code> 可能会出现不平衡的情况，即树的高度会退化为接近线性，这会导致查找、插入和删除操作的最坏情况时间复杂度为 <strong>O(n)</strong>，而非理想的 <strong>O(log n)</strong>。</li><li>对于特定数据集效率不佳：如果数据集的顺序已经排好或者是逆序的，<code>BST</code> 的性能可能会大幅下降，因为它可能退化为链表形式，导致所有操作的时间复杂度都较高。</li></ol><h3 id="生活中对应的场景"><span class="post-title-index">2.4. </span><a href="#生活中对应的场景" class="headerlink" title="生活中对应的场景"></a>生活中对应的场景</h3><ol><li><p>文件系统：在文件系统中，可以使用二叉树来存储目录和文件的关系。 </p></li><li><p>检索数据：二叉搜索树是一种特殊的二叉树，<strong>可以用于快速检索数据</strong>。</p></li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除指定位置元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E element)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除所有元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span> &#123;&#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="初始化成员变量"><span class="post-title-index">4.1. </span><a href="#初始化成员变量" class="headerlink" title="初始化成员变量"></a>初始化成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化节点信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt; 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E element;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; rightNode;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; leftNode;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; parentNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E element, Node&lt;E&gt; parentNode)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">            <span class="built_in">this</span>.parentNode = parentNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否存在叶子节点</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLeaf</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftNode == <span class="literal">null</span> &amp;&amp; rightNode == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否该节点的度为2</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTwoChildren</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftNode != <span class="literal">null</span> &amp;&amp; rightNode != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化构造器"><span class="post-title-index">4.2. </span><a href="#初始化构造器" class="headerlink" title="初始化构造器"></a>初始化构造器</h3><blockquote><p>注意：由于二叉搜索树中必须遵循两个值具备可比较性。针对这种情况我们采用了两种解决方案：</p><ul><li>创建类并实现 <code>Comparable</code> 接口：<code>class Person implements Comparable&lt;Person&gt;</code></li><li>自定义实现规则并实现 <code>Comparator</code> 接口：<code>new BinarySearchTree&lt;&gt;(Comparator.comparingInt(Person::getAge))</code></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> E&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素的数量"><span class="post-title-index">4.3. </span><a href="#元素的数量" class="headerlink" title="元素的数量"></a>元素的数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素的数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否为空"><span class="post-title-index">4.4. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><span class="post-title-index">4.5. </span><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><blockquote><p>添加元素可能需要考虑的问题较多，而是二叉搜索树中必须满足如下两个条件</p><ul><li>二叉搜索树中存储的元素必须具备可比较性，且不允许为 null。</li><li>二叉搜索树中左子节点的值必须要比当前节点小，右子节点的值必须比当前节点大。</li></ul></blockquote><ul><li>例如，下图中当根节点为空时，当前新添加的元素就是根节点。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071408422.gif" alt="动画" style="zoom:100%;float:left"></p><ul><li>例如，下图中当根节点不为空时，我们需要添加元素为 1 和元素为 12 的节点。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071354290.gif" alt="动画" style="zoom:100%;float:left"></p><p>实现思路：</p><ol><li><code>Step1</code>：判断当前节点是否为 <code>root</code> 根节点，如果是根节点直接进行插入。</li><li><code>Step2</code>：如果不为根节点，则找到当前元素需要添加的父级节点，如果小于则在左边，大于则在右边，等于则进行覆盖。</li><li><code>Step3</code>：通过找到的父级节点于当前元素比较的大小来判断，是添加在父级节点的左边还是右边。</li><li><strong>注意：</strong> 我们需要注意我们对元素进行比较时需要考虑两种情况。分别是 <code>Comparator</code>、<code>Comparable</code> 两种方式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数检查</span></span><br><span class="line">    checkedElementNotNull(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step1：如果当前的父级节点为 null ，则代表添加第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, <span class="literal">null</span>);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step2：如果当前节点不是父级节点，那就需要找到父级节点</span></span><br><span class="line">    Node&lt;E&gt; node = root;</span><br><span class="line">    Node&lt;E&gt; parent = root;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 将传递进来的元素与父级节点进行比较</span></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        cmp = compare(element, node.element);</span><br><span class="line">        parent = node;</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.leftNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.element = element;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step3：我们将需要添加的元素添加在父级节点的那个位置</span></span><br><span class="line">    Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        parent.rightNode = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.leftNode = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>compare 比较器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较两个元素的大小</span></span><br><span class="line"><span class="comment"> * Comparator: java.util.Comparator</span></span><br><span class="line"><span class="comment"> * Comparable: java.lang.Comparable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element1 元素1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element2 元素2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(E element1, E element2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> comparator.compare(element1, element2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((Comparable&lt;E&gt;) element1).compareTo(element2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否包含某个元素"><span class="post-title-index">4.6. </span><a href="#是否包含某个元素" class="headerlink" title="是否包含某个元素"></a>是否包含某个元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否包含某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node(element) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">node</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; node = <span class="built_in">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> compare(element, node.element);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.leftNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的遍历"><span class="post-title-index">4.7. </span><a href="#二叉搜索树的遍历" class="headerlink" title="二叉搜索树的遍历"></a>二叉搜索树的遍历</h3><p>二叉搜索树的遍历主要分为以下四种：</p><ul><li>前序遍历（<code>Preorder Traversal</code>）</li><li>中序遍历（<code>Inorder Traversal</code>）</li><li>后序遍历（<code>Postorder Traversal</code>）</li><li>层序遍历（<code>Level Order Traversal</code>）</li></ul><h4 id="前序遍历（Preorder-Traversal）"><span class="post-title-index">4.7.1. </span><a href="#前序遍历（Preorder-Traversal）" class="headerlink" title="前序遍历（Preorder Traversal）"></a>前序遍历（<code>Preorder Traversal</code>）</h4><p>前序遍历顺序：前序遍历先遍历根节点、左子树、右子树。</p><ul><li>下图的访问节点顺序：7、4、2、1、3、5、9、8、11、10、12</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071643801.png" alt="image-20231207164328741" style="zoom:60%;float:left"></p><ul><li>实现思路：我们可以采用递归直接进行遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历：根节点、前序遍历左子树、前序遍历右子树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">    preorderTraversal(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preorderTraversal</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;node.element = &quot;</span> + node.element);</span><br><span class="line">    preorderTraversal(node.leftNode);</span><br><span class="line">    preorderTraversal(node.rightNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历（Inorder-Traversal）"><span class="post-title-index">4.7.2. </span><a href="#中序遍历（Inorder-Traversal）" class="headerlink" title="中序遍历（Inorder Traversal）"></a>中序遍历（<code>Inorder Traversal</code>）</h4><p>中序遍历顺序：中序遍历先遍历左子树、根节点、右子树。</p><ul><li>下图的访问节点结果：1、2、3、4、5、6、7、8、9、10、11、12</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071706816.png" alt="image-20231207170645775" style="zoom:85%;float:left"></p><ul><li>实现思路：中序遍历也是基于递归进行实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历：左子树、根节点、右子树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">    inorderTraversal(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inorderTraversal(node.leftNode);</span><br><span class="line">    System.out.println(<span class="string">&quot;node.element = &quot;</span> + node.element);</span><br><span class="line">    inorderTraversal(node.rightNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历（Postorder-Traversal）"><span class="post-title-index">4.7.3. </span><a href="#后序遍历（Postorder-Traversal）" class="headerlink" title="后序遍历（Postorder Traversal）"></a>后序遍历（Postorder Traversal）</h4><p>后序遍历顺序：后续遍历先遍历左子树、右子树、根节点</p><ul><li>下图的访问节点顺序：1、3、2、5、4、8、10、12、11、9、7</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071737692.png" alt="image-20231207173715658" style="zoom:85%;float:left"></p><ul><li>实现思路：后序遍历也是基于递归进行实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历: 后续遍历左子树、后序遍历右子树、根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">    postOrderTraversal(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postOrderTraversal(node.leftNode);</span><br><span class="line">    postOrderTraversal(node.rightNode);</span><br><span class="line">    System.out.println(<span class="string">&quot;node.element = &quot;</span> + node.element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层序遍历（Level-Order-Traversal）"><span class="post-title-index">4.7.4. </span><a href="#层序遍历（Level-Order-Traversal）" class="headerlink" title="层序遍历（Level Order Traversal）"></a>层序遍历（Level Order Traversal）</h4><p>层序遍历顺序：从上到下、从左到右依次访问每一个节点</p><ul><li>下图的访问节点顺序：7、4、9、2、5、8、11、1、3、10、12</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071747969.png" alt="image-20231207174704933" style="zoom:85%;float:left"></p><ul><li>实现思路：层序遍历我们采用的是队列进行实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 层序遍历：从上倒下，从左到右</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">    levelOrderTraversal(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 将根节点进行入队</span></span><br><span class="line">    queue.offer(node);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        Node&lt;E&gt; newNode = queue.poll();</span><br><span class="line">        System.out.print(<span class="string">&quot;newNode = &quot;</span> + newNode.element);</span><br><span class="line">        <span class="keyword">if</span> (node.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(node.leftNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(node.rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的前驱和后继"><span class="post-title-index">4.8. </span><a href="#二叉搜索树的前驱和后继" class="headerlink" title="二叉搜索树的前驱和后继"></a>二叉搜索树的前驱和后继</h3><h4 id="前驱（predecessor）"><span class="post-title-index">4.8.1. </span><a href="#前驱（predecessor）" class="headerlink" title="前驱（predecessor）"></a>前驱（predecessor）</h4><p><strong>前驱节点</strong>：按照二叉树的中序遍历，前驱节点只得是当前节点的前一个节点。</p><ul><li>基于中序访问节点顺序：1、2、3、4、5、6、7、8、9、10、11、12、13</li><li>例子：节点 8 的前驱节点就是 7</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312112138554.png" alt="image-20231211213850454" style="zoom:50%;float:left"></p><p>实现思路：</p><ol><li><code>Step1</code>：以节点 8 为例，如果需要找到节点 8 的前驱，需要经历如下步骤：<ul><li>首先，找到当前节点的左子节点 <code>Node&lt;E&gt; node = root.left</code>（4）</li><li>然后，一直找左子节点的右子节点 <code>node = node.right</code>（6）</li><li>最后，判断叶子节点的右子节点为null（7）</li></ul></li><li><p><code>Step2</code>：以节点 9 为例，如果需要找到节点 9 的前驱，需要经历如下步骤：</p><ul><li>首先，当前节点的左子节点一定为<code>null</code>，且父节点不为 <code>null</code>.</li><li>然后，一直找到当前节点的父级节点 <code>node = node.parent</code>（10，13）</li><li>最后，判断当前节点是不是在父级节点的左子节点 <code>node == node.parent.left</code>，如果是就一直找，如果不是就停止。</li></ul></li><li><p><code>Step3</code>：最后根据 <code>Step2</code> 的步骤进行返回相关结果集</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前驱节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">predecessor</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查左子树的右节点</span></span><br><span class="line">    <span class="keyword">if</span> (root.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;E&gt; node1 = root.leftNode;</span><br><span class="line">        <span class="keyword">while</span> (node1.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            node1 = node1.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理无左子树的情况</span></span><br><span class="line">    Node&lt;E&gt; parentNode = node.parentNode;</span><br><span class="line">    <span class="keyword">while</span> (parentNode != <span class="literal">null</span> &amp;&amp;  node == parentNode.leftNode) &#123;</span><br><span class="line">        node = parentNode;</span><br><span class="line">        parentNode = parentNode.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后继（successor）"><span class="post-title-index">4.8.2. </span><a href="#后继（successor）" class="headerlink" title="后继（successor）"></a>后继（successor）</h4><p><strong>后继节点</strong>：按照二叉树的中序遍历，后继节点是当前节点的后一个节点。</p><ul><li>基于中序访问节点顺序：1、2、3、4、5、6、7、8、9、10、11</li><li>例子：当前节点 4 的后继节点就是 5</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312120936669.png" alt="image-20231212093621598" style="zoom:72%;float:left"></p><p>实现思路：后序节点的实现思路本质上是与前序节点实现的思路逻辑是相反的。</p><ol><li><p><code>Step1</code>：以节点 4 为例，如果需要找到节点 4 的后继，需要经历如下步骤：</p><ul><li>首先，找到当前节点的右子节点 <code>Node&lt;E&gt; node = node.rightNode</code>（8）</li><li>然后，一直找到右子节点的左子节点 <code>node = node.leftNode</code>（7）</li><li>最后，判断最后一个节点的左子节点是否为null（5）</li></ul></li><li><p><code>Step2</code>：以节点 3 为例，如果需要找到节点 4 的后继，需要经历如下步骤：</p><ul><li>首先，当前节点的右子节点一定为 <code>null</code>，且父节点不为 <code>null</code>.</li><li>然后，一直找到当前节点的父级节点 <code>node = node.parentNode</code>.</li><li>最后，判断当前节点是不是在父级节点的右子节点 <code>node == node.parent.rightNode</code>，如果是就一直找，如果不是就停止。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后继节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">successor</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理存在右子树的情况</span></span><br><span class="line">    <span class="keyword">if</span> (root.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;E&gt; rightNode = root.rightNode;</span><br><span class="line">        <span class="keyword">while</span> (rightNode.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode = rightNode.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理不存在右子树的情况</span></span><br><span class="line">    Node&lt;E&gt; parentNode = node.parentNode;</span><br><span class="line">    <span class="keyword">while</span> (parentNode != <span class="literal">null</span> &amp;&amp; node == parentNode.rightNode) &#123;</span><br><span class="line">        node = parentNode;</span><br><span class="line">        parentNode = parentNode.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><span class="post-title-index">4.9. </span><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>删除元素：在二叉树搜索树中删除元素中可以分为三个部分：</p><ul><li>删除叶子节点</li><li>删除度为1的节点</li><li>删除度为2的节点。</li></ul><p>删除叶子节点，实现思路如下：</p><ul><li><p>首先找到节点信息，判断节点是在左子节点还是右子节点，最后执行如下代码</p></li><li><p><code>node.parentNode.rightNode = null</code></p></li><li><p>注意：需要考虑只存在一个节点的情况，也就是根节点。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312121540916.gif" alt="动画" style="zoom:100%;float:left"></p><p>删除度为 1 的节点，实现思路如下：</p><ul><li><p>当找到需要删除的节点后，判断当前节点是左子节点还是右子节点，最后执行如下代码</p></li><li><p><code>node.rightNode.parentNode = node.parentNode</code></p></li><li><p><code>node.parentNode.leftNode = node.rightNode</code></p></li><li><p>注意：这里如果根节点只存在一个度的情况</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312121535206.gif" alt="动画" style="zoom:100%;float:left"></p><p>删除度为 2 的节点，实现思路如下：</p><ul><li>当找到需要删除的节点后，本质上就是找到当前节点的前驱节点或者后继节点来覆盖掉当前节点的值，在删除叶子节点。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312121532226.gif" alt="动画" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除度为 2 的节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.hasTwoChildren()) &#123;</span><br><span class="line">        <span class="comment">// 找到当前元素的前驱节点</span></span><br><span class="line">        Node&lt;E&gt; predecessorNode = predecessor(node);</span><br><span class="line">        node.element = predecessorNode.element;</span><br><span class="line">        node = predecessorNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 node：node节点的度要么是1，要么是0</span></span><br><span class="line">    Node&lt;E&gt; removeNode = node.leftNode != <span class="literal">null</span> ? node.leftNode : node.rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 node 是为删除度为1的节点</span></span><br><span class="line">    <span class="keyword">if</span> (removeNode != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 更换父级节点</span></span><br><span class="line">        removeNode.parentNode = node.parentNode;</span><br><span class="line">        <span class="keyword">if</span> (removeNode.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 当只存在根节点，根节点的度为1的情况</span></span><br><span class="line">            root = removeNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node == node.parentNode.leftNode) &#123;</span><br><span class="line">            node.parentNode.leftNode = removeNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.parentNode.rightNode = removeNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.parentNode == <span class="literal">null</span>) &#123; <span class="comment">// 删除叶子节点, 且只有根节点元素</span></span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除叶子节点, 有可能当前节点在父级节点的左边，也有可能在父级节点的右边</span></span><br><span class="line">        <span class="keyword">if</span> (node == node.parentNode.leftNode) &#123;</span><br><span class="line">            node.parentNode.leftNode = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.parentNode.rightNode = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空元素"><span class="post-title-index">4.10. </span><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    root = <span class="literal">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">4.11. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTreeTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BinarySearchTree&lt;Integer&gt; bst;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">        bst = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>&lt;&gt;();</span><br><span class="line">        bst.add(<span class="number">5</span>);</span><br><span class="line">        bst.add(<span class="number">3</span>);</span><br><span class="line">        bst.add(<span class="number">7</span>);</span><br><span class="line">        bst.add(<span class="number">2</span>);</span><br><span class="line">        bst.add(<span class="number">4</span>);</span><br><span class="line">        bst.add(<span class="number">6</span>);</span><br><span class="line">        bst.add(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSize</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertEquals(<span class="number">7</span>, bst.size());</span><br><span class="line">        bst.remove(<span class="number">3</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">6</span>, bst.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertFalse(bst.isEmpty());</span><br><span class="line">        bst.clear();</span><br><span class="line">        Assertions.assertTrue(bst.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        bst.add(<span class="number">9</span>);</span><br><span class="line">        Assertions.assertTrue(bst.contains(<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(bst.contains(<span class="number">3</span>));</span><br><span class="line">        bst.remove(<span class="number">3</span>);</span><br><span class="line">        Assertions.assertFalse(bst.contains(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testContains</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(bst.contains(<span class="number">7</span>));</span><br><span class="line">        Assertions.assertFalse(bst.contains(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPreorderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Create a StringBuilder to capture the traversal output</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">java</span>.io.PrintStream(System.out) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span> &#123;</span><br><span class="line">                sb.append(x).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        bst.preorderTraversal();</span><br><span class="line">        <span class="comment">// Check if the traversal output matches the expected order</span></span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;node.element = 5\nnode.element = 3\nnode.element = 2\nnode.element = 4\nnode.element = 7\nnode.element = 6\nnode.element = 8\n&quot;</span>, sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCustomComparator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Comparator.reverseOrder()</span></span><br><span class="line">        BinarySearchTree&lt;String&gt; stringBST = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line">        stringBST.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        stringBST.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        stringBST.add(<span class="string">&quot;cherry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test the traversal order based on the custom comparator</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">java</span>.io.PrintStream(System.out) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span> &#123;</span><br><span class="line">                sb.append(x).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        stringBST.inorderTraversal();</span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;node.element = cherry\nnode.element = banana\nnode.element = apple\n&quot;</span>, sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实战练习"><span class="post-title-index">5. </span><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><h3 id="二叉树的最大深度"><span class="post-title-index">5.1. </span><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h3><blockquote><p>二叉树的最大深度：<a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">https://leetcode.cn/problems/maximum-depth-of-binary-tree/</a></p></blockquote><p><strong>需求</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312131713508.png" alt="image-20231213171333446" style="zoom:100%;float:left"></p><h4 id="递归实现"><span class="post-title-index">5.1.1. </span><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><ul><li><p>采用递归实现思路</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312131753615.png" alt="image-20231213175352580" style="zoom:100%;float:left"></p><ul><li>假设，左子节点有两层，我们采用递归进行遍历。结束的方法是 根节点为 null 就返回0.</li><li>如果一个节点没有子节点，它的高度就是1（根节点高度为1）。</li><li>如果一个节点有一个子节点，那么它的高度就是子节点的高度加1。</li></ul></li><li><p>实现代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归实现"><span class="post-title-index">5.1.2. </span><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><ul><li><p>采用层序遍历实现树的最大深度</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312071747969.png" alt="image-20231207174704933" style="zoom:85%;float:left"></p></li><li><p>实现思路</p><ul><li>首先，第一层节点进行入队，也就是节点 7，队列里面只有一个元素，这是第一层</li><li>然后，当节点 7 出队时，第二层节点（4，9）在进行入队，队列里面只有二个元素，这是第二层</li><li>最后，当第二层的节点出队时，第三层节点（2，5，8，11）的节点在进行入队，队列里面只有二个元素，这是第三层。</li><li>如果当队列中元素为 0 就表示所有的节点遍历完了</li></ul></li><li><p>实现代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 树的高度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当前层的数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">levelSize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(node);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        Node&lt;E&gt; poll = queue.poll();</span><br><span class="line">        levelSize--;</span><br><span class="line">        <span class="keyword">if</span> (poll.leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(poll.leftNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (poll.rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(poll.rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当层数等于0时，表示该层访问完了</span></span><br><span class="line">        <span class="keyword">if</span> (levelSize == <span class="number">0</span>) &#123;</span><br><span class="line">            levelSize = queue.size();</span><br><span class="line">            height++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的完全性检验"><span class="post-title-index">5.2. </span><a href="#二叉树的完全性检验" class="headerlink" title="二叉树的完全性检验"></a>二叉树的完全性检验</h3><blockquote><p>地址：<a href="https://leetcode.cn/problems/check-completeness-of-a-binary-tree/">https://leetcode.cn/problems/check-completeness-of-a-binary-tree/</a></p></blockquote><p><strong>需求</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312132130885.png" alt="image-20231213213048807" style="zoom:90%;float:left"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCompleteTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">leaf</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(poll.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123; <span class="comment">// poll.left == null &amp;&amp; poll.right != null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.offer(poll.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// poll.right == true</span></span><br><span class="line">            leaf = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leaf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻转二叉树"><span class="post-title-index">5.3. </span><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h3><blockquote><p>地址：<a href="https://leetcode.cn/problems/invert-binary-tree/description/">https://leetcode.cn/problems/invert-binary-tree/description/</a></p></blockquote><p><strong>需求</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202312132208603.png" alt="image-20231213220850546" style="zoom:90%;float:left"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> root.right;</span><br><span class="line">    root.right = root.left;</span><br><span class="line">    root.left = treeNode;</span><br><span class="line"></span><br><span class="line">    invertTree(root.left);</span><br><span class="line">    invertTree(root.right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-二叉树</title>
      <link href="/posts/f3bd929a.html"/>
      <url>/posts/f3bd929a.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403102150015.png" alt="二叉树" style="zoom:100%;float:left"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是树"><span class="post-title-index">2.1. </span><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h3><p>树：一种树形的数据结构，主要由节点组成（Node），这些节点以层次关系连接。树的结构类似于自然界中的树。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311290958967.png" alt="image-20231129095828884" style="zoom:80%;float:left"></p><h3 id="树的优缺点"><span class="post-title-index">2.2. </span><a href="#树的优缺点" class="headerlink" title="树的优缺点"></a>树的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>高效的数据检索</strong>：树结构允许快速的搜索、插入和删除操作。对于平衡树（如平衡二叉树、红黑树等），这些操作的时间复杂度可以达到对数级别。</li><li><strong>组织结构</strong>：树形结构能够自然地组织和表示层次关系的数据，例如文件系统中的目录结构。</li></ol><p><strong>缺点</strong></p><ol><li><strong>空间开销</strong>：树结构可能会占用较多的额外空间来存储节点之间的连接关系，特别是在树的节点数量较多时。</li><li><strong>设计难度</strong>：选择合适的树结构并对其进行有效的实现可能需要一定的技术和理解，尤其是对于复杂的树结构。</li></ol><h3 id="树的分类"><span class="post-title-index">2.3. </span><a href="#树的分类" class="headerlink" title="树的分类"></a>树的分类</h3><ol><li><p><strong>二叉树（Binary Tree）</strong></p><ul><li><p>特点：每个节点最多有两个子节点。</p></li><li><p>应用场景：在计算机科学中广泛应用，例如在编程语言中的表达式解析、排序算法中的二叉搜索树（<code>BST</code>）、哈夫曼树（用于数据压缩）</p></li></ul></li><li><p><strong>二叉搜索树（Binary Search Tree，<code>BST</code>）</strong></p><ul><li><p>特点：是一种有序的二叉树，左子树的节点值小于父节点，右子树的节点值大于父节点。</p></li><li><p>应用场景：常用于实现动态集合的数据结构，例如在数据库中的索引结构、实现字典或映射等。</p></li></ul></li><li><p><strong>红黑树（Red-Black Tree）</strong></p><ul><li><p>特点：一种自平衡的二叉搜索树，通过维护节点的颜色和一些规则来确保树的平衡性。</p></li><li><p>应用场景：被广泛用于实现集合、映射等数据结构，Java中 <code>HashMap</code> 的底层就是采用的红黑树</p></li></ul></li><li><p><strong>B树（B-Tree）和 B+树（B+ Tree）</strong></p><ul><li><p>特点：多路搜索树，每个节点可以拥有多个子节点，用于磁盘和数据库等存储系统。</p></li><li><p>应用场景：常用于数据库索引、文件系统中的文件组织、存储大量数据的数据结构。</p></li></ul></li><li><p><strong><code>Trie</code> 树（前缀树）</strong></p><ul><li><p>特点：用于存储关联数组，其中键通常是字符串，利用键的前缀来构建树结构。</p></li><li><p>应用场景：常用于搜索引擎中的单词自动补全、字典等需要快速查找的场景。</p></li></ul></li><li><p><strong><code>AVL</code> 树</strong></p><ul><li><p>特点：一种自平衡二叉搜索树，通过旋转操作来维护平衡。</p></li><li><p>应用场景：常用于需要严格保证平衡性的场景，例如实时系统、数据库索引等。</p></li></ul></li></ol><h3 id="生活中对应的场景"><span class="post-title-index">2.4. </span><a href="#生活中对应的场景" class="headerlink" title="生活中对应的场景"></a>生活中对应的场景</h3><ul><li><p>组织架构</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311282302242.png" alt="image-20231128230254168" style="zoom:70%;float:left"></p></li><li><p>文件目录</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403102206244.png" alt="image-20240310220611199" style="zoom:100%;float:left"></p></li></ul><hr><h2 id="基础概念"><span class="post-title-index">3. </span><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><blockquote><p>下图是一个二叉树的基本信息，我们如下标题的 <strong>节点、节点的子树、节点的度、深度&amp;高度</strong> 中的例子都是以下图为主。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311282306285.png" alt="image-20231128230632249" style="zoom:80%;float:left"></p><h3 id="节点"><span class="post-title-index">3.1. </span><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p><strong>节点</strong>：树的基本单元，可以包含数据或元素。</p><ul><li>例如：1，2，3，4，5，6，21. . .</li></ul><h4 id="根节点"><span class="post-title-index">3.1.1. </span><a href="#根节点" class="headerlink" title="根节点"></a>根节点</h4><p><strong>根节点</strong>：树的顶部节点，是树的起点。</p><ul><li>例如：1</li></ul><h4 id="父节点"><span class="post-title-index">3.1.2. </span><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><p><strong>父节点</strong>：子节点的连接点。</p><ul><li>例如：1，2，3，5，6，22 . . .</li></ul><h4 id="子节点"><span class="post-title-index">3.1.3. </span><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><p><strong>子节点</strong>：子节点是父节点的直接下属。</p><ul><li>例如：2，3，4，5，6 就是 1 的子节点</li></ul><h4 id="兄弟节点"><span class="post-title-index">3.1.4. </span><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p><strong>兄弟节点</strong>：兄弟节点是同一个父节点的子节点。</p><ul><li>例如，2，3，4，5，6 就是兄弟节点，但 21，31 就不是兄弟节点。</li></ul><h4 id="空树"><span class="post-title-index">3.1.5. </span><a href="#空树" class="headerlink" title="空树"></a>空树</h4><p><strong>空树</strong>：指的是一棵树可以没有任何节点</p><h3 id="节点的子树"><span class="post-title-index">3.2. </span><a href="#节点的子树" class="headerlink" title="节点的子树"></a>节点的子树</h3><h4 id="子树"><span class="post-title-index">3.2.1. </span><a href="#子树" class="headerlink" title="子树"></a>子树</h4><p><strong>子树</strong>：指根节点中子节点产生的树。</p><ul><li>例如：2，21，22，221，222，223</li></ul><h4 id="左子树"><span class="post-title-index">3.2.2. </span><a href="#左子树" class="headerlink" title="左子树"></a>左子树</h4><p><strong>左子树</strong>：指当前节点左侧的树。</p><ul><li>例如：2 的左子树就是21</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311282315897.png" alt="image-20231128231547856" style="zoom:80%;float:left"></p><h4 id="右子树"><span class="post-title-index">3.2.3. </span><a href="#右子树" class="headerlink" title="右子树"></a>右子树</h4><p><strong>右子树</strong>：指子节点右侧的树。</p><ul><li>例如：2的右子树就是22</li></ul><h3 id="节点的度"><span class="post-title-index">3.3. </span><a href="#节点的度" class="headerlink" title="节点的度"></a>节点的度</h3><p><strong>节点的度</strong>：子树的个数。</p><ul><li>例如：根节点1的度就是5（2，3，4，5，6）</li></ul><h4 id="树的度"><span class="post-title-index">3.3.1. </span><a href="#树的度" class="headerlink" title="树的度"></a>树的度</h4><p><strong>树的度</strong>：所有节点度中的最大值。</p><ul><li>例如：根节点1最大也就是5</li></ul><h4 id="叶子节点"><span class="post-title-index">3.3.2. </span><a href="#叶子节点" class="headerlink" title="叶子节点"></a>叶子节点</h4><p><strong>叶子节点</strong>：度为 0 的节点。</p><ul><li>例如：21，221，222，223，4，51，52，61</li></ul><h4 id="非叶子节点"><span class="post-title-index">3.3.3. </span><a href="#非叶子节点" class="headerlink" title="非叶子节点"></a>非叶子节点</h4><p><strong>非叶子节点</strong>：度非 0 的节点。</p><ul><li>例如 2，3，5，6</li></ul><h3 id="深度-amp-amp-高度"><span class="post-title-index">3.4. </span><a href="#深度-amp-amp-高度" class="headerlink" title="深度 &amp;&amp; 高度"></a>深度 &amp;&amp; 高度</h3><h4 id="层数"><span class="post-title-index">3.4.1. </span><a href="#层数" class="headerlink" title="层数"></a>层数</h4><p><strong>层数</strong>：根节点（1）为第 1 层，子节点（2，3，4，5，6）为第 2 层，然后以此类推。</p><h4 id="深度"><span class="post-title-index">3.4.2. </span><a href="#深度" class="headerlink" title="深度"></a>深度</h4><p><strong>节点的深度</strong></p><ul><li>从根节点到当前节点的唯一路径上的节点总数。</li><li>例如，当前节点为 2 ，那么深度就是2（1，2），当前节点为 31 ，那么深度就是3（1，3，31）</li></ul><p><strong>树的深度</strong></p><ul><li>所有节点深度中的最大值。</li><li>例如，根节点 1 的深度为 4 （1，2，22，223）</li></ul><h4 id="高度"><span class="post-title-index">3.4.3. </span><a href="#高度" class="headerlink" title="高度"></a>高度</h4><p><strong>节点的高度</strong></p><ul><li>从当前节点到最远叶子节点的路径上的节点总数。</li><li>例如，当前节点2的高度就是3（2，22，221）</li></ul><p><strong>树的高度</strong></p><ul><li>所有节点高度中的最大值，<strong>树的深度等于树的高度</strong>。</li><li>例如 根节点 1 的高度就是 4 （1，2，22，223）</li></ul><hr><h2 id="二叉树（Binary-Tree）"><span class="post-title-index">4. </span><a href="#二叉树（Binary-Tree）" class="headerlink" title="二叉树（Binary Tree）"></a>二叉树（Binary Tree）</h2><h3 id="二叉树的特点"><span class="post-title-index">4.1. </span><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291350512.png" alt="image-20231129135054480" style="zoom:90%;float:left"></p><ul><li>二叉树每个节点最多有两个子节点</li><li>左子树和右子树必须保证顺序</li></ul><h3 id="二叉树的特性"><span class="post-title-index">4.2. </span><a href="#二叉树的特性" class="headerlink" title="二叉树的特性"></a>二叉树的特性</h3><blockquote><p>我们下图中的例子以如下图中的二叉树为准</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291354389.png" style="zoom:80%;float:left;"></p><ol><li><p>非空二叉树的第 i 层，最多有 <strong>2^(i-1)</strong> 个节点 （i &gt;= 1）</p><ul><li>例如：第 4 层，2^(4 - 1) = 8</li></ul></li><li><p>在高度为 h 的二叉树上最多有 <strong>2^h - 1</strong> 个节点（h &gt;= 1）</p><ul><li>例如：高度为 4，2^4 - 1 = 15</li></ul></li><li><p>对于任何一棵非空二叉树，如果叶子节点个数为 <code>n0</code>，度为2的节点个数为 <code>n2</code>，则有：<strong><code>n0 = n2+1</code></strong>。</p><ul><li><code>n0</code> = 8（度为0的节点，例如：8，9，10，11，12，13，14，15）</li><li><p><code>n2</code> = 7（度为2的节点，例如：1，2，3，4，5，6，7）</p></li><li><p><strong><code>n0 = n2 + 1</code></strong></p></li></ul></li><li><p><strong><code>n0 = n2 + 1</code></strong>，公式推导如下：</p><ul><li><p>假设节点总数为 n , 则 <code>n = n0 + n1 + n2</code>，即度为0，为1，为2 的总和。</p><ul><li><code>n0 = 8（8，9，10，11，12，13，14，15）</code></li><li><code>n1 = 0（0）</code></li><li><code>n2 = 7（1，2，3，4，5，6，7）</code></li></ul></li><li><p>假设边数为 t，边数（节点的左右两根连接线）。</p><ul><li><code>t = n1 + 2 * n2 = 14</code>，即 <code>n1 = 0（0）</code>、<code>n2 = 7（1，2，3，4，5，6，7）</code></li><li><code>t = n - 1 = 14</code>，即 <code>n = 15</code>，由于根节点是没有边的，所有需要 - 1.</li><li>其中 n 是可以换算为 <code>n0 + n1 + n2</code> ，所以可以推导为 <code>n1 + 2 * n2 = （n0 + n1 + n2） - 1</code></li><li>则 <code>n0 = n2 + 1</code></li></ul></li></ul></li></ol><hr><h2 id="二叉树的种类"><span class="post-title-index">5. </span><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h2><h3 id="真二叉树（Proper-Binary-Tree）"><span class="post-title-index">5.1. </span><a href="#真二叉树（Proper-Binary-Tree）" class="headerlink" title="真二叉树（Proper Binary Tree）"></a>真二叉树（Proper Binary Tree）</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291501077.png" alt="image-20231129150130016" style="zoom:100%;float:left"></p><h4 id="真二叉树特点"><span class="post-title-index">5.1.1. </span><a href="#真二叉树特点" class="headerlink" title="真二叉树特点"></a>真二叉树特点</h4><p><strong>真二叉树</strong>：所有节点要么为 0 ，要么为 2</p><h3 id="满二叉树（Full-Binary-Tree）"><span class="post-title-index">5.2. </span><a href="#满二叉树（Full-Binary-Tree）" class="headerlink" title="满二叉树（Full Binary Tree）"></a>满二叉树（Full Binary Tree）</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291506540.png" alt="image-20231129150629477" style="zoom:80%;float:left"></p><h4 id="满二叉树特点"><span class="post-title-index">5.2.1. </span><a href="#满二叉树特点" class="headerlink" title="满二叉树特点"></a>满二叉树特点</h4><p><strong>满二叉树</strong>：所有节点的度要么为 0 ，要么为 2。且所有的叶子节点都在最后一层。</p><p><strong>注意</strong>：满二叉树一定是真二叉树，真二叉树不一定是满二叉树。</p><h4 id="满二叉树特性"><span class="post-title-index">5.2.2. </span><a href="#满二叉树特性" class="headerlink" title="满二叉树特性"></a>满二叉树特性</h4><ul><li>假设满二叉树的高度为 h (h &gt;= 1)，则可以得到如下结论：<ul><li>第 i 层的节点数量：<strong><code>2^(i - 1)</code></strong>，例如，上图中第二层(2，3)的节点数量为 2^(2 - 1) = 2</li><li>叶子节点数量：<strong><code>2^(h - 1)</code></strong>，例如，上图中高度为4的节点数量为 2^(4-1) = 8</li><li>总的节点数量 n：<ul><li>n = 2^h - 1 =&gt; (2^0 + 2^1 + 2^2 + … + 2^(h - 1))</li><li>h = <code>log2(n + 1)</code></li></ul></li></ul></li></ul><h3 id="完全二叉树（Complete-Binary-Tree）"><span class="post-title-index">5.3. </span><a href="#完全二叉树（Complete-Binary-Tree）" class="headerlink" title="完全二叉树（Complete Binary Tree）"></a>完全二叉树（Complete Binary Tree）</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291539660.png" alt="image-20231129153901627" style="zoom:80%;float:left;"></p><h4 id="完全二叉树特点"><span class="post-title-index">5.3.1. </span><a href="#完全二叉树特点" class="headerlink" title="完全二叉树特点"></a>完全二叉树特点</h4><ol><li>完全二叉树：叶子节点只会出现最后 2 层，且最后 1 层的叶子节点都靠左对齐。</li><li>可以理解为完全二叉树是从上到下，从左到右都是向左靠齐。</li><li>满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树</li><li>度为 1 的节点只有左子树，子节点要么是 1 个，要么是 0 个。</li></ol><h4 id="完全二叉树特性"><span class="post-title-index">5.3.2. </span><a href="#完全二叉树特性" class="headerlink" title="完全二叉树特性"></a>完全二叉树特性</h4><ol><li><p>假设完全二叉树的高度为 h（h &gt;= 1），则可以得到如下结论：</p><ul><li>节点总数：至少有 2^(h - 1) 个节点，以上图为例，即（2^0 + 2^1 + 2^2 + … + 2^(h - 2) + 1）= 8</li><li>节点总数：至多有 2^h - 1 个节点，即（2^0 + 2^1 + 2^2 + …… + 2^(h - 1)，满二叉树）= 15</li><li>总节点数为n<ul><li><code>2^(h - 1) &lt;= n &lt; 2^h</code></li><li><code>h - 1 &lt;= log2n &lt; h</code></li><li>h = floor(<code>log2n</code>) + 1</li><li>floor 向下取整，ceiling 向上取整</li></ul></li></ul></li><li><p>假设一颗有 n 个节点的完全二叉树（n &gt; 0）, 从上到下、从左到右对节点从 <strong>1</strong> 开始进行编号，则任意第 i 个节点可以得到如下结论：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291650099.png" alt="image-20231129165032068" style="zoom:67%;float:left"></p><ul><li>i = 1，它是根节点。以上图节点A为例, i = 1 就是根节点</li><li>i &gt; 1，它的父节点编号为 floor(i / 2)。<code>以上图节点G为例，floor(7 / 2) = 3</code></li><li><code>2i</code> &lt;= n，它的左子节点编号为 <code>2i</code>。<code>以上图节点E为例，2 * 5 = 10</code></li><li><code>2i</code> &gt; n，它无左子节点。<code>以上图节点F为例，2 * 6 &gt; 10</code></li><li><code>2i</code> + 1 &lt;= n，它的右子节点编号为 <code>2i</code> + 1。<code>以上图节点D为例，2 * 4 + 1 = 9</code></li><li><code>2i</code> + 1 &gt; n，它无右子节点。<code>以上图节点E为例，2 * 5 + 1 &gt; 10</code></li></ul></li><li><p>假设一颗有 n 个节点的完全二叉树（n &gt; 0）, 从上到下、从左到右对节点从 <strong>0</strong> 开始进行编号，则任意第 i 个节点可以得到如下结论：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311291644251.png" alt="image-20231129164411205" style="zoom:67%;float:left"></p><ul><li><p>i = 0，它是根节点。<code>以上图节点A为例, i = 0 就是根节点</code></p></li><li><p>i &gt; 0，它的父节点编号为 floor((i - 1) / 2)。<code>以上图节点G为例，floor((6 - 1) / 2) = 2</code></p></li><li><p><code>2i</code> + 1 &lt;= n - 1，它的左子节点编号为 <code>2i</code> + 1。<code>以上图节点E为例，2 * 4 + 1 = 9</code></p></li><li><p><code>2i</code> + 1 &gt; n - 1，它无左子节点。<code>以上图节点F为例，2 * 5 &gt; 9 - 1</code></p></li><li><p><code>2i</code> + 1 &lt;= n，它的右子节点编号为 <code>2i</code> + 1。<code>以上图节点D为例，2 * 4 + 1 = 9</code></p></li><li><code>2i</code> + 1 &lt;= n - 1, 它的右子节点编号为 <code>2i</code> + 2。<code>以上图节点D为例，2 * 3 + 2 = 8</code></li></ul></li></ol><hr><h2 id="实战练习"><span class="post-title-index">6. </span><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><blockquote><p><code>leetcode</code>地址：<a href="https://leetcode-cn.com/problems/find-leaves-of-binary-tree/">https://leetcode-cn.com/problems/find-leaves-of-binary-tree/</a></p></blockquote><p><strong>需求</strong></p><ul><li>如果一颗完全二叉树有 768 个节点，求叶子节点的个数</li></ul><p><strong>实现思路</strong></p><ul><li>首先，在上面小节 <strong>二叉树的特性</strong> 中我们推导出节点总数: <code>n = n0 + n1 + n2</code></li><li>然后，我们可以假设叶子节点总数为 <code>n0</code>，非叶子节点度为1的总数为 <code>n1</code>，非叶子节点度为2的总数为<code>n2</code></li><li>其次，我们通过小节 <strong>二叉树的特性</strong> 分析得出，<code>n0 = n2 + 1</code>，即 <code>n2 = n0 - 1</code>，所以 <code>n = 2n0 + n1 - 1</code></li><li>再次，在 完全二叉树特性 小节中我们分析了度为1的情况，即 <code>n1</code> 要么为1，要么0. <ul><li>如果 <code>n1</code> 为1，则 n 一定为偶数；<code>n0 = n / 2; n1 + n2 = n / 2</code></li><li>如果 <code>n1</code> 为0，则 n 一定为奇数。<code>n0 = (n + 1) / 2；n1 + n2 = (n - 1) / 2</code></li></ul></li><li>最后，我们我们可以得出 <code>n0</code>（叶子节点） = 384</li></ul><hr><h2 id="参考博文"><span class="post-title-index">7. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列</title>
      <link href="/posts/80f80755.html"/>
      <url>/posts/80f80755.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/4-Queue">https://github.com/wicksonZhang/data-structure/tree/main/4-Queue</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403072056438.png" alt="队列（Queue）"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是队列"><span class="post-title-index">2.1. </span><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><p>队列：是一种线性表的数据结构，队列有头尾两端，分别是队头和队尾。元素会先从对头进行入队，再从队尾进行出队。遵循 <code>First In First Our</code> 原则。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311212303859.png" alt="image-20231121230335831" style="float:left;"></p><h3 id="队列的优缺点"><span class="post-title-index">2.2. </span><a href="#队列的优缺点" class="headerlink" title="队列的优缺点"></a>队列的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>开发简单：</strong>队列主要是基于链表或者动态数组，所以开发简单易懂。</li><li><strong>FIFO原则：</strong>队列遵循先进先出原则，保证了数据处理的顺序性和稳定性。</li><li><strong>代码解耦：</strong>例如我们平时常见的消息队列其实底层采用的数据结构就是队列，而消息队列的最大一个特点就是解耦。</li></ol><p><strong>缺点</strong></p><ol><li><strong>不支持随机访问：</strong>由于队列基于链表，所以也导致了队列不支持随机访问。</li></ol><h3 id="队列的分类"><span class="post-title-index">2.3. </span><a href="#队列的分类" class="headerlink" title="队列的分类"></a>队列的分类</h3><ol><li><strong>普通队列（Basic Queue）：</strong> 这是最基本的队列形式，按照先进先出（FIFO）的原则管理数据。</li><li><strong>双端队列（Deque）：</strong> 双端队列支持在队列的两端进行插入和删除操作。可以从前端或后端插入/删除元素，具有更灵活的操作特性。</li><li><strong>循环队列（Circular Queue）：</strong> 循环队列是一种特殊类型的队列，在队列的基础上做了优化，通过循环利用数组空间来避免数组元素移动的开销。</li></ol><h3 id="生活中对应的场景"><span class="post-title-index">2.4. </span><a href="#生活中对应的场景" class="headerlink" title="生活中对应的场景"></a>生活中对应的场景</h3><ol><li>排队场景：例如我们平时排队，遵循的就是 <code>FIFO</code> 原则。</li><li>水管：我们平时用的水管也是遵循 <code>FIFO</code> 原则。</li></ol><hr><h2 id="普通队列"><span class="post-title-index">3. </span><a href="#普通队列" class="headerlink" title="普通队列"></a>普通队列</h2><h3 id="接口设计"><span class="post-title-index">3.1. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311212336477.png" alt="image-20231121233625431" style="float: left; zoom: 80%;"></p><ul><li><code>Queue&lt;E&gt;.java</code></li></ul><blockquote><p>我们的普通队列主要是基于链表进行实现，所以还是要基于以前的代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(E element)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">deQueue</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列的头元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><span class="post-title-index">3.2. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="初始化成员变量"><span class="post-title-index">3.2.1. </span><a href="#初始化成员变量" class="headerlink" title="初始化成员变量"></a>初始化成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="元素的数量"><span class="post-title-index">3.2.2. </span><a href="#元素的数量" class="headerlink" title="元素的数量"></a>元素的数量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素的数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="是否为空"><span class="post-title-index">3.2.3. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="清空元素"><span class="post-title-index">3.2.4. </span><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    list.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入队"><span class="post-title-index">3.2.5. </span><a href="#入队" class="headerlink" title="入队"></a>入队</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311212345112.gif" alt="动画"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    list.add(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队"><span class="post-title-index">3.2.6. </span><a href="#出队" class="headerlink" title="出队"></a>出队</h4><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311212348329.gif" alt="动画"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">deQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取队列的头元素"><span class="post-title-index">3.2.7. </span><a href="#获取队列的头元素" class="headerlink" title="获取队列的头元素"></a>获取队列的头元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列的头元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">3.3. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaseQueue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">BaseQueue</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnqueueAndSize</span><span class="params">()</span> &#123;</span><br><span class="line">        queue.enQueue(<span class="number">5</span>);</span><br><span class="line">        queue.enQueue(<span class="number">10</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">2</span>, queue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDequeueAndFront</span><span class="params">()</span> &#123;</span><br><span class="line">        queue.enQueue(<span class="number">5</span>);</span><br><span class="line">        queue.enQueue(<span class="number">10</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, queue.front());</span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, queue.deQueue());</span><br><span class="line">        Assertions.assertEquals(<span class="number">1</span>, queue.size());</span><br><span class="line">        Assertions.assertEquals(<span class="number">10</span>, queue.front());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsEmptyAndClear</span><span class="params">()</span> &#123;</span><br><span class="line">        Assertions.assertTrue(queue.isEmpty());</span><br><span class="line">        queue.enQueue(<span class="number">5</span>);</span><br><span class="line">        queue.enQueue(<span class="number">10</span>);</span><br><span class="line">        Assertions.assertFalse(queue.isEmpty());</span><br><span class="line">        queue.clear();</span><br><span class="line">        Assertions.assertTrue(queue.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战练习"><span class="post-title-index">3.4. </span><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h3><h4 id="用栈实现队列"><span class="post-title-index">3.4.1. </span><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h4><blockquote><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">232. 用栈实现队列 - 力扣（LeetCode）</a></p></blockquote><p><strong>需求</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311222104747.png" alt="image-20231122210429658" style="float:left"></p><p><strong>实现思路</strong></p><ul><li>首先，准备两个栈。<code>inStack</code>、<code>outStack</code></li><li>然后，入队时，将元素放入 <code>inStack</code> 栈中。</li><li>最后，出队(pop) 和获取栈顶元素(peek) 时，需要考虑如下两个问题：<ul><li><code>outStack</code> 为空：直接将 <code>inStack</code> 栈中的所有元素 <code>push</code> 到 <code>outStack</code> ，然后再从 <code>outStack</code> 弹出。</li><li><code>outStack</code> 不为空：直接将 <code>outStack</code> 中的元素弹出。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311222134372.png" alt="image-20231122213417333" style="zoom:80%;float:left"></p><p><strong>实现代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; inStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; outStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        inStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        outStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Integer x)</span> &#123;</span><br><span class="line">        inStack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!inStack.isEmpty()) &#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!inStack.isEmpty()) &#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inStack.isEmpty() &amp;&amp; outStack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="双端队列"><span class="post-title-index">4. </span><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><blockquote><p>双端队列本质上也是队列的一种，本质意思就是元素可以从队头和队尾进行入队和出队。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311222141363.png" alt="image-20231122214137331" style="zoom:100%;float:left"></p><h3 id="接口设计-1"><span class="post-title-index">4.1. </span><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311222201754.png" alt="image-20231122220112705" style="zoom:100%;float:left"></p><ul><li><code>DeQueue&lt;E&gt;.java</code></li></ul><blockquote><p>我们的普通队列主要是基于链表进行实现，所以还是要基于以前的代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双端队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;E&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队尾入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueueRear</span><span class="params">(E element)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队尾出队</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">deQueueRear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队头入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueueFront</span><span class="params">(E element)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队头出队</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">deQueueFront</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列的头元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列的尾元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">rear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现-1"><span class="post-title-index">4.2. </span><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="初始化成员变量-1"><span class="post-title-index">4.2.1. </span><a href="#初始化成员变量-1" class="headerlink" title="初始化成员变量"></a>初始化成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;E&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="元素的数量-1"><span class="post-title-index">4.2.2. </span><a href="#元素的数量-1" class="headerlink" title="元素的数量"></a>元素的数量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> linkedList.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="是否为空-1"><span class="post-title-index">4.2.3. </span><a href="#是否为空-1" class="headerlink" title="是否为空"></a>是否为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> linkedList.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从队尾入队"><span class="post-title-index">4.2.4. </span><a href="#从队尾入队" class="headerlink" title="从队尾入队"></a>从队尾入队</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从队尾出队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">deQueueRear</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> linkedList.remove(size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从队头入队"><span class="post-title-index">4.2.5. </span><a href="#从队头入队" class="headerlink" title="从队头入队"></a>从队头入队</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从队头出队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">deQueueFront</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> linkedList.remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取队列的头元素-1"><span class="post-title-index">4.2.6. </span><a href="#获取队列的头元素-1" class="headerlink" title="获取队列的头元素"></a>获取队列的头元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列的头元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> linkedList.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取队列的尾元素"><span class="post-title-index">4.2.7. </span><a href="#获取队列的尾元素" class="headerlink" title="获取队列的尾元素"></a>获取队列的尾元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列的尾元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">rear</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> linkedList.get(size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><span class="post-title-index">4.3. </span><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmptyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        DeQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">DeQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        assertEquals(<span class="number">0</span>, queue.size());</span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Ensure dequeue operations on an empty queue throw exceptions or return expected values</span></span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, queue::deQueueFront);</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, queue::deQueueRear);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnqueueDequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        DeQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">DeQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.enQueueRear(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        queue.enQueueFront(<span class="string">&quot;New First&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">2</span>, queue.size());</span><br><span class="line">        assertFalse(queue.isEmpty());</span><br><span class="line">        assertEquals(<span class="string">&quot;New First&quot;</span>, queue.deQueueFront());</span><br><span class="line">        assertEquals(<span class="string">&quot;First&quot;</span>, queue.deQueueRear());</span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFrontRear</span><span class="params">()</span> &#123;</span><br><span class="line">        DeQueue&lt;Character&gt; queue = <span class="keyword">new</span> <span class="title class_">DeQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.enQueueRear(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        queue.enQueueRear(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">        queue.enQueueFront(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        queue.enQueueFront(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">&#x27;D&#x27;</span>, queue.front());</span><br><span class="line">        assertEquals(<span class="string">&#x27;B&#x27;</span>, queue.rear());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBoundaryConditions</span><span class="params">()</span> &#123;</span><br><span class="line">        DeQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">DeQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Single element queue</span></span><br><span class="line">        queue.enQueueRear(<span class="number">42</span>);</span><br><span class="line">        assertEquals(<span class="number">42</span>, (<span class="type">int</span>) queue.deQueueFront());</span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enqueue a large number of elements and dequeue them one by one</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            queue.enQueueRear(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            assertEquals(i, (<span class="type">int</span>) queue.deQueueFront());</span><br><span class="line">        &#125;</span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="循环队列"><span class="post-title-index">5. </span><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><blockquote><p><strong>循环队列</strong>：就是将队列存储空间的最后一个位置绕到第一个位置，形成逻辑上的环状空间，供队列循环使用。</p><p>底层可以通过数组进行扩容，实现数据的入队和出队，元素从 <code>rear</code> 指向的位置入队，<code>front</code> 指向的位置出队。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311222330948.png" alt="数据结构：循环队列- 子烁爱学习- 博客园" style="zoom:60%;float:left"></p><h3 id="接口设计-2"><span class="post-title-index">5.1. </span><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h3><blockquote><p>目前我们通过动态数组实现循环队列</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleQueue</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 记录队头元素的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前队列存储的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来存储元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(E element)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">deQueue</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列的头元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现-2"><span class="post-title-index">5.2. </span><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="初始化成员变量-2"><span class="post-title-index">5.2.1. </span><a href="#初始化成员变量-2" class="headerlink" title="初始化成员变量"></a>初始化成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头元素的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元素的数量-2"><span class="post-title-index">5.2.2. </span><a href="#元素的数量-2" class="headerlink" title="元素的数量"></a>元素的数量</h4><blockquote><p>与数组保持一致</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素的数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列是否为空"><span class="post-title-index">5.2.3. </span><a href="#队列是否为空" class="headerlink" title="队列是否为空"></a>队列是否为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入队-1"><span class="post-title-index">5.2.4. </span><a href="#入队-1" class="headerlink" title="入队"></a>入队</h4><blockquote><p>入队：入队的其实就是往最后一个元素添加元素，由于我们时循环链表，需要考虑的问题就比较多了。</p></blockquote><p>问题一：如果是在最后一个位置进行入队，那么元素应该需要添加到队列的第一个元素。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311231759622.png" alt="image-20231123175925570" style="zoom:90%;float:left"></p><p>问题二：由于动态数组的默认容量是 <code>10</code> , 当队列满了的时候就需要考虑扩容了。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311232114080.png" alt="image-20231123211440014" style="zoom:80%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enQueue</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    elements[index(size)] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="获取下一个元素的索引"><span class="post-title-index">5.2.4.1. </span><a href="#获取下一个元素的索引" class="headerlink" title="获取下一个元素的索引"></a>获取下一个元素的索引</h5><blockquote><p>这个是对动态数组到了最后一个元素时，在添加元素时就需要获取当前元素的索引</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取下一个元素的索引</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">index</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// case1(使用 % 效率低): (front + index) % elements.length</span></span><br><span class="line">    <span class="comment">// case2: index - (elements.length &gt; index ? 0 : elements.length);</span></span><br><span class="line">    index += front;</span><br><span class="line">    <span class="keyword">return</span> index - (elements.length &gt; index ? <span class="number">0</span> : elements.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组扩容"><span class="post-title-index">5.2.4.2. </span><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h5><blockquote><p>当数组的容量满了之后就需要进行扩容。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组扩容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity 当前容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity - elements.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> capacity + (capacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        E[] newElement = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElement[i] = elements[index(i)];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElement;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队-1"><span class="post-title-index">5.2.5. </span><a href="#出队-1" class="headerlink" title="出队"></a>出队</h4><blockquote><p>出队是比较简单的，我们只需要将 <code>front</code> 索引指向的元素弹出即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">deQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;This Circle is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> elements[front];</span><br><span class="line">    elements[front] = <span class="literal">null</span>;</span><br><span class="line">    front = index(<span class="number">1</span>);</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取队列的头元素-2"><span class="post-title-index">5.2.6. </span><a href="#获取队列的头元素-2" class="headerlink" title="获取队列的头元素"></a>获取队列的头元素</h4><blockquote><p><code>front</code> 指向的元素就是头元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列的头元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">front</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;This Circle is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements[front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-2"><span class="post-title-index">5.3. </span><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmptyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        CircleQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">CircleQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">0</span>, queue.size());</span><br><span class="line">        </span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, queue::deQueue);</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, queue::front);</span><br><span class="line">        System.out.println(<span class="string">&quot;queue = &quot;</span> + queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnqueueAndDequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        CircleQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">CircleQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.enQueue(<span class="string">&quot;One&quot;</span>);</span><br><span class="line">        queue.enQueue(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">        queue.enQueue(<span class="string">&quot;Three&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">3</span>, queue.size());</span><br><span class="line">        assertFalse(queue.isEmpty());</span><br><span class="line">        assertEquals(<span class="string">&quot;One&quot;</span>, queue.front());</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">&quot;One&quot;</span>, queue.deQueue());</span><br><span class="line">        assertEquals(<span class="string">&quot;Two&quot;</span>, queue.deQueue());</span><br><span class="line">        assertEquals(<span class="string">&quot;Three&quot;</span>, queue.deQueue());</span><br><span class="line"></span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">0</span>, queue.size());</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, queue::deQueue);</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, queue::front);</span><br><span class="line">        System.out.println(<span class="string">&quot;queue = &quot;</span> + queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueueResize</span><span class="params">()</span> &#123;</span><br><span class="line">        CircleQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">CircleQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">initialCapacity</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; initialCapacity; i++) &#123;</span><br><span class="line">            queue.enQueue(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue = &quot;</span> + queue);</span><br><span class="line">        assertEquals(initialCapacity, queue.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; initialCapacity; i++) &#123;</span><br><span class="line">            assertEquals(i, queue.deQueue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;queue = &quot;</span> + queue);</span><br><span class="line">        assertTrue(queue.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">0</span>, queue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add more test cases for boundary conditions, concurrent access, and exceptions if needed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-栈</title>
      <link href="/posts/97678223.html"/>
      <url>/posts/97678223.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/3-Stack">https://github.com/wicksonZhang/data-structure/tree/main/3-Stack</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311202357424.png" alt="栈（stack）"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是栈？"><span class="post-title-index">2.1. </span><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h3><p>栈是一种线性的数据结构，只能在一端进行操作，遵循后进先出原则（<strong>L</strong>ast <strong>I</strong>n <strong>F</strong>irst <strong>O</strong>ut）。其实和我们现实生活中的水桶很像。</p><h3 id="栈的优缺点"><span class="post-title-index">2.2. </span><a href="#栈的优缺点" class="headerlink" title="栈的优缺点"></a>栈的优缺点</h3><p><strong>优点</strong></p><ol><li><strong>简单易用：</strong> 栈的操作简单明了，主要包括入栈（push）和出栈（pop），易于实现和理解。</li><li><strong>快速操作：</strong> 入栈和出栈操作在时间复杂度上通常为常数时间，因此执行速度很快。</li><li><strong>内存管理：</strong> 在计算机科学中，栈用于函数调用和参数传递。</li></ol><p><strong>缺点</strong></p><ol><li><strong>大小限制：</strong> 栈的大小通常是固定的，取决于操作系统或编程语言的限制。</li><li><strong>数据访问限制：</strong> 栈的特性决定了只能访问最顶部的元素，无法直接访问其他位置的元素。</li><li><strong>不灵活：</strong> 由于其后进先出的特性，有时并不适合某些特定的问题解决方案。</li></ol><h3 id="在生活中具体的例子"><span class="post-title-index">2.3. </span><a href="#在生活中具体的例子" class="headerlink" title="在生活中具体的例子"></a>在生活中具体的例子</h3><ol><li><strong>盘子堆叠：</strong> 像洗碗时将碗堆叠起来，最先进来的最后出现。</li><li><strong>书籍叠放：</strong> 将书籍垒成一摞，最后放上去的会最先被取走。</li><li><strong>浏览器的前进和后退</strong></li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><p>关于 <code>List&lt;E&gt;</code>、<code>AbstractList&lt;E&gt;</code> 、<code>ArrayList&lt;E&gt;</code> 具体可参考《<a href="https://wickson.top/posts/97be0b4e.html">数据结构-动态数组</a>》</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311202205302.png" alt="image-20231120220543224" style="zoom:90%;float:left"></p><ul><li><code>Stack&lt;E&gt;.java</code></li></ul><blockquote><p>我们栈也是线性结构，与数组的区别就是栈存在一个栈底，所以我们可以基于动态数组的方式构建栈。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E element)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">top</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="成员初始化"><span class="post-title-index">4.1. </span><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素的数量"><span class="post-title-index">4.2. </span><a href="#元素的数量" class="headerlink" title="元素的数量"></a>元素的数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是否为空"><span class="post-title-index">4.3. </span><a href="#是否为空" class="headerlink" title="是否为空"></a>是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入栈"><span class="post-title-index">4.4. </span><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h3><blockquote><p>入栈：本质就是将元素有序的添加到动态数组中。</p></blockquote><ul><li>图例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311192351058.gif" alt="动画" style="zoom:80%;float:left;"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    list.add(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈"><span class="post-title-index">4.5. </span><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h3><blockquote><p>出栈：我们只需要移除数组中的最后一个元素。</p></blockquote><ul><li>图例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311192353599.gif" alt="动画" style="zoom:80%;float:left"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.remove(size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取栈顶元素"><span class="post-title-index">4.6. </span><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h3><blockquote><p>获取栈顶元素：就是获取动态数组中的最后一个元素。</p></blockquote><ul><li>图例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311202214791.png" alt="image-20231120221452761" style="float:left"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈顶元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list.get(size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><span class="post-title-index">4.7. </span><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmptyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        assertTrue(stack.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">0</span>, stack.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPushAndPop</span><span class="params">()</span> &#123;</span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        assertTrue(stack.isEmpty());</span><br><span class="line"></span><br><span class="line">        stack.push(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;Second&quot;</span>);</span><br><span class="line">        assertFalse(stack.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">2</span>, stack.size());</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">&quot;Second&quot;</span>, stack.pop());</span><br><span class="line">        assertEquals(<span class="string">&quot;First&quot;</span>, stack.pop());</span><br><span class="line">        assertTrue(stack.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">0</span>, stack.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTop</span><span class="params">()</span> &#123;</span><br><span class="line">        Stack&lt;Double&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(<span class="number">3.14</span>);</span><br><span class="line">        assertEquals(<span class="number">3.14</span>, stack.top());</span><br><span class="line">        assertEquals(<span class="number">1</span>, stack.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPopOnEmptyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, stack::pop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopOnEmptyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        Stack&lt;Boolean&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, stack::top);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实战练习"><span class="post-title-index">5. </span><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><h3 id="有效的括号"><span class="post-title-index">5.1. </span><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h3><blockquote><p>地址：<a href="https://leetcode.cn/problems/valid-parentheses/description/">https://leetcode.cn/problems/valid-parentheses/description/</a></p></blockquote><p><strong>需求</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311202318151.png" alt="image-20231120231822111" style="zoom:90%;float:left"></p><p><strong>实现思路</strong></p><ul><li>遇见左字符，将左字符入栈</li><li>遇见右字符<ul><li>如果栈是空的，说明括号无效</li><li>如果栈不为空，将栈顶字符出栈，与右字符之匹配</li><li>如果左右字符不匹配，说明括号无效</li><li>如果左右字符匹配，继续扫描下一个字符</li></ul></li><li>所有字符扫描完毕后<ul><li>栈为空，说明括号有效</li><li>栈不为空，说明括号无效</li></ul></li></ul><p><strong>UML 流程图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311202355748.png" alt="image-20231120235557702" style="float:left"></p><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(str)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">char</span> <span class="variable">popChar</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (popChar == <span class="string">&#x27;(&#x27;</span> &amp;&amp; c != <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (popChar == <span class="string">&#x27;[&#x27;</span> &amp;&amp; c != <span class="string">&#x27;]&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (popChar == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c != <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-循环链表</title>
      <link href="/posts/f90a432b.html"/>
      <url>/posts/f90a432b.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/2-LinkedList/src/main/java/com/wickson/linkedlist/cycle">https://github.com/wicksonZhang/data-structure/tree/main/2-LinkedList/src/main/java/com/wickson/linkedlist/cycle</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403062133076.png" alt=" 循 环 链 表 " style="zoom:100%;float:left"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="循环链表是什么"><span class="post-title-index">2.1. </span><a href="#循环链表是什么" class="headerlink" title="循环链表是什么"></a>循环链表是什么</h3><p>循环链表也是在链表的基础上面发展出来的，核心就是将最后一个节点指向第一个节点，形成一个闭环。</p><h3 id="循环链表优缺点"><span class="post-title-index">2.2. </span><a href="#循环链表优缺点" class="headerlink" title="循环链表优缺点"></a>循环链表优缺点</h3><p><strong>优点</strong></p><ol><li><strong>循环遍历：</strong> 由于循环链表形成了一个闭环，可以更方便地循环遍历整个链表。</li><li><strong>插入和删除操作：</strong> 在循环链表中，插入和删除节点可能比常规链表更简单高效，因为不需要考虑头尾节点的特殊情况。</li><li><strong>空间效率：</strong> 循环链表可能在某些情况下节省一些内存。</li></ol><p><strong>缺点</strong></p><ol><li><strong>代码复杂度上升：</strong> 循环链表的插入和删除导致了代码的复杂性，需要考虑的点会更加复杂。</li><li><strong>难以确定结束点：</strong> 在循环链表中，由于没有明确的结束节点，确定遍历何时结束可能需要额外的逻辑。</li></ol><h3 id="生活中的例子"><span class="post-title-index">2.3. </span><a href="#生活中的例子" class="headerlink" title="生活中的例子"></a>生活中的例子</h3><ol><li><strong>日历系统：</strong> 周期性地循环，一年中的日子按照月份和星期循环。</li><li><strong>生态系统中的食物链：</strong> 生物之间的食物链循环，猎物被捕食者捕食，形成一个循环。</li><li><strong>天气季节：</strong> 春夏秋冬的循环，每一年都以相似的方式重复。</li></ol><hr><h2 id="单项循环链表-代码实现"><span class="post-title-index">3. </span><a href="#单项循环链表-代码实现" class="headerlink" title="单项循环链表-代码实现"></a>单项循环链表-代码实现</h2><blockquote><p>如下图情况就是一个简单的单项循环链表。</p><p>单向循环链表是基于单向链表进行开发，所以唯一不同的点只有 <code>add(int index, E element)</code> 和 <code>remove(int index)</code> 这两个方法。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311152253397.png" alt="image-20231115225350263"></p><h3 id="添加元素到指定位置"><span class="post-title-index">3.1. </span><a href="#添加元素到指定位置" class="headerlink" title="添加元素到指定位置"></a>添加元素到指定位置</h3><blockquote><p>注意：单向循环链表添加元素需要考虑的点比较多，具体需要注意一下三种情况：</p><ul><li>往中间或者最后一个位置添加元素</li><li>往首节点添加元素</li><li>当只有一个元素的情况</li></ul></blockquote><p><strong>case1：往中间或者最后一个位置添加元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162014234.gif" alt="动画.gif" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// case1：往中间或者最后一个位置添加元素</span></span><br><span class="line">Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">prevNode.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, prevNode.next);</span><br><span class="line">    </span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case2：往首节点添加元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403062142112.gif" alt="动画.gif" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123; <span class="comment">// case2: 往首节点添加元素</span></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, first);</span><br><span class="line">        first = node;</span><br><span class="line">        Node&lt;E&gt; lastNode = node(size - <span class="number">1</span>);</span><br><span class="line">        lastNode.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// case1：往中间或者最后一个位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">        prevNode.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, prevNode.next);</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case3：当只有一个元素的情况</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403062142985.png" alt="image.png" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123; <span class="comment">// case2:往首节点添加元素</span></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, first);</span><br><span class="line">        first = node;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123; <span class="comment">// case3:当只有一个元素的情况</span></span><br><span class="line">            node.next = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            Node&lt;E&gt; lastNode = node(size - <span class="number">1</span>);</span><br><span class="line">            lastNode.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// case1：往中间或者最后一个位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">        prevNode.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, prevNode.next);</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定元素"><span class="post-title-index">3.2. </span><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><blockquote><p>与上面的思路保持一致，需要注意一下三种情况：</p><ul><li>删除中间或者最后一个位置元素</li><li>删除首节点元素</li><li>当只有一个节点元素</li></ul></blockquote><p><strong>case1：删除中间或者最后一个位置元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162054257.gif" alt="动画.gif" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    <span class="comment">// case1：往中间或者最后一个位置删除元素元素</span></span><br><span class="line">    Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">    Node&lt;E&gt; removeNode = prevNode.next;</span><br><span class="line">    prevNode.next = removeNode.next;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> removeNode.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case2：删除首节点元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162103729.gif" alt="动画.gif" style="zoom:100%;float:left;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// case2: 删除首节点元素</span></span><br><span class="line">        first = node.next;</span><br><span class="line">        Node&lt;E&gt; lastNode = node(size - <span class="number">1</span>);</span><br><span class="line">        lastNode.next = first;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1：往中间或者最后一个位置删除元素元素</span></span><br><span class="line">        Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">        Node&lt;E&gt; removeNode = prevNode.next;</span><br><span class="line">        prevNode.next = removeNode.next;</span><br><span class="line">        <span class="keyword">return</span> removeNode.element;</span><br><span class="line">    &#125; </span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case3：当只有一个节点元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202403062242787.png" alt="image.png" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// case3: 当只有一个节点元素</span></span><br><span class="line">            first = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// case2: 删除首节点元素</span></span><br><span class="line">            first = node.next;</span><br><span class="line">            Node&lt;E&gt; lastNode = node(size - <span class="number">1</span>);</span><br><span class="line">            lastNode.next = first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1：往中间或者最后一个位置删除元素元素</span></span><br><span class="line">        Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">        Node&lt;E&gt; removeNode = prevNode.next;</span><br><span class="line">        prevNode.next = removeNode.next;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> removeNode.element;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><span class="post-title-index">3.3. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleCycleLinkedListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddRemoveElements</span><span class="params">()</span> &#123;</span><br><span class="line">        SingleCycleLinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">SingleCycleLinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add elements</span></span><br><span class="line">        list.add(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove elements</span></span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">20</span>), list.remove(<span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">30</span>), list.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">10</span>), list.remove(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="number">1</span>, list.size());</span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">30</span>), list.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="双向循环链表-代码实现"><span class="post-title-index">4. </span><a href="#双向循环链表-代码实现" class="headerlink" title="双向循环链表-代码实现"></a>双向循环链表-代码实现</h2><blockquote><p>如下是双向循环链表的示例图。</p><p>双向循环链表是基于双向链表进行开发，所以唯一不同的点只有 <code>add(int index, E element)</code> 和 <code>remove(int index)</code> 这两个方法。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311152309255.png" alt="image-20231115230953152"></p><h3 id="添加元素到指定位置-1"><span class="post-title-index">4.1. </span><a href="#添加元素到指定位置-1" class="headerlink" title="添加元素到指定位置"></a>添加元素到指定位置</h3><blockquote><p>注意：双向循环链表添加元素需要考虑的点比较多，具体需要注意一下三种情况：</p><ul><li>往中间或者最后一个位置添加元素</li><li>往尾节点添加元素</li><li>当只有一个元素的情况</li><li>index = 0，size = 1</li></ul></blockquote><p><strong>case1：往中间位置添加元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162156704.gif" alt="动画" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="comment">// case1: 往中间位置添加元素</span></span><br><span class="line">    Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">    Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">    prevNode.next = node;</span><br><span class="line">    nextNode.prev = node;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case2：往尾节点添加元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162237043.gif" alt="动画" style="zoom:100%;float:left;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123; <span class="comment">// case2: 往尾节点添加元素</span></span><br><span class="line">        Node&lt;E&gt; lastNode = last;</span><br><span class="line">        last = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(lastNode, element, first);</span><br><span class="line">        lastNode.next = last;</span><br><span class="line">        first.prev = last;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1: 往中间位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">        Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">        prevNode.next = node;</span><br><span class="line">        nextNode.prev = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case3：当只有一个元素的情况</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162308217.png" alt="image-20231116230809190" style="float:left;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123; <span class="comment">// case2: 往尾节点添加元素</span></span><br><span class="line">        Node&lt;E&gt; lastNode = last;</span><br><span class="line">        last = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(lastNode, element, first);</span><br><span class="line">        <span class="keyword">if</span> (lastNode == <span class="literal">null</span>) &#123; <span class="comment">// case3: 当只有一个元素的情况</span></span><br><span class="line">            first = last;</span><br><span class="line">            first.prev = first;</span><br><span class="line">            first.next = first;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lastNode.next = last;</span><br><span class="line">            first.prev = last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1: 往中间位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">        Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">        prevNode.next = node;</span><br><span class="line">        nextNode.prev = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>case4：index = 0，size = 1</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162316384.png" alt="image-20231116231617348" style="float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123; <span class="comment">// case2: 往尾节点添加元素</span></span><br><span class="line">        Node&lt;E&gt; lastNode = last;</span><br><span class="line">        last = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(lastNode, element, first);</span><br><span class="line">        <span class="keyword">if</span> (lastNode == <span class="literal">null</span>) &#123; <span class="comment">// case3: 当只有一个元素的情况</span></span><br><span class="line">            first = last;</span><br><span class="line">            first.prev = first;</span><br><span class="line">            first.next = first;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lastNode.next = last;</span><br><span class="line">            first.prev = last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1: 往中间位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">        Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">        prevNode.next = node;</span><br><span class="line">        nextNode.prev = node;</span><br><span class="line">        <span class="comment">// case4: index = 0, size = 1</span></span><br><span class="line">        <span class="keyword">if</span> (nextNode == last) &#123;</span><br><span class="line">            last = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定元素-1"><span class="post-title-index">4.2. </span><a href="#删除指定元素-1" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><blockquote><p> 与上面的思路保持一致，需要注意一下三种情况：</p><ul><li>删除中间元素</li><li>当 size == 1 的情况</li><li>当只有一个节点元素</li><li>index = 0, size = 2</li></ul></blockquote><p><strong>case1：删除中间元素</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162152413.gif" alt="动画" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    <span class="comment">// case1：删除中间元素</span></span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    Node&lt;E&gt; prevNode = node.prev;</span><br><span class="line">    Node&lt;E&gt; nextNode = node.next;</span><br><span class="line">    prevNode.next = nextNode;</span><br><span class="line">    nextNode.prev = prevNode;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case2：当 size == 1 的情况</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162308217.png" alt="image-20231116230809190" style="float:left;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="comment">// case2: 当只存在一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">        first = <span class="literal">null</span>;</span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1：删除中间元素</span></span><br><span class="line">        node = node(index);</span><br><span class="line">        Node&lt;E&gt; prevNode = node.prev;</span><br><span class="line">        Node&lt;E&gt; nextNode = node.next;</span><br><span class="line">        prevNode.next = nextNode;</span><br><span class="line">        nextNode.prev = prevNode;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case3：index = 0, size = 2；</strong></p><p><strong>case4：index = 1，size = 2；</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311162316384.png" alt="image-20231116231617348" style="float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="comment">// case2: 当只存在一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">        first = <span class="literal">null</span>;</span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// case1：删除中间元素</span></span><br><span class="line">        node = node(index);</span><br><span class="line">        Node&lt;E&gt; prevNode = node.prev;</span><br><span class="line">        Node&lt;E&gt; nextNode = node.next;</span><br><span class="line">        prevNode.next = nextNode;</span><br><span class="line">        nextNode.prev = prevNode;</span><br><span class="line">        <span class="comment">// case3: index = 0, size = 2</span></span><br><span class="line">        <span class="keyword">if</span> (node == first) &#123;</span><br><span class="line">            first = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// case4: index = 1, size = 2</span></span><br><span class="line">        <span class="keyword">if</span> (node == last) &#123;</span><br><span class="line">            last = prevNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-1"><span class="post-title-index">4.3. </span><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CycleLinkedListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAndGetElement</span><span class="params">()</span> &#123;</span><br><span class="line">        CycleLinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">CycleLinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        assertTrue(list.isEmpty());</span><br><span class="line">        assertEquals(<span class="number">0</span>, list.size());</span><br><span class="line">        </span><br><span class="line">        list.add(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        assertEquals(<span class="number">1</span>, list.size());</span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">10</span>), list.get(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        list.add(<span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">20</span>), list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemoveElement</span><span class="params">()</span> &#123;</span><br><span class="line">        CycleLinkedList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">CycleLinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        assertEquals(Character.valueOf(<span class="string">&#x27;b&#x27;</span>), list.remove(<span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">        assertEquals(Character.valueOf(<span class="string">&#x27;c&#x27;</span>), list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-双向链表</title>
      <link href="/posts/ed3671f0.html"/>
      <url>/posts/ed3671f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/2-LinkedList/src/main/java/com/wickson/linkedlist/doubles">https://github.com/wicksonZhang/data-structure/tree/main/2-LinkedList/src/main/java/com/wickson/linkedlist/doubles</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311142359147.png" alt="双 向 链 表 "></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是双向链表"><span class="post-title-index">2.1. </span><a href="#什么是双向链表" class="headerlink" title="什么是双向链表"></a>什么是双向链表</h3><p>双向链表是单项链表的一个升级版本，由节点中的两个元素升级为了三个元素。第一个元素指向上一个节点的引用，第二个元素存放数据，第三个元素指向下一个节点的引用。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311132259637.png" alt="image-20231113225941450" style="zoom:60%"></p><h3 id="双向链表优缺点"><span class="post-title-index">2.2. </span><a href="#双向链表优缺点" class="headerlink" title="双向链表优缺点"></a>双向链表优缺点</h3><p><strong>优点</strong></p><ol><li>双向遍历：因为存在一个前驱节点和后驱节点，所以可以很方便的进行正向和反向的遍历。</li><li>删除节点：我们删除节点时，通过指向下一个节点的指针找到后一个节点，还可以通过指向前一个节点的指针快速找到前一个节点，使删除操作更高效。</li></ol><p><strong>缺点</strong></p><ol><li>占用一定的存储空间：相比于单向链表，多了一个前驱节点寻找上一个节点的地址。</li></ol><h3 id="生活中的例子"><span class="post-title-index">2.3. </span><a href="#生活中的例子" class="headerlink" title="生活中的例子"></a>生活中的例子</h3><ol><li>共享单车的传动链条</li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><blockquote><p>我们从动态数组中我们可以再次对 <code>List</code> 集合进行优化，我们将公共部分进行封装为 <code>AbstractList</code> 。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311062128650.png" alt="image-20231106212829525" style="zoom:80%;float:left"></p><ul><li><code>List&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;<span class="comment">// 元素数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">// 数组是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span>; <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span>; <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">// 获取指定位置元素</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span>; <span class="comment">// 设置指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span>; <span class="comment">// 将元素添加到指定位置</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">// 删除指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span>; <span class="comment">// 获取元素索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>; <span class="comment">// 清除所有元素</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>AbstractList&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是否为空</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是否包含某个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E e)</span> &#123; <span class="keyword">return</span> indexOf(e) &gt;= <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素到首尾部</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123; add(size, element);</span><br><span class="line">                                </span><br><span class="line"><span class="comment">// 范围检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rangeChecked</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123; indexOutOfBounds(index); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素新增范围检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rangeAddChecked</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) &#123; indexOutOfBounds(index); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组越界异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexOutOfBounds</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>LinkedList&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="初始化"><span class="post-title-index">4.1. </span><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote><p>需求：实现双向链表的初始化。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指向上一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指向下一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node 节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt; 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        </span><br><span class="line">        E element;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取节点"><span class="post-title-index">4.2. </span><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><blockquote><p>需求：通过 <code>index</code> 获取 <code>node</code> 节点。</p></blockquote><p><strong>实现步骤：</strong></p><ul><li>由于目前采取的双向链表，所以相对于可以根据具体的 <code>size &gt;&gt; 1</code> 进行查找。</li><li>首先，我们需要将 <code>size &gt;&gt; 1</code> 。</li><li>然后，根据 <code>index</code> 跟  <code>size &gt;&gt; 1</code> 进行判断，是从前驱节点还是后驱节点进行查找。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 Node 节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查索引范围</span></span><br><span class="line">    rangeChecked(index);</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; node;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;&gt; <span class="number">1</span>) &gt; index) &#123;</span><br><span class="line">        node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">            node = node.prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素到指定位置"><span class="post-title-index">4.3. </span><a href="#添加元素到指定位置" class="headerlink" title="添加元素到指定位置"></a>添加元素到指定位置</h3><blockquote><p>需求：我们需要将元素添加到指定位置。</p><p>注意：分别考虑将元素添加到中间、添加到第一索引位置、最后一个索引位置。</p></blockquote><p><strong>Step-1: 将元素添加到中间</strong></p><ul><li>首先，获取 index 索引的节点，并将前驱节点指向新节点。</li><li>然后，获取 index 索引节点的上一个节点，并将后驱节点指向新节点。</li><li>最后，将新节点的前后指针分别指向上面两个节点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311142114596.gif" alt="动画.gif" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="comment">// 获取 index 索引的节点，并将前驱节点指向新节点</span></span><br><span class="line">    Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">    <span class="comment">// 获取 index 索引节点的上一个节点，并将后驱节点指向新节点</span></span><br><span class="line">    Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">    <span class="comment">// 将新节点的前后指针分别指向上面两个节点</span></span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">    prevNode.next = node;</span><br><span class="line">    nextNode.prev = node;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-2: 将元素添加到第一位</strong></p><ul><li>直接判断原节点的 <code>prev</code> 是否为 <code>null</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311142130921.gif" alt="动画.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="comment">// 获取 index 索引的节点，并将前驱节点指向新节点</span></span><br><span class="line">    Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">    <span class="comment">// 获取 index 索引节点的上一个节点，并将后驱节点指向新节点</span></span><br><span class="line">    Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">    <span class="comment">// 将新节点的前后指针分别指向上面两个节点</span></span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">    nextNode.prev = node;</span><br><span class="line">    <span class="keyword">if</span> (prevNode == <span class="literal">null</span>) &#123; <span class="comment">// 当 prevNode 为 null 时，表示当前节点为第一个节点</span></span><br><span class="line">        first = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prevNode.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-3: 将元素添加到最后一位</strong></p><ul><li>当 <code>index == size</code> 的时候就等于再往最后一个位置在添加元素了。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311142147870.gif" alt="动画.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123; <span class="comment">// index == size 表示往最后一个位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; nextNode = last;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(nextNode, element, <span class="literal">null</span>);</span><br><span class="line">        last = node;</span><br><span class="line">        nextNode.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 index 索引的节点，并将前驱节点指向新节点</span></span><br><span class="line">        Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">        <span class="comment">// 获取 index 索引节点的上一个节点，并将后驱节点指向新节点</span></span><br><span class="line">        Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">        <span class="comment">// 将新节点的前后指针分别指向上面两个节点</span></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">        nextNode.prev = node;</span><br><span class="line">        <span class="keyword">if</span> (prevNode == <span class="literal">null</span>) &#123; <span class="comment">// index == 0</span></span><br><span class="line">            first = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prevNode.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：如果 size 为 0 时，index == size 就会存在问题</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/3009312/1677501088459-49d231db-baad-4280-89fe-89cb14b170f1.png" alt="image.png" style="zoom:100%;float:left"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    <span class="keyword">if</span> (index == size) &#123; <span class="comment">// index == size 表示往最后一个位置添加元素</span></span><br><span class="line">        Node&lt;E&gt; lastNode = last;</span><br><span class="line">        last = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(lastNode, element, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (lastNode == <span class="literal">null</span>) &#123; <span class="comment">// 如果</span></span><br><span class="line">            first = last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lastNode.next = last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 index 索引的节点，并将前驱节点指向新节点</span></span><br><span class="line">        Node&lt;E&gt; nextNode = node(index);</span><br><span class="line">        <span class="comment">// 获取 index 索引节点的上一个节点，并将后驱节点指向新节点</span></span><br><span class="line">        Node&lt;E&gt; prevNode = nextNode.prev;</span><br><span class="line">        <span class="comment">// 将新节点的前后指针分别指向上面两个节点</span></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(prevNode, element, nextNode);</span><br><span class="line">        nextNode.prev = node;</span><br><span class="line">        <span class="keyword">if</span> (prevNode == <span class="literal">null</span>) &#123; <span class="comment">// index == 0</span></span><br><span class="line">            first = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prevNode.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定元素"><span class="post-title-index">4.4. </span><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><blockquote><p>需求：设置指定元素。</p><p>注意事项：需要考虑删除删除中间节点，第一个节点，最后一个节点。</p></blockquote><p><strong>删除中间节点</strong></p><ul><li>具体操作如下</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/gif/3009312/1677578675176-6f03a3ea-fc3e-47e8-9f9e-c1a5966d95f3.gif" alt="动画.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    Node&lt;E&gt; prevNode = node.prev;</span><br><span class="line">    Node&lt;E&gt; nextNode = node.next;</span><br><span class="line">    prevNode.next = nextNode;</span><br><span class="line">    nextNode.prev = prevNode;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-1: 删除第一个元素</strong></p><ul><li>具体操作如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311142310021.gif" alt="动画.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除指定元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    Node&lt;E&gt; prevNode = node.prev;</span><br><span class="line">    Node&lt;E&gt; nextNode = node.next;</span><br><span class="line">    nextNode.prev = prevNode;</span><br><span class="line">    <span class="keyword">if</span> (prevNode == <span class="literal">null</span>) &#123; <span class="comment">// index == 0</span></span><br><span class="line">        first = nextNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prevNode.next = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step-2: 删除最后一个元素</strong></p><ul><li>具体操作如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311142315105.gif" alt="动画.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除指定元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    Node&lt;E&gt; prevNode = node.prev;</span><br><span class="line">    Node&lt;E&gt; nextNode = node.next;</span><br><span class="line">    <span class="keyword">if</span> (nextNode == <span class="literal">null</span>) &#123; <span class="comment">// index == size</span></span><br><span class="line">        last = prevNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nextNode.prev = prevNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prevNode == <span class="literal">null</span>) &#123; <span class="comment">// index == 0</span></span><br><span class="line">        first = nextNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prevNode.next = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置指定位置元素"><span class="post-title-index">4.5. </span><a href="#设置指定位置元素" class="headerlink" title="设置指定位置元素"></a>设置指定位置元素</h3><blockquote><p>需求：设置指定位置元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置指定位置元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldElement</span> <span class="operator">=</span> node.element;</span><br><span class="line">    node.element = element;</span><br><span class="line">    <span class="keyword">return</span> oldElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空元素"><span class="post-title-index">4.6. </span><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><blockquote><p>需求：清空节点所有元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    first = <span class="literal">null</span>;</span><br><span class="line">    last = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取指定位置元素"><span class="post-title-index">4.7. </span><a href="#获取指定位置元素" class="headerlink" title="获取指定位置元素"></a>获取指定位置元素</h3><blockquote><p>需求：根据所有获取到当前节点，然后在获取节点的 <code>element</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定位置元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node(index).element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取元素索引"><span class="post-title-index">4.8. </span><a href="#获取元素索引" class="headerlink" title="获取元素索引"></a>获取元素索引</h3><blockquote><p>需求：获取元素索引。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素索引</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.element == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印元素"><span class="post-title-index">4.9. </span><a href="#打印元素" class="headerlink" title="打印元素"></a>打印元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    builder.append(<span class="string">&quot;&#123; size = &quot;</span>).append(size).append(<span class="string">&quot; , Node = [ &quot;</span>);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(node.element);</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(<span class="string">&quot; ]&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><span class="post-title-index">4.10. </span><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.add(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        linkedList.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        linkedList.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals((Object) <span class="number">1</span>, linkedList.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals((Object) <span class="number">2</span>, linkedList.get(<span class="number">1</span>));</span><br><span class="line">        assertEquals((Object) <span class="number">3</span>, linkedList.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList ===&gt; &quot;</span> + linkedList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.add(<span class="number">0</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="number">1</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">&quot;apple&quot;</span>, linkedList.set(<span class="number">0</span>, <span class="string">&quot;orange&quot;</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;orange&quot;</span>, linkedList.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList ===&gt; &quot;</span> + linkedList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;Character&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.add(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        linkedList.add(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        linkedList.add(<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">&#x27;b&#x27;</span>, (<span class="type">char</span>) linkedList.remove(<span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;&#123; size = 2 , Node = [ a,c ]&#125;&quot;</span>, linkedList.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIndexOf</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.add(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        linkedList.add(<span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line">        linkedList.add(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, linkedList.indexOf(<span class="number">20</span>));</span><br><span class="line">        assertEquals(-<span class="number">1</span>, linkedList.indexOf(<span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClear</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.add(<span class="number">0</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="number">1</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line">        linkedList.clear();</span><br><span class="line">        assertEquals(<span class="string">&quot;&#123; size = 0 , Node = [  ]&#125;&quot;</span>, linkedList.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><span class="post-title-index">5. </span><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="双向链表-VS-单向链表"><span class="post-title-index">5.1. </span><a href="#双向链表-VS-单向链表" class="headerlink" title="双向链表 VS 单向链表"></a>双向链表 VS 单向链表</h3><ul><li>单项链表：单项链表主要解决了内存空间的浪费，也是在数组的基础上进行了一个优化。</li><li>双向链表：作为单向链表的升级版，查询的速度减半了，可以根据索引的大小进行判断是从前驱节点还是后驱节点进行查找，新增了一个节点元素。</li></ul><h3 id="双向链表-VS-动态数组"><span class="post-title-index">5.2. </span><a href="#双向链表-VS-动态数组" class="headerlink" title="双向链表 VS 动态数组"></a>双向链表 VS 动态数组</h3><div class="table-container"><table><thead><tr><th>数据结构</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>动态数组</strong></td><td>开辟、销毁内存空间次数相对较少</td><td>可能造成内存浪费（可缩容解决）</td><td>1. 频繁尾部操作<br>2. 快速查询（随机访问）</td></tr><tr><td><strong>双向链表</strong></td><td>不会造成内存空间的浪费</td><td>开辟、销毁内存空间的次数相对较多</td><td>1. 频繁头部操作<br>2. 任意位置快速操作</td></tr></tbody></table></div><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-单向链表</title>
      <link href="/posts/6ee16213.html"/>
      <url>/posts/6ee16213.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/2-LinkedList/src/main/java/com/wickson/linkedlist/single">https://github.com/wicksonZhang/data-structure/tree/main/2-LinkedList/src/main/java/com/wickson/linkedlist/single</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311092158178.png" alt="01-链表"></p><hr><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是链表"><span class="post-title-index">2.1. </span><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h3><p>链表是一种线性的数据结构，主要存储和组织元素的一个集合节点。</p><h3 id="链表优缺点"><span class="post-title-index">2.2. </span><a href="#链表优缺点" class="headerlink" title="链表优缺点"></a>链表优缺点</h3><p><strong>优点</strong></p><ol><li>链表可以动态管理数据大小：链表可以根据节点动态分配内存，不需要分配固定大小的内存。</li><li>插入和删除的效率高：由于我们插入和删除时，只需要更改节点的指针，而不需要大量移动元素。</li><li>不需要固定容量。</li></ol><p><strong>缺点</strong></p><ol><li>随机访问效率低：当我们查找一个元素时，需要从头找到尾因此最好情况时间复杂度是O(1)，最坏时间复杂度是O(n)。</li><li>不适合高性能计算。</li></ol><h3 id="链表的分类"><span class="post-title-index">2.3. </span><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h3><p>链表的分类存在很多种，但如我们目前只讨论如下三种情况：</p><ol><li><p>单向链表：单向链表是最基本的链表类型，每个节点包含数据和指向下一个节点的引用，节点之间的连接是单向的。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311052136611.png" alt="image-20231105213648546" style="zoom:80%;float:left;"></p></li><li><p>双向链表：双向链表是扩展自单链表的一种，每个节点包含数据、指向下一个节点的引用以及指向前一个节点的引用。节点的连接是双向的。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311052156792.png" alt="image-20231105215614720"></p></li><li><p>循环链表：循环链表是一种链表，其最后一个节点指向第一个节点，形成一个环。这意味着可以无限地循环遍历链表。</p><p>3.1. 单向循环链表：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311052200429.png" alt="image-20231105220007379" style="zoom:65%;float:left"></p><p>3.2. 双向循环链表：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311052210945.png" alt="image-20231105221002863" style="zoom:58%;float:left"></p></li></ol><h3 id="生活中具体的例子"><span class="post-title-index">2.4. </span><a href="#生活中具体的例子" class="headerlink" title="生活中具体的例子"></a>生活中具体的例子</h3><ol><li>火车车厢链接：火车的车厢满足链表这种数据结构。火车有具体的编号，乘客类似于数据，车厢必须要与下一节车厢连接。</li><li>音乐播放列表：音乐播放列表足链表这种数据结构。当前播放的音乐必须知道下一首和上一首歌曲是什么。</li></ol><hr><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><blockquote><p>我们从动态数组中我们可以再次对 <code>List</code> 集合进行优化，我们将公共部分进行封装为 <code>AbstractList</code> 。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311062128650.png" alt="image-20231106212829525" style="zoom:80%;float:left"></p><ul><li><code>List&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;<span class="comment">// 元素数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">// 数组是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span>; <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span>; <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">// 获取指定位置元素</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span>; <span class="comment">// 设置指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span>; <span class="comment">// 将元素添加到指定位置</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">// 删除指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span>; <span class="comment">// 获取元素索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>; <span class="comment">// 清除所有元素</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>AbstractList&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是否为空</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组是否包含某个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E e)</span> &#123; <span class="keyword">return</span> indexOf(e) &gt;= <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素到首尾部</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123; add(size, element);</span><br><span class="line">                                </span><br><span class="line"><span class="comment">// 范围检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rangeChecked</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123; indexOutOfBounds(index); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元素新增范围检查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rangeAddChecked</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) &#123; indexOutOfBounds(index); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组越界异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexOutOfBounds</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>LinkedList&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="初始化"><span class="post-title-index">4.1. </span><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote><p>需求：我们初始化一个原始的链表节点元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311062239087.png" alt="image-20231106223916047" style="zoom:80%;float:left"></p><p><strong>实现步骤</strong></p><ol><li>初始化类 <code>LinkedList&lt;E&gt;</code> ，其中存放两个元素，第一个元素存放 <code>size</code> , 第二个元素指向下一个节点。</li><li>创建节点 <code>Node&lt;E&gt;</code> ，其中也是存放两个元素，第一个元元素存放 <code>element</code>，第二个元素存放下一个节点的引用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指向下个节点的引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        E element;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 指向下一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.element = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取节点"><span class="post-title-index">4.2. </span><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><blockquote><p>需求：通过 <code>index</code> 索引获取 <code>Node</code> 节点。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311062258850.png" alt="image-20231106225817793" style="zoom:70%;"></p><p><strong>实现步骤</strong></p><ol><li>例如，我们需要获取索引为 2 的节点，那就是通过 <code>first.next.next</code> 直接就获取到了索引为 2 的 <code>Node</code> 节点。</li><li>首先，我们找到头节点。</li><li>然后，我们在通过索引的遍历直接找到对应的 <code>Node</code> 节点即可。</li></ol><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node&lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素到指定位置"><span class="post-title-index">4.3. </span><a href="#添加元素到指定位置" class="headerlink" title="添加元素到指定位置"></a>添加元素到指定位置</h3><blockquote><p>需求：我们需要将新的节点添加到节点为 0 的后面</p><p>注意：我们需要考虑添加到 0 节点的位置和最后一个节点的位置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311052310091.gif" alt="动画" style="zoom:70%;"></p><p><strong>实现步骤</strong></p><ol><li>例如，我们需要将新节点(<code>Node</code>)元素添加到 <code>index</code> 为 1 的位置。</li><li>首先，我们需要找到 <code>index</code> 为 1 的节点。</li><li>然后，我们需要将新节点(<code>Node</code>)的 <code>next</code> 指向 <code>index = 1</code> 的节点。</li><li>最后，我们将上一个节点的<code>next</code> 指向 新节点(<code>Node</code>)。</li><li>注意，我们需要考虑 <code>index = 0</code> 的情况。</li></ol><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素到指定位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeAddChecked(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        first = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">        Node&lt;E&gt; nextNode = prevNode.next;</span><br><span class="line">        prevNode.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(element, nextNode);</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置指定位置元素"><span class="post-title-index">4.4. </span><a href="#设置指定位置元素" class="headerlink" title="设置指定位置元素"></a>设置指定位置元素</h3><blockquote><p>需求：设置指定位置元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置指定位置元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    <span class="type">E</span> <span class="variable">old</span> <span class="operator">=</span> node.element;</span><br><span class="line">    node.element = element;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定元素"><span class="post-title-index">4.5. </span><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h3><blockquote><p>需求：我们删除 <code>index=1</code> 这个元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311062205681.gif" alt="动画" style="zoom:80%;"></p><p><strong>实现步骤</strong></p><ol><li>例如，我们需要删除 <code>index</code> 为 1 的节点。</li><li>首先，我们获取当前节点信息。【node(index)】</li><li>然后，我们获取到当前节点的下一个节点信息。【node(index).next】</li><li><p>最后，我们获取当前节点的上一个节点信息，指向当前节点的下一个节点。【node(index - 1).next = node(index).next】</p></li><li><p>注意，我们需要考虑 <code>index = 0</code> 的情况。</p></li></ol><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除指定元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeChecked(index);</span><br><span class="line">    </span><br><span class="line">    Node&lt;E&gt; node = node(index);</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; prevNode = node(index - <span class="number">1</span>);</span><br><span class="line">        prevNode.next = prevNode.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> node.element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空元素"><span class="post-title-index">4.6. </span><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h3><blockquote><p>需求：清空所有元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    first = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取指定位置元素"><span class="post-title-index">4.7. </span><a href="#获取指定位置元素" class="headerlink" title="获取指定位置元素"></a>获取指定位置元素</h3><blockquote><p>需求：获取指定位置元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定位置元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node(index).element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取元素索引"><span class="post-title-index">4.8. </span><a href="#获取元素索引" class="headerlink" title="获取元素索引"></a>获取元素索引</h3><blockquote><p>需求：根据给定的元素，找到对应的索引</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素索引</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == node.element) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印元素"><span class="post-title-index">4.9. </span><a href="#打印元素" class="headerlink" title="打印元素"></a>打印元素</h3><blockquote><p>需求：打印节点元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    builder.append(<span class="string">&quot;&#123; size = &quot;</span>).append(size).append(<span class="string">&quot; , [&quot;</span>);</span><br><span class="line">    Node&lt;E&gt; node = first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(node.element);</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(<span class="string">&quot; ]&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><span class="post-title-index">4.10. </span><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddToEmptyList</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;A&quot;</span>, list.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="number">1</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddToNonEmptyList</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;A&quot;</span>, list.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;C&quot;</span>, list.get(<span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;B&quot;</span>, list.get(<span class="number">2</span>));</span><br><span class="line">        assertEquals(<span class="number">3</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;A&quot;</span>, list.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;B&quot;</span>, list.get(<span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;C&quot;</span>, list.get(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;A&quot;</span>, list.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;C&quot;</span>, list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">removedElement</span> <span class="operator">=</span> list.remove(<span class="number">1</span>);</span><br><span class="line">        assertEquals(<span class="string">&quot;B&quot;</span>, removedElement);</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">        assertEquals(<span class="string">&quot;A&quot;</span>, list.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;C&quot;</span>, list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIndexOf</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        list.add(<span class="number">3</span>, <span class="literal">null</span>);</span><br><span class="line">        assertEquals(<span class="number">1</span>, list.indexOf(<span class="string">&quot;B&quot;</span>));</span><br><span class="line">        assertEquals(<span class="number">3</span>, list.indexOf(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClear</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        list.clear();</span><br><span class="line">        assertEquals(<span class="number">0</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = IndexOutOfBoundsException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetWithInvalidIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        list.get(<span class="number">0</span>); <span class="comment">// Expecting an exception since the list is empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = IndexOutOfBoundsException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSetWithInvalidIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>); <span class="comment">// Expecting an exception since the list is empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = IndexOutOfBoundsException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemoveWithInvalidIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>); <span class="comment">// Expecting an exception since the list is empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printf</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;toString() = &quot;</span> + list.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实战练习"><span class="post-title-index">5. </span><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><blockquote><p>如下练习题主要来源于 <a href="https://leetcode.cn/">LeetCode</a></p></blockquote><h3 id="删除链表中的节点"><span class="post-title-index">5.1. </span><a href="#删除链表中的节点" class="headerlink" title="删除链表中的节点"></a>删除链表中的节点</h3><blockquote><p>地址：<a href="https://leetcode.cn/problems/delete-node-in-a-linked-list/description/">https://leetcode.cn/problems/delete-node-in-a-linked-list/description/</a></p></blockquote><ul><li><p>需求如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311072209175.png" alt="image-20231107220904126" style="zoom:80%;float:left;"></p></li></ul><ul><li>实现方案：<ul><li>方案一：如果能获取到当前节点【5】的上一个节点【4】，然后再通过节点【4】指向下下个节点【1】，就解决问题了，但我们无法获取到节点【4】。</li><li>方案二（实践方案）：如果我们不走节点，而是移动节点内的元素，这个问题就很好解决了。</li></ul></li><li>实现步骤：<ul><li>Step-1：我们将当前节点【5】(的下一个节点【1】元素覆盖掉当前节点【5】元素。==》 <code>node.element = node.next.element;</code></li><li>Step-2：我们在将当前节点【1】指向到下下个节点【9】。 ==》 <code>node.next= node.next.next;</code></li></ul></li><li>实现代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">    node.val = node.next.val;</span><br><span class="line">    node.next = node.next.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转一个链表"><span class="post-title-index">5.2. </span><a href="#反转一个链表" class="headerlink" title="反转一个链表"></a>反转一个链表</h3><blockquote><p>地址：<a href="https://leetcode.cn/problems/reverse-linked-list/description/">https://leetcode.cn/problems/reverse-linked-list/description/</a></p></blockquote><ul><li><p>需求如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311072309566.png" alt="image-20231107230902530" style="zoom:80%;float:left;"></p></li></ul><ul><li><p>实现方式：</p><ul><li>方式一（递归法）：递归就是自己调用自己，其核心思想是反转剩余部分的链表，然后再处理当前节点。</li><li>方式二（迭代法）：通过改变当前节点的下一指针指向,实现局部反转,再通过移动节点顺序扩展到全局反转。</li></ul></li></ul><h4 id="递归法"><span class="post-title-index">5.2.1. </span><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><ul><li><p>实现步骤：</p><ul><li>思路：递归分为两个部分，第一个部分是寻找出口，第二个部分是处理拆分后每个节点的逻辑。</li><li>Step-1：首先，我们的出口应该满足当前节点为空，或者当前节点的 next 为空。 <code>head == null || head.next == null</code>。</li><li>Step-2：然后，我们在处理逻辑部分，首先我们需要知道那个节点先出来。 <code>head -&gt; ListNode&#123;val=4, next=ListNode&#123;val=5, next=null&#125;&#125;</code>。</li><li>Step-3：最后，处理共同的逻辑。<code>head.next.next = head</code>、<code>head.next = null</code>。</li></ul></li></ul><ul><li>代码实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_206_</span>反转链表 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求：反转链表</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * list：   1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null</span></span><br><span class="line"><span class="comment">     * reverse：5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归反分为两部分：第一部分找到程序出口，第二部分处理核心逻辑</span></span><br><span class="line">        <span class="comment">// ================================= 寻找出口 =================================</span></span><br><span class="line">        <span class="comment">// 1. 为什么 reverseList(head) 是从 head.next 开始，而不是从 head 开始？</span></span><br><span class="line">        <span class="comment">// &gt;  如果从 head 开始我们最后的结果就是死循环。</span></span><br><span class="line">        <span class="comment">// &gt;  解决方案： head.next。</span></span><br><span class="line">        <span class="comment">// &gt;  递归的核心思想是反转剩余部分的链表，然后再处理当前节点。</span></span><br><span class="line">        <span class="comment">// ================================= 寻找出口 =================================</span></span><br><span class="line">        <span class="comment">// Step-1: 寻找出口</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;head = &quot;</span> + head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">listNode</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// ================================= 逻辑处理 =================================</span></span><br><span class="line">        <span class="comment">// 1. listNode 返回的又是谁？head 最后指向的是谁？</span></span><br><span class="line">        <span class="comment">// &gt;  listNode -&gt; ListNode&#123;val=5, next=null&#125;;</span></span><br><span class="line">        <span class="comment">// &gt;  head -&gt; ListNode&#123;val=4, next=ListNode&#123;val=5, next=null&#125;&#125;.</span></span><br><span class="line">        <span class="comment">// ================================= 逻辑处理 =================================</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> listNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代法"><span class="post-title-index">5.2.2. </span><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h4><p>实现步骤：</p><ul><li><p>进入的数据：<code>ListNode&#123;val=1, next=ListNode&#123;val=2, next=null&#125;&#125;</code></p></li><li><p>定义一个临时节点 <code>tempNode</code> 初始化为null</p></li><li>当头节点head不为空时,进入循环</li><li>保存head的下一个节点为 <code>nextNode</code></li><li>将head的next指针指向 <code>tempNode</code> 实现局部反转</li><li>将head赋值给 <code>tempNode</code> 保存反转后的部分链表</li><li>head移动到 <code>nextNode</code> 继续下一次反转</li><li>循环结束后 <code>tempNode</code> 指向反转后的链表</li><li>返回 <code>tempNode</code> 作为新链表的头节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList2</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = tempNode;</span><br><span class="line">        tempNode = head;</span><br><span class="line">        head = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环形链表"><span class="post-title-index">5.3. </span><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><blockquote><p>地址：<a href="https://leetcode.cn/problems/linked-list-cycle/">https://leetcode.cn/problems/linked-list-cycle/</a></p></blockquote><ul><li>需求如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311082340326.png" alt="image-20231108234019283" style="zoom:80%;float:left"></p><ul><li><p>实现方式</p><ul><li>快慢指针：通过快慢指针进行解决问题，例如在一个操场跑步，一个快一个慢，他们总会相遇。</li></ul></li><li><p>实现步骤</p><ul><li><strong>主要使用快慢指针进行实现，慢指针走一步，快指针走两步，如果存在环那么他们一定会相遇。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311082344765.gif" alt="动画" style="zoom:100%;float:left;"></p></li><li><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">  <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="参考博文"><span class="post-title-index">6. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li><li><a href="https://www.cnblogs.com/dev-liu/p/15150356.html">算法入门 - 动态数组的实现（Java版本）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-动态数组</title>
      <link href="/posts/97be0b4e.html"/>
      <url>/posts/97be0b4e.html</url>
      
        <content type="html"><![CDATA[<h2 id="内容大纲"><span class="post-title-index">1. </span><a href="#内容大纲" class="headerlink" title="内容大纲"></a>内容大纲</h2><blockquote><p>本章节的代码：<a href="https://github.com/wicksonZhang/data-structure/tree/main/1-ArrayList">https://github.com/wicksonZhang/data-structure/tree/main/1-ArrayList</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311092109212.png" alt="动态数组" style="zoom:100%;float:left"></p><h2 id="基础知识"><span class="post-title-index">2. </span><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是动态数组？"><span class="post-title-index">2.1. </span><a href="#什么是动态数组？" class="headerlink" title="什么是动态数组？"></a>什么是动态数组？</h3><p>动态数组是一种数据结构，在程序运行过程中动态添加或删除数组的容量，使数组的容量可以动态的发生改变。</p><h3 id="动态数组优缺点"><span class="post-title-index">2.2. </span><a href="#动态数组优缺点" class="headerlink" title="动态数组优缺点"></a>动态数组优缺点</h3><p><strong>优点</strong></p><ol><li><strong>容量动态改变</strong>：动态数组可以在需要时自动增加或减少容量，以适应数据的大小。</li><li><strong>随机访问速度</strong>：由于数据在内存中是连续存储的，因此可以以常量时间访问任何元素，使其具有快速的随机访问速度。</li><li><strong>连续内存</strong>：动态数组的元素在内存中是连续存储的，这可以提高缓存的命中率，提高性能。</li></ol><p><strong>缺点</strong></p><ol><li>不适合频繁的插入和删除</li></ol><h3 id="应用场景"><span class="post-title-index">2.3. </span><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>购物车：用于存储购物车中的商品列表，容量可以根据添加商品的数量动态调整。</li><li>待办清单：用于存储待办任务列表，随着添加或完成任务的变化，清单的大小可以动态变化。</li></ol><h2 id="接口设计"><span class="post-title-index">3. </span><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><blockquote><p>我们主要是模仿 <code>java</code> 中的 <code>java.util.ArrayList</code> 集合进行设计</p></blockquote><ul><li><code>List&lt;E&gt;.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;<span class="comment">// 元素数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">// 数组是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E element)</span>; <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span>; <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">// 获取指定位置元素</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span>; <span class="comment">// 设置指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span>; <span class="comment">// 将元素添加到指定位置</span></span><br><span class="line"></span><br><span class="line">    E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">// 删除指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E element)</span>; <span class="comment">// 获取元素索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>; <span class="comment">// 清除所有元素</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ArrayList.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><span class="post-title-index">4. </span><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="默认初始容量"><span class="post-title-index">4.1. </span><a href="#默认初始容量" class="headerlink" title="默认初始容量"></a>默认初始容量</h3><blockquote><p>主要包括成员变量、构造器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态数组的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认初始容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认初始容量为10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始容量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity 初始容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span> + initialCapacity);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            elements = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            elements = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素数量"><span class="post-title-index">4.2. </span><a href="#元素数量" class="headerlink" title="元素数量"></a>元素数量</h3><blockquote><p>这里元素的数量就是指的当前 <code>size</code> 大小</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组是否为空"><span class="post-title-index">4.3. </span><a href="#数组是否为空" class="headerlink" title="数组是否为空"></a>数组是否为空</h3><blockquote><p>数组是否为空指的是当前 <code>size</code> 是否为 0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取指定位置元素"><span class="post-title-index">4.4. </span><a href="#获取指定位置元素" class="headerlink" title="获取指定位置元素"></a>获取指定位置元素</h3><blockquote><p>注意：获取指定位置的元素时，需要保证 <code>index</code> 不能小于0 或者 大于 <code>size</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定位置元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 元素下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置指定位置元素"><span class="post-title-index">4.5. </span><a href="#设置指定位置元素" class="headerlink" title="设置指定位置元素"></a>设置指定位置元素</h3><blockquote><p>注意：由于我们是需要返回原来指定位置的元素，所以需要将之前索引位置的元素取出来，然后在进行赋值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置指定位置元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element     元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldElement</span> <span class="operator">=</span> elements[index];</span><br><span class="line">    elements[index] =  element;</span><br><span class="line">    <span class="keyword">return</span> oldElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取元素索引"><span class="post-title-index">4.6. </span><a href="#获取元素索引" class="headerlink" title="获取元素索引"></a>获取元素索引</h3><blockquote><p>注意：需要对元素进行判断，当元素分别为 <code>null</code> 或者不为 <code>null</code> 的情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素索引</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element[i].equals(e)) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组是否包含某个元素"><span class="post-title-index">4.7. </span><a href="#数组是否包含某个元素" class="headerlink" title="数组是否包含某个元素"></a>数组是否包含某个元素</h3><blockquote><p>判断数组是否包含某个元素是基于 <code>indexOf(Element e)</code> 进行开发的，如果找不到元素则返回 -1 ，所以我们只要判断结果大于0，就说明找到元素了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组是否包含某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(e) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清除所有元素"><span class="post-title-index">4.8. </span><a href="#清除所有元素" class="headerlink" title="清除所有元素"></a>清除所有元素</h3><blockquote><p>如果直接让 size = 0，已经明确了外部获取不到任何值。但让数组内的元素置为 <code>null</code> 可以更好的让 <code>GC</code> 进行回收</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 让数组中的元素为 null，等待 GC 回收</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        element[i] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><span class="post-title-index">4.9. </span><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="添加元素到指定位置"><span class="post-title-index">4.9.1. </span><a href="#添加元素到指定位置" class="headerlink" title="添加元素到指定位置"></a>添加元素到指定位置</h4><blockquote><p>需求：我们需要将新元素添加数组中 <code>index=2</code> 的位置。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311012146231.gif" alt="动画" style="zoom:67%;float:left;"></p><p><strong>实现步骤</strong></p><ul><li>index：指的是元素下标。</li><li>size：指的是当前数组中存在元素个数。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">步骤</th><th style="text-align:center">index</th><th style="text-align:center">size</th><th>操作</th><th>代码</th></tr></thead><tbody><tr><td style="text-align:center">Step-1</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td>将倒数第一位元素向后移动一位</td><td><code>elements[index + 1] = elements[index]</code></td></tr><tr><td style="text-align:center">Step-2</td><td style="text-align:center">3</td><td style="text-align:center">5</td><td>将倒数第二位元素向后移动一位</td><td><code>elements[index + 1] = elements[index]</code></td></tr><tr><td style="text-align:center">Step-3</td><td style="text-align:center">2</td><td style="text-align:center">5</td><td>将倒数第三位元素向后移动一位</td><td><code>elements[index + 1] = elements[index]</code></td></tr></tbody></table></div><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加到指定位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">        elements[i + <span class="number">1</span>] = elements[i];</span><br><span class="line">    &#125;</span><br><span class="line">    elements[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加元素到首尾部"><span class="post-title-index">4.9.2. </span><a href="#添加元素到首尾部" class="headerlink" title="添加元素到首尾部"></a>添加元素到首尾部</h4><blockquote><p>需求：我们需要将新的元素添加数组到首尾部。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311012154926.png" alt="img" style="zoom:100%;float:left"></p><p><strong>实现步骤</strong></p><ul><li>Step-1：当 <code>size = 0</code> ，我们需要在 <code>index = 0</code> 的位置插入元素，需要将 <code>elements[size] = element</code>，然后 <code>size++</code>。</li><li>Step-2：当 <code>size = 5</code> ，我们需要在 <code>index = 5</code> 的位置插入元素，需要将 <code>elements[size] = element</code>，然后 <code>size++</code>。</li><li>Step-3：其实本质上 我们还是相当于在操作 <code>add(int index, Object element)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素到首尾部</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    elements[size++] = element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><span class="post-title-index">4.10. </span><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><blockquote><p>需求：我们需要删除 <code>index = 3</code> 的元素</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311020009415.gif" alt="动画" style="zoom:67%;float:left"></p><p><strong>实现步骤</strong></p><ul><li>index：指的是元素下标。</li><li>size：指的是当前数组中存在元素个数。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">步骤</th><th style="text-align:center">index</th><th style="text-align:center">size</th><th>操作</th><th>代码</th></tr></thead><tbody><tr><td style="text-align:center">Step-1</td><td style="text-align:center">4</td><td style="text-align:center">6</td><td>将倒数第三位元素向前移动一位</td><td><code>elements[index - 1] = elements[index]</code></td></tr><tr><td style="text-align:center">Step-2</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td>将倒数第二位元素向前移动一位</td><td><code>elements[index - 1] = elements[index]</code></td></tr><tr><td style="text-align:center">Step-3</td><td style="text-align:center">6</td><td style="text-align:center">6</td><td>将倒数第一位元素向前移动一位</td><td><code>elements[index - 1] = elements[index]</code></td></tr></tbody></table></div><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldElement</span> <span class="operator">=</span> elements[index];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index + <span class="number">1</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将空出来的元素置为 null ，等待 GC 回收</span></span><br><span class="line">    elements[--size] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> oldElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印数组"><span class="post-title-index">4.11. </span><a href="#打印数组" class="headerlink" title="打印数组"></a>打印数组</h3><blockquote><p>需求：我们需要根据数组的内容打印数组信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">printf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;ArrayList&#123; size = &quot;</span>)</span><br><span class="line">                .append(size)</span><br><span class="line">                .append(<span class="string">&quot; , elements = [ &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            builder.append(elements[i]);</span><br><span class="line">            <span class="keyword">if</span> (i != (size - <span class="number">1</span>)) &#123;</span><br><span class="line">                builder.append(<span class="string">&quot; , &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">&quot; ] &#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组扩容"><span class="post-title-index">4.12. </span><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><blockquote><p>需求：由于我们默认的数组容量大小是 10 ，如果超过了 10 就需要进行扩容。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311022255303.gif" alt="img"></p><p><strong>实现步骤</strong></p><ul><li>Step-1：首先，新增元素时，我们判断当前容量是否需要扩容。</li><li>Step-2：然后，根据当前容量大小，重新申请一块新的内存空间用来存放数组。</li><li>Step-3：然后，将原来的数组元素拷贝到新数组中。</li><li>Step-4：最后，再将老数组的地址指向新的数组。</li></ul><p><strong>具体代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加到指定位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span> + index + <span class="string">&quot;, Size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">        elements[i + <span class="number">1</span>] = elements[i];</span><br><span class="line">    &#125;</span><br><span class="line">    elements[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组扩容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity 当前容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity - elements.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> capacity + (capacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        E[] newElement = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElement[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元测试"><span class="post-title-index">5. </span><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInitialCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">0</span>, arrayList.size());</span><br><span class="line">        assertTrue(arrayList.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAndSize</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">5</span>);</span><br><span class="line">        arrayList.add(<span class="number">10</span>);</span><br><span class="line">        arrayList.add(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">3</span>, arrayList.size());</span><br><span class="line">        assertFalse(arrayList.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">7</span>);</span><br><span class="line">        arrayList.add(<span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">7</span>, arrayList.get(<span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="number">14</span>, arrayList.get(<span class="number">1</span>));</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, () -&gt; arrayList.get(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">20</span>);</span><br><span class="line">        arrayList.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">20</span>, arrayList.set(<span class="number">0</span>, <span class="number">25</span>));</span><br><span class="line">        assertEquals(<span class="number">25</span>, arrayList.get(<span class="number">0</span>));</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, () -&gt; arrayList.set(<span class="number">2</span>, <span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddAtIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">100</span>);</span><br><span class="line">        arrayList.add(<span class="number">200</span>);</span><br><span class="line">        arrayList.add(<span class="number">1</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">3</span>, arrayList.size());</span><br><span class="line">        assertEquals(<span class="number">150</span>, arrayList.get(<span class="number">1</span>));</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, () -&gt; arrayList.add(<span class="number">5</span>, <span class="number">500</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">2</span>);</span><br><span class="line">        arrayList.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">2</span>, arrayList.remove(<span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="number">2</span>, arrayList.size());</span><br><span class="line">        assertEquals(<span class="number">3</span>, arrayList.get(<span class="number">1</span>));</span><br><span class="line">        assertThrows(IndexOutOfBoundsException.class, () -&gt; arrayList.remove(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIndexOf</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">11</span>);</span><br><span class="line">        arrayList.add(<span class="number">22</span>);</span><br><span class="line">        arrayList.add(<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, arrayList.indexOf(<span class="number">22</span>));</span><br><span class="line">        assertEquals(-<span class="number">1</span>, arrayList.indexOf(<span class="number">44</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClear</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="number">8</span>);</span><br><span class="line">        arrayList.add(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        assertFalse(arrayList.isEmpty());</span><br><span class="line">        arrayList.clear();</span><br><span class="line">        assertTrue(arrayList.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><span class="post-title-index">6. </span><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>总体来说，动态数组这个数据结构不算过于复杂。但在 新增元素、删除元素、动态扩容 这几个部分还是需要主要一下的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202311092126386.png" alt="image-20231109212650317" style="zoom:60%;float:left"></p><h2 id="参考博文"><span class="post-title-index">7. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul><li><a href="https://ke.qq.com/course/385223#term_id=100509723">恋上数据结构与算法(第一季)-MJ大神精选</a></li><li><a href="https://www.cnblogs.com/dev-liu/p/15150356.html">算法入门 - 动态数组的实现（Java版本）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-源码解析（二）</title>
      <link href="/posts/b1132c7d.html"/>
      <url>/posts/b1132c7d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>我们讲解的方式为由浅入深，一定要对框架有一个大概的认识才慢慢去了解其中的具体细节。</p></blockquote><p>本章节讲解的内容主要分为如下四个板块：</p><ul><li><code>Mybatis</code> 架构解析</li><li><code>Mybatis</code> 生命周期</li><li><code>Mybatis</code> 源码分析</li><li><code>Mybatis</code> 设计模式</li></ul><hr><h2 id="Mybatis-架构解析"><span class="post-title-index">2. </span><a href="#Mybatis-架构解析" class="headerlink" title="Mybatis 架构解析"></a><code>Mybatis</code> 架构解析</h2><p>我们一般把 <code>Mybatis</code> 的功能架构分为三层：</p><ul><li><strong><code>API</code> 接口层</strong>：提供给外部使用的接口 <code>API</code>，开发人员通过这些本地 <code>API</code> 来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li><strong>数据处理层</strong>：它主要的目的是根据调用的请求完成一次数据库操作，负责具体的 <strong><code>SQL</code> 查找</strong>、<strong><code>SQL</code> 解析</strong>、<strong><code>SQL</code> 执行</strong>和执行<strong>结果映射处理</strong>等。</li><li><strong>基础支撑层</strong>：为上层的数据处理层提供最基础的支撑，负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308242254295.png" alt="在这里插入图片描述" style="zoom:90%;float:left;"></p><p><strong>代码示例</strong></p><ul><li>从配置文件（通常是XML文件）得到 <code>SessionFactory</code> ; </li><li>从 <code>SessionFactory</code> 得到 <code>SqlSession</code>；</li><li>通过 <code>SqlSession</code> 进行 <code>CRUD</code> 和事务的操作；</li><li>执行完相关操作之后关闭 <code>Session</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 从 XML 中构建 SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将XML配置文件构建为Configuration配置</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过加载配置文件流构建一个SqlSessionFactory DefaultSqlSessionFactor</span></span><br><span class="line">    sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">// 数据源 执行器 DefaultSqlSession</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">        List&lt;Employee&gt; employees = mapper.listByEmployee();</span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Mybatis-生命周期"><span class="post-title-index">3. </span><a href="#Mybatis-生命周期" class="headerlink" title="Mybatis 生命周期"></a><code>Mybatis</code> 生命周期</h2><p><code>Mybatis</code> 生命周期大概分为如下几步：</p><ol><li><p><strong><code>Configuration</code></strong> 实例化阶段</p><ul><li>当应用启动时，<code>MyBatis</code> 会读取配置文件（如 <code>mybatis-config.xml</code>）并创建一个 <code>Configuration</code> 对象。这个对象包含了 <code>MyBatis</code> 的全局配置信息，包括数据库连接信息、对象映射配置、插件等。</li></ul></li><li><p><strong><code>SqlSessionFactory</code> </strong>的创建</p><ul><li>在 <code>Configuration</code> 对象被创建后，<code>MyBatis</code> 会基于配置信息构建一个 <code>SqlSessionFactory</code> 对象。<code>SqlSessionFactory</code> 是一个线程安全的工厂类，用于创建 <code>SqlSession</code> 实例。</li></ul></li><li><p><strong><code>SqlSession</code> </strong>的生命周期</p><ul><li><code>SqlSession</code> 是 <code>MyBatis</code> 中用于执行 <code>SQL</code> 语句的核心对象。它的生命周期是短暂的，每次需要与数据库进行交互时，都会创建一个新的 <code>SqlSession</code> 对象。在完成操作后，需要显式地关闭 <code>SqlSession</code>，释放相关资源。</li></ul></li><li><p><strong>Mapper</strong> 接口的代理对象</p><ul><li>在 <code>MyBatis</code> 中，可以使用 Mapper 接口来定义 <code>SQL</code> 映射操作。<code>MyBatis</code> 会为每个 <code>Mapper</code> 接口创建一个代理对象，该代理对象通过 <code>SqlSession</code> 来执行具体的 <code>SQL</code> 操作。</li></ul></li><li><p><strong>执行 <code>SQL</code> 操作</strong></p><ul><li>通过 <code>SqlSession</code> 或 Mapper 接口的代理对象，可以执行各种 <code>SQL</code> 操作，包括查询、插入、更新、删除等。</li></ul></li><li><p><strong>事务管理</strong></p><ul><li>在需要进行事务操作时，可以通过配置来启用 <code>MyBatis</code> 的事务管理。</li></ul></li><li><p><strong>插件拦截器</strong></p><ul><li><code>MyBatis</code> 允许通过插件来扩展其功能。插件可以拦截 <code>MyBatis</code> 的核心组件，如 <code>Executor</code>、<code>StatementHandler</code>、<code>ParameterHandler</code>、<code>ResultSetHandler</code> 等，在其执行过程中添加自定义逻辑。</li></ul></li><li><p><strong>资源释放</strong></p><ul><li>在应用关闭时，需要显式地关闭 <code>SqlSessionFactory</code>，释放相关的数据库连接和资源，以避免内存泄漏。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308251111886.png" alt="MyBatis主要组件生命周期"></p><hr><h2 id="Mybatis-源码分析"><span class="post-title-index">4. </span><a href="#Mybatis-源码分析" class="headerlink" title="Mybatis 源码分析"></a><code>Mybatis</code> 源码分析</h2><blockquote><p>我们采用的 <code>Mybatis 3.4.3</code> 进行分析，这样我们就可以在源码的基础上添加注释信息。该部分的源码分析主要是围绕着全局配置文件进行的分析。</p><p>参考博文：</p><p><a href="https://www.cnblogs.com/mokingone/p/9108999.html">mybatis 源码导入IDEA - 未亦末 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/RunningSnails/p/17169489.html">https://www.cnblogs.com/RunningSnails/p/17169489.html</a></p></blockquote><h3 id="源码编译"><span class="post-title-index">4.1. </span><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><blockquote><p>如果需要编译源码需要下载两个部分的源码</p></blockquote><ul><li>将源码下载下来之后将【<code>mybatis-parent-31</code>】进行编译</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308251227085.png" alt="image-20230825122725045" style="zoom:100%;float:left"></p><ul><li>然后编译【<code>mybatis-3-mybatis-3.5.4</code>】</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line"></span><br><span class="line">mvn install -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>可能会遇到的问题</strong></p><ol><li><p>由于本人从<code>git</code> 下载的 <code>zip</code> 版本，编译的时候出现如下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failure occured while calling class com.mycila.maven.plugin.license.git.CopyrightRangeProvider</span><br></pre></td></tr></table></figure><ul><li>解决方案</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>然后出现如下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pdf-plugin:1.4:pdf (pdf) on project mybatis: Error during document generation: Error parsing D:\idea-project\mybatis-3.5.3\mybatis-3-mybatis-3.5.4\target\pdf\site.tmp\xdoc\getting-started.xml: Error parsing the model: only whitespace content allowed before start tag and not \ufeff (position: COMMENT seen ...rning permissions and\n       limitations under the License.\n\n--&gt;\n\ufeff... @18:2)</span><br></pre></td></tr></table></figure><ul><li>解决方案，将 <code>mybatis-3-mybatis-3.5.4</code> 中的 <code>pom.xml</code> 如下注释</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--      &lt;plugin&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;artifactId&gt;maven-pdf-plugin&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;/plugin&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>编译成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308251352591.png" alt="image-20230825135203547"></p><h3 id="引入依赖"><span class="post-title-index">4.2. </span><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><blockquote><p>我们在《<a href="http://localhost:4000/posts/7a56d0fb.html">Mybatis-基础知识（一）</a>》基础上进行开发，则需要重新引入本地编译好的 <code>Mybatis 3.5.4</code> 版本</p></blockquote><ul><li>修改 <code>mybatis 3.5.4</code> 的版本号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4-xsls<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在需要引用的项目中添加引用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308251614446.png" alt="image-20230825161438391"></p><ul><li>如果报错 <code>java.lang.NoClassDefFoundError: ognl/PropertyAccessor</code> , 则添加如下依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="源码分析"><span class="post-title-index">4.3. </span><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Mybatis-启动流程"><span class="post-title-index">4.3.1. </span><a href="#Mybatis-启动流程" class="headerlink" title="Mybatis 启动流程"></a><code>Mybatis</code> 启动流程</h4><ul><li>代码示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 从 XML 中构建 SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>UML</code> 时序图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202309071511946.png" alt="image-20230907151134759" style="zoom:100%;"></p><ul><li><code>gif</code> 源码追踪</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202309071520451.gif" alt="动画"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-基础知识（一）</title>
      <link href="/posts/7a56d0fb.html"/>
      <url>/posts/7a56d0fb.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><code>Mybatis</code> 的基础知识以及相关用法因为在工作工作过程中天天都在使用，本来不打算写的。但在看 <code>Mybatis</code> 的源码过程中发现很多地方都对 <code>XML</code> 在解析，还是觉得有必要记录一下 <code>Mybatis</code> 的基本概念。</p></blockquote><hr><h2 id="Mybatis-基本概念"><span class="post-title-index">2. </span><a href="#Mybatis-基本概念" class="headerlink" title="Mybatis 基本概念"></a><code>Mybatis</code> 基本概念</h2><blockquote><p><code>Mybatis</code> : <a href="https://mybatis.org/mybatis-3/zh/index.html">官网地址</a></p><p><code>Mybatis</code> 是一款优秀的 持久层框架/半自动 的 <code>ORM</code> 框架，半自动的原因是因为 移植性不行，例如 <code>Oracle</code> 转 <code>MySQL</code> 就会存在大量关键字不可用。</p></blockquote><p><strong>优点</strong></p><ul><li>与 <code>JDBC</code> 相比，减少了50%的代码量。（加载驱动、获取数据库链接、设置参数和获取结果集等）</li><li>上手简单，学习成本很低。</li><li>实现了代码与 <code>SQL</code> 的解耦（提供XML标签，支持编写动态<code>SQL</code>）</li></ul><p><strong>缺点</strong></p><ul><li><p><code>SQL</code> 语句编写工作量大，熟练度要高（针对传统的金融业务，有时可能一个简单的业务也要关联七八张表）</p></li><li><p>数据库移植性比较差，如果需要切换数据库的话，<code>SQL</code> 语句会有很大的差异</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;postgresql&#x27;&quot;</span>&gt;</span></span><br><span class="line">    to_char(creation_time, &#x27;yyyy-MM-dd&#x27;) creation_time,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">    to_char(creation_time, &#x27;yyyy-MM-dd&#x27;) creation_time,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;mysql&#x27;&quot;</span>&gt;</span></span><br><span class="line">    date_format(creation_time, &#x27;%Y-%m-%d&#x27;) creation_time,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Mybatis-快速入门"><span class="post-title-index">3. </span><a href="#Mybatis-快速入门" class="headerlink" title="Mybatis 快速入门"></a><code>Mybatis</code> 快速入门</h2><blockquote><p>总体来说上手成本还是挺低的，比较简单。后面我们一般会集成到 <code>Spring</code> 中，不会像如下这样操作。</p></blockquote><p><strong>目录结构如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308181218673.png" alt="image-20230818121811649" style="float:left"></p><p><strong>具体步骤如下</strong></p><ul><li>导入依赖</li><li>创建数据表</li><li>创建实体对象</li><li>创建Mapper接口</li><li>编写配置文件</li><li>编写测试类</li></ul><h3 id="导入依赖"><span class="post-title-index">3.1. </span><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><ul><li><code>pom.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建数据表"><span class="post-title-index">3.2. </span><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><ul><li><code>emp.sql</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表语句</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新增语句</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp ( id, username )</span><br><span class="line"><span class="keyword">VALUES</span> ( <span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span> ), ( <span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span> ), ( <span class="number">3</span>, <span class="string">&#x27;Tony&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建实体对象"><span class="post-title-index">3.3. </span><a href="#创建实体对象" class="headerlink" title="创建实体对象"></a>创建实体对象</h3><ul><li><code>employee.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略 Setter/Getter</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Mapper接口"><span class="post-title-index">3.4. </span><a href="#创建Mapper接口" class="headerlink" title="创建Mapper接口"></a>创建Mapper接口</h3><ul><li><code>EmployeeMapper.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有 Employee 信息</span></span><br><span class="line">    List&lt;Employee&gt; <span class="title function_">listByEmployee</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据id查询</span></span><br><span class="line">    Employee <span class="title function_">selectEmployee</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    Integer <span class="title function_">insertEmployee</span><span class="params">(Employee emp)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    Integer <span class="title function_">updateEmployee</span><span class="params">(Employee emp)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    Integer <span class="title function_">deleteEmployee</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写配置文件"><span class="post-title-index">3.5. </span><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><ul><li><code>mybatis-config.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库环境配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 使用 JDBC 事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span> <span class="comment">&lt;!-- 使用连接池的数据源 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 数据库驱动类 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 数据库 URL --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 数据库用户名 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 数据库密码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 映射器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>EmployeeMapper.xml</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wickson.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询Employee --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wickson.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from emp where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有 Employee 信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listByEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wickson.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO emp ( `username`) VALUES (#&#123;username&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span>&gt;</span></span><br><span class="line">        UPDATE emp SET username = #&#123;username&#125; WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmployee&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM emp WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写测试类"><span class="post-title-index">3.6. </span><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><ul><li><code>EmployeeMapperTest.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 从 XML 中构建 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listByEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 JDK8 新特性 自动关流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">// 使用映射器命名空间执行查询操作</span></span><br><span class="line">            List&lt;Employee&gt; employees = session.selectList(<span class="string">&quot;com.wickson.mapper.EmployeeMapper.listByEmployee&quot;</span>);</span><br><span class="line">            employees.forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">// 使用映射器接口方法执行查询操作</span></span><br><span class="line">            <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> mapper.selectEmployee(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// Employee&#123;id=1, username=&#x27;Tom&#x27;&#125;</span></span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">// 使用映射器接口方法执行查询操作</span></span><br><span class="line">            <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            employee.setUsername(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> mapper.insertEmployee(employee);</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            session.commit();</span><br><span class="line">            <span class="comment">// Affected rows = 1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Affected rows = &quot;</span> + rows);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">// 使用映射器接口方法执行查询操作</span></span><br><span class="line">            <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            employee.setId(<span class="number">5</span>);</span><br><span class="line">            employee.setUsername(<span class="string">&quot;Jerry1&quot;</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> mapper.updateEmployee(employee);</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            session.commit();</span><br><span class="line">            <span class="comment">// Affected rows = 1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Affected rows = &quot;</span> + rows);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">// 使用映射器接口方法执行查询操作</span></span><br><span class="line">            <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> mapper.deleteEmployee(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            session.commit();</span><br><span class="line">            <span class="comment">// Affected rows = 1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Affected rows = &quot;</span> + rows);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Mybatis-配置文件"><span class="post-title-index">4. </span><a href="#Mybatis-配置文件" class="headerlink" title="Mybatis 配置文件"></a><code>Mybatis</code> 配置文件</h2><blockquote><p><code>Mybatis</code> 的配置文件分为两大类，第一个是 全局配置文件，第二个是 <code>SQL</code> 映射文件。</p><p>这部分的文件在源码分析时全部都会进行加载</p></blockquote><h3 id="全局配置文件"><span class="post-title-index">4.1. </span><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><blockquote><p>如下是 <code>Mybatis</code> 的全局配置文件信息，后面的源码信息会加载如下配置信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入数据库属性配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MyBatis全局设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置下划线自动映射为驼峰命名法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 类型别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描指定包下的类，作为类型别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wickson.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库环境配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用JDBC事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用连接池数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接信息从外部属性文件获取 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassname&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库厂商标识配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对不同数据库的标识 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;orcl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 映射器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单个映射器文件的引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描指定包下的映射器接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wickson.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SQL-映射文件"><span class="post-title-index">4.2. </span><a href="#SQL-映射文件" class="headerlink" title="SQL 映射文件"></a><code>SQL</code> 映射文件</h3><p><code>SQL</code> 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>cache</code> – 该命名空间的缓存配置。</li><li><code>cache-ref</code> – 引用其它命名空间的缓存配置。</li><li><code>resultMap</code> – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</li><li><code>sql</code> – 可被其它语句引用的可重用语句块。</li><li><code>insert</code> – 映射插入语句。</li><li><code>update</code> – 映射更新语句。</li><li><code>delete</code> – 映射删除语句。</li><li><code>select</code> – 映射查询语句。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.tulingxueyuan.dao.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis SQL映射文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 缓存设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引用外部缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wickson.mapper.DepartmentMapper&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;employeeResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wickson.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置映射关系，这里以id为例 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SQL片段定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;baseColumnList&quot;</span>&gt;</span></span><br><span class="line">        emp_id, emp_last_name, emp_email</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插入操作</span></span><br><span class="line"><span class="comment"> useGeneratedKeys: 仅适用于 insert 和 update, 取出由数据库内部生成的主键，默认值：false。</span></span><br><span class="line"><span class="comment">keyProperty: 指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插入SQL语句 --&gt;</span></span><br><span class="line">        INSERT INTO employees($&#123;baseColumnList&#125;)</span><br><span class="line">        VALUES(#&#123;id&#125;, #&#123;lastName&#125;, #&#123;email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wickson.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更新SQL语句 --&gt;</span></span><br><span class="line">        UPDATE employees</span><br><span class="line">        SET emp_last_name = #&#123;lastName&#125;, emp_email = #&#123;email&#125;</span><br><span class="line">        WHERE emp_id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 删除操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 删除SQL语句 --&gt;</span></span><br><span class="line">        DELETE FROM employees WHERE emp_id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;employeeResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 查询SQL语句 --&gt;</span></span><br><span class="line">        SELECT $&#123;baseColumnList&#125;</span><br><span class="line">        FROM employees</span><br><span class="line">        WHERE emp_id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Mybatis-动态-SQL"><span class="post-title-index">5. </span><a href="#Mybatis-动态-SQL" class="headerlink" title="Mybatis 动态 SQL"></a><code>Mybatis</code> 动态 <code>SQL</code></h2><h3 id="if"><span class="post-title-index">5.1. </span><a href="#if" class="headerlink" title="if"></a><code>if</code></h3><blockquote><p>根据条件生成 <code>SQL</code> 片段</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG WHERE state = ‘ACTIVE’ </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose-when-otherwise"><span class="post-title-index">5.2. </span><a href="#choose-when-otherwise" class="headerlink" title="choose / when / otherwise"></a><code>choose / when / otherwise</code></h3><blockquote><p>类似于Java中的switch语句，根据条件选择不同的分支。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        AND featured = 1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><span class="post-title-index">5.3. </span><a href="#foreach" class="headerlink" title="foreach"></a><code>foreach</code></h3><blockquote><p>用于循环遍历集合，生成对应的 <code>SQL</code> 片段</p><ol><li>如果传入的是单参数且参数类型是一个 <code>List</code> 的时候，<code>collection</code> 属性值为 <code>list</code></li><li>如果传入的是单参数且参数类型是一个array数组的时候，<code>collection</code> 的属性值为 <code>array</code></li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在 <code>MyBatis</code> 里面也是会把它封装成一个 <code>Map</code> 的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> item     表示集合中每一个元素进行迭代时的别名，随便起的变量名；</span></span><br><span class="line"><span class="comment">        index    指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；</span></span><br><span class="line"><span class="comment">        open     表示该语句以什么开始，常用“(”；</span></span><br><span class="line"><span class="comment">        separator 表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；</span></span><br><span class="line"><span class="comment">        close    表示以什么结束，常用“)”。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;ID in (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">nullable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set"><span class="post-title-index">5.4. </span><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><blockquote><p>可以用在动态更新的时候</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">          username=#&#123;username&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span></span><br><span class="line">          password=#&#123;password&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span></span><br><span class="line">          email=#&#123;email&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span></span><br><span class="line">          bio=#&#123;bio&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where"><span class="post-title-index">5.5. </span><a href="#where" class="headerlink" title="where"></a><code>where</code></h3><blockquote><p>可以用在所有的查询条件都是动态的情况</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">           state = #&#123;state&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">          AND title like #&#123;title&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">          AND author_name like #&#123;author.name&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bind"><span class="post-title-index">5.6. </span><a href="#bind" class="headerlink" title="bind"></a><code>bind</code></h3><blockquote><p>用于将表达式绑定为一个变量，以便在后续的 <code>SQL</code> 语句中使用。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;param.filter != null and param.filter!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;filterLike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + param.filter + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    and ( name like #&#123;filterLike,jdbcType=VARCHAR&#125; )</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Mybatis-缓存"><span class="post-title-index">6. </span><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a><code>Mybatis</code> 缓存</h2><blockquote><p><code>Mybatis</code> 缓存一般分为两种：</p><p>一级缓存：线程级别的缓存，是本地缓存，<code>sqlSession</code> 级别的缓存</p><p>二级缓存：全局范围的缓存，不止局限于当前会话</p></blockquote><p><code>MyBatis</code> 的二级缓存在某些场景下可以提高系统性能，但在大多数情况下不推荐使用，<strong>可能导致数据不一致性、内存占用过高、缓存同步问题和对复杂查询结果的管理困难</strong>。 </p><h3 id="一级缓存"><span class="post-title-index">6.1. </span><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><blockquote><p>基于 <code>PerpetualCach</code>e 的 <code>HashMap</code> 本地缓存，其存储作用域为 <code>SqlSession</code>，各个 <code>SqlSession</code> 之间的缓存相互隔离，当 Session flush 或 close 之后，该 <code>SqlSession</code> 中的所有 Cache 就将清空，<code>MyBatis</code> 默认打开一级缓存。</p></blockquote><ul><li>图解</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308232154508.png" alt="image-20230823215447415"></p><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cache</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">        List&lt;Employee&gt; employees = mapper.listByEmployee();</span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot; ------------ 默认开启一级缓存 ------------ &quot;</span>);</span><br><span class="line">        <span class="comment">// 使用映射器命名空间执行查询操作</span></span><br><span class="line">        List&lt;Employee&gt; employeeList = session.selectList(<span class="string">&quot;com.wickson.mapper.EmployeeMapper.listByEmployee&quot;</span>);</span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果（连续调用两次，但只执行了一次 <code>SQL</code> ）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">22:06:38.651 [main] DEBUG com.wickson.mapper.EmployeeMapper.listByEmployee - ==&gt;  Preparing: SELECT * FROM emp </span><br><span class="line">22:06:38.668 [main] DEBUG com.wickson.mapper.EmployeeMapper.listByEmployee - ==&gt; Parameters: </span><br><span class="line">22:06:38.677 [main] DEBUG com.wickson.mapper.EmployeeMapper.listByEmployee - &lt;==      Total: 3</span><br><span class="line">Employee&#123;id=1, username=&#x27;Tom&#x27;&#125;</span><br><span class="line">Employee&#123;id=2, username=&#x27;Jack&#x27;&#125;</span><br><span class="line">Employee&#123;id=3, username=&#x27;Tony&#x27;&#125;</span><br><span class="line"> ------------ 默认开启一级缓存 ------------ </span><br><span class="line">Employee&#123;id=1, username=&#x27;Tom&#x27;&#125;</span><br><span class="line">Employee&#123;id=2, username=&#x27;Jack&#x27;&#125;</span><br><span class="line">Employee&#123;id=3, username=&#x27;Tony&#x27;&#125;</span><br></pre></td></tr></table></figure><p><strong>失效情况</strong></p><ol><li>不同的 <code>SqlSession</code> 会使一级缓存失效。</li><li>同一个 <code>SqlSession</code>，但是查询语句不一样。</li><li>同一个 <code>SqlSession</code>，查询语句一样，期间执行增删改操作。</li><li>同一个 <code>SqlSession</code>，查询语句一样，执行手动清除缓存。</li></ol><h3 id="二级缓存"><span class="post-title-index">6.2. </span><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><blockquote><p>二级缓存与一级缓存其机制相同，默认也是采用 <code>PerpetualCache</code>，<code>HashMap</code> 存储，不同之处在于其存储作用域为 <code>Mapper(Namespace)</code>，可以在多个<code>SqlSession</code> 之间共享，并且可自定义存储源，如 <code>Ehcache</code>。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 <code>Serializable</code> 序列化接口(可用来保存对象的状态),可在它的映射文件中配置。</p></blockquote><ul><li>图解（缓存查询的顺序是先查询二级缓存再查询一级缓存）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308232220949.png" alt="Mybatis二级缓存示意图"></p><ul><li><p>使用</p><ul><li>在全局配置（<code>mybatis-config.xml</code>）文件开启 二级缓存</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启全局配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis 二级缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>需要在使用二级缓存的映射文件出使用标签标注</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实体类必须要实现 <code>Serializable</code> 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>  &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略 setter/getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 从 XML 中构建 SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cache</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">            List&lt;Employee&gt; employees = mapper.listByEmployee();</span><br><span class="line">            employees.forEach(System.out::println);</span><br><span class="line">            System.out.println(<span class="string">&quot; ------------ 开启二级缓存 ------------ &quot;</span>);</span><br><span class="line">            <span class="comment">// 使用映射器命名空间执行查询操作</span></span><br><span class="line">            List&lt;Employee&gt; employeeList = session.selectList(<span class="string">&quot;com.wickson.mapper.EmployeeMapper.listByEmployee&quot;</span>);</span><br><span class="line">            employeeList.forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listByEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 JDK8 新特性 自动关流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">            <span class="comment">// 使用映射器命名空间执行查询操作</span></span><br><span class="line">            List&lt;Employee&gt; employees = session.selectList(<span class="string">&quot;com.wickson.mapper.EmployeeMapper.listByEmployee&quot;</span>);</span><br><span class="line">            employees.forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">22:29:12.611 [main] DEBUG com.wickson.mapper.EmployeeMapper.listByEmployee - ==&gt;  Preparing: SELECT * FROM emp </span><br><span class="line">22:29:12.626 [main] DEBUG com.wickson.mapper.EmployeeMapper.listByEmployee - ==&gt; Parameters: </span><br><span class="line">22:29:12.635 [main] DEBUG com.wickson.mapper.EmployeeMapper.listByEmployee - &lt;==      Total: 3</span><br><span class="line">Employee&#123;id=1, username=&#x27;Tom&#x27;&#125;</span><br><span class="line">Employee&#123;id=2, username=&#x27;Jack&#x27;&#125;</span><br><span class="line">Employee&#123;id=3, username=&#x27;Tony&#x27;&#125;</span><br><span class="line"> ------------ 开启二级缓存 ------------ </span><br><span class="line">22:29:12.635 [main] DEBUG com.wickson.mapper.EmployeeMapper - Cache Hit Ratio [com.wickson.mapper.EmployeeMapper]: 0.0</span><br><span class="line">Employee&#123;id=1, username=&#x27;Tom&#x27;&#125;</span><br><span class="line">Employee&#123;id=2, username=&#x27;Jack&#x27;&#125;</span><br><span class="line">Employee&#123;id=3, username=&#x27;Tony&#x27;&#125;</span><br><span class="line">22:29:12.642 [main] DEBUG com.wickson.mapper.EmployeeMapper - Cache Hit Ratio [com.wickson.mapper.EmployeeMapper]: 0.3333333333333333</span><br><span class="line">Employee&#123;id=1, username=&#x27;Tom&#x27;&#125;</span><br><span class="line">Employee&#123;id=2, username=&#x27;Jack&#x27;&#125;</span><br><span class="line">Employee&#123;id=3, username=&#x27;Tony&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>失效</strong></p><ol><li><p>同一个命名空间进行了增删改的操作，会导致二级缓存失效，但是如果不想失效：可以将 <code>SQL</code> 的 <code>flushCache</code> 这是为 <code>false</code> ,但是要慎重设置，因为会造成数据脏读问题，除非你能保证查询的数据永远不会执行增删改</p></li><li><p>让查询不缓存数据到二级缓存中 <code>useCache=&quot;false&quot;</code></p></li><li><p>如果希望其他 <code>mapper</code> 映射文件的命名空间执行了增删改清空另外的命名空间就可以设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wickson.mapper.DeptMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-综合案例（八）</title>
      <link href="/posts/6853cb04.html"/>
      <url>/posts/6853cb04.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>我们本章节的内容主要是基于开源框架 <a href="http://www.ruoyi.vip/">Ruoyi-Vue</a> 进行的改造，改造的模块为<strong>字典管理</strong>。</p><p>本章节的内容会把 前面八篇文章的所有知识点全部融合进来，如下代码可能会存在一些冗余。但是可以将所学的只是串起来</p></blockquote><h2 id="准备工作"><span class="post-title-index">2. </span><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>项目地址：<a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue</a></p><p>部署文档：<a href="http://doc.ruoyi.vip/ruoyi-vue/document/hjbs.html#%E9%83%A8%E7%BD%B2%E7%B3%BB%E7%BB%9F">http://doc.ruoyi.vip/ruoyi-vue/document/hjbs.html#%E9%83%A8%E7%BD%B2%E7%B3%BB%E7%BB%9F</a></p><p>项目代码：<a href="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308142321915.zip">https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308142321915.zip</a></p></blockquote><h2 id="改造目标"><span class="post-title-index">3. </span><a href="#改造目标" class="headerlink" title="改造目标"></a>改造目标</h2><blockquote><p>主要改造的是前端页面信息</p></blockquote><ul><li>界面信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308141357288.png" alt="image-20230814135701182"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308141357454.png" alt="image-20230814135727420"></p><h3 id="老项目结构"><span class="post-title-index">3.1. </span><a href="#老项目结构" class="headerlink" title="老项目结构"></a>老项目结构</h3><ul><li><p>项目结构</p><blockquote><p>两个界面都是通过一个 <code>Vue</code> 页面就解决了，但这只是针对简单的页面信息可以这样构建。</p><p>但这样也带了如下坏处</p><ul><li><strong>可读性差：</strong> 一个页面包含大量的代码，包括多个不同的功能点，使得代码量巨大。这会导致代码的可读性变差，阅读和理解代码会变得困难。</li><li><strong>维护困难：</strong> 当一个组件包含太多的功能时，任何更改都可能影响到其他部分的功能，增加了维护的复杂性。如果有多人合作开发，更难协调工作。</li><li><strong>复用性差：</strong> 功能点紧密耦合在一个组件中，难以将某个功能独立出来，进行重复使用。</li><li><strong>测试困难：</strong> 难以进行有效的单元测试，因为需要同时考虑多个不同的功能点，增加了测试的复杂性。</li><li><strong>性能下降：</strong> 当页面中包含过多的功能点和状态时，可能会影响页面的性能，导致加载速度变慢，渲染变得缓慢。</li><li><strong>可维护性下降：</strong> 当代码组织不好时，新成员很难快速理解代码结构和逻辑，降低了项目的可维护性。</li><li><strong>逻辑混乱：</strong> 当很多功能混合在一个页面中时，不同功能的逻辑可能会相互干扰，导致代码混乱和错误。</li></ul></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308141359207.png" alt="image-20230814135932180" style="float:left"></p><h3 id="新项目结构"><span class="post-title-index">3.2. </span><a href="#新项目结构" class="headerlink" title="新项目结构"></a>新项目结构</h3><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308142318373.png" alt="image-20230814231850355" style="float:left"></p><h2 id="具体实现"><span class="post-title-index">4. </span><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><blockquote><p>我们将一个表单拆分为四大块</p><ul><li>高级查询</li><li>监听按钮</li><li>表单数据</li><li>新增编辑</li></ul></blockquote><h3 id="高级查询"><span class="post-title-index">4.1. </span><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><ul><li><code>dictQuery.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;queryParams&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;showSearch&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;68px&quot;</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;字典名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;dictName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;queryParams.dictName&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请输入字典名称&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;width: 240px&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;handleQuery&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;字典类型&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;dictType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;queryParams.dictType&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请输入字典类型&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;width: 240px&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;handleQuery&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;queryParams.status&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;字典状态&quot;</span> <span class="attr">clearable</span> <span class="attr">style</span>=<span class="string">&quot;width: 240px&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;dict in dict.type.sys_normal_disable&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;dict.value&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:label</span>=<span class="string">&quot;dict.label&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;dict.value&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;dateRange&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;width: 240px&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">range-separator</span>=<span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleQuery&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-refresh&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;resetQuery&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">EventBus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/eventBus&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;dictQuery&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">dicts</span>: [<span class="string">&#x27;sys_normal_disable&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">queryParams</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 日期范围</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dateRange</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">showSearch</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">EventBus</span>.$on(<span class="string">&#x27;dictToolbarSearch&#x27;</span>, <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">showSearch</span> = obj.<span class="property">showSearch</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  methods : &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 搜索按钮</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleQuery</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> queryForm = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">queryParams</span>: <span class="variable language_">this</span>.<span class="property">queryParams</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dateRange</span>: <span class="variable language_">this</span>.<span class="property">dateRange</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;onQuery&#x27;</span>, queryForm)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 重置按钮</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">resetQuery</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">queryParams</span> = &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">dateRange</span> = []</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="监听按钮"><span class="post-title-index">4.2. </span><a href="#监听按钮" class="headerlink" title="监听按钮"></a>监听按钮</h3><ul><li><code>dictToolbar.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mb8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-plus&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleAdd&quot;</span> <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:add&#x27;]&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;single&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate&quot;</span> <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:edit&#x27;]&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;multiple&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete&quot;</span> <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:remove&#x27;]&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-download&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleExport&quot;</span> <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:export&#x27;]&quot;</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-refresh&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleRefreshCache&quot;</span> <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:remove&#x27;]&quot;</span>&gt;</span>刷新缓存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">EventBus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/eventBus&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; getType, delType, refreshCache &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/system/dict/type&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;dictToolbar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 选中数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ids</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">require</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 非单个禁用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">single</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">require</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 非多个禁用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">multiple</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">require</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 表单参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">queryParams</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Object</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 显示搜索条件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">showSearch</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  methods : &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 新增按钮操作 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleAdd</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;handleAdd()&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">EventBus</span>.$emit(<span class="string">&#x27;dictToolbarObj&#x27;</span>, &#123;<span class="attr">open</span>: <span class="literal">true</span>, <span class="attr">form</span>: &#123;&#125;, <span class="attr">title</span>: <span class="string">&quot;新增字典类型&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 修改按钮操作 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> dictId = row.<span class="property">dictId</span> || <span class="variable language_">this</span>.<span class="property">ids</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getType</span>(dictId).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(response.<span class="property">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title class_">EventBus</span>.$emit(<span class="string">&#x27;dictToolbarObj&#x27;</span>, &#123;<span class="attr">open</span>: <span class="literal">true</span>, form : response.<span class="property">data</span>, title : <span class="string">&quot;修改字典类型&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 删除按钮操作 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> dictIds = row.<span class="property">dictId</span> || <span class="variable language_">this</span>.<span class="property">ids</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;是否确认删除字典编号为&quot;&#x27;</span> + dictIds + <span class="string">&#x27;&quot;的数据项？&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="title function_">delType</span>(dictIds); &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.$emit(<span class="string">&quot;onFlush&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;删除成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 导出按钮操作 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleExport</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">download</span>(<span class="string">&#x27;system/dict/type/export&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        ...<span class="variable language_">this</span>.<span class="property">queryParams</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="string">`type_<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>.xlsx`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 刷新缓存按钮操作 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleRefreshCache</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">refreshCache</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;刷新成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;dict/cleanDict&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单数据"><span class="post-title-index">4.3. </span><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h3><ul><li><code>dictPage.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字典管理-列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 高级搜索 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict-query</span> @<span class="attr">onQuery</span>=<span class="string">&quot;onQuery&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dict-query</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 监听按钮数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict-toolbar</span> <span class="attr">ref</span>=<span class="string">&quot;editOrDelete&quot;</span> </span></span><br><span class="line"><span class="tag">                  @<span class="attr">onFlush</span>=<span class="string">&quot;onFlush&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">:single</span>=<span class="string">&quot;this.single&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">:multiple</span>=<span class="string">&quot;this.multiple&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">:ids</span>=<span class="string">&quot;this.ids&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">:queryParams</span>=<span class="string">&quot;this.queryParams&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict-toolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 列表信息-start --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;typeList&quot;</span> @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;字典编号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;dictId&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;字典名称&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;dictName&quot;</span> <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;字典类型&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/system/dict-data/index/&#x27; + scope.row.dictId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link-type&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; scope.row.dictType &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dict-tag</span> <span class="attr">:options</span>=<span class="string">&quot;dict.type.sys_normal_disable&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;scope.row.status&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;备注&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; parseTime(scope.row.createTime) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class-name</span>=<span class="string">&quot;small-padding fixed-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:edit&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;system:dict:remove&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 分页条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagination</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-show</span>=<span class="string">&quot;total&gt;0&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page.sync</span>=<span class="string">&quot;queryParams.pageNum&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:limit.sync</span>=<span class="string">&quot;queryParams.pageSize&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">pagination</span>=<span class="string">&quot;getList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表信息-end   --&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--字段新增编辑--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict-add-edit</span> <span class="attr">ref</span>=<span class="string">&quot;addEditCard&quot;</span> @<span class="attr">onSuccess</span>=<span class="string">&quot;onSuccess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dict-add-edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> dictQuery <span class="keyword">from</span> <span class="string">&quot;./dictQuery.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> dictToolbar <span class="keyword">from</span> <span class="string">&quot;./dictToolbar.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; listType &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/system/dict/type&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">DictAddEdit</span> <span class="keyword">from</span> <span class="string">&quot;./dictAddEdit.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;dictPage&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; dictQuery, dictToolbar, <span class="title class_">DictAddEdit</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">dicts</span>: [<span class="string">&quot;sys_normal_disable&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 遮罩层</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">loading</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 选中数组</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">ids</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 非单个禁用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">single</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 非多个禁用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">multiple</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 字典表格数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">typeList</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 表单参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">queryParams</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageNum</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageSize</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dictName</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dictType</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">status</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 时间数据范围</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dateRange</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">queryForm</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 总条数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">total</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 当所有节点初始化之后调用接口</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 修改按钮操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;editOrDelete&quot;</span>].<span class="title function_">handleUpdate</span>(row);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 删除按钮操作</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&quot;editOrDelete&quot;</span>].<span class="title function_">handleDelete</span>(row);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 查询字典类型列表 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">listType</span>(<span class="variable language_">this</span>.<span class="title function_">addDateRange</span>(<span class="variable language_">this</span>.<span class="property">queryParams</span>, <span class="variable language_">this</span>.<span class="property">dateRange</span>)).<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">typeList</span> = response.<span class="property">rows</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">total</span> = response.<span class="property">total</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 搜索按钮</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onQuery</span>(<span class="params">queryForm = &#123;&#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">queryParams</span> = queryForm.<span class="property">queryParams</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">dateRange</span> = queryForm.<span class="property">dateRange</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 多选框选中数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleSelectionChange</span>(<span class="params">selection</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">ids</span> = selection.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">dictId</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">single</span> = selection.<span class="property">length</span> != <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">multiple</span> = !selection.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 刷新页面</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onFlush</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 新增成功之后调用父组件</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onSuccess</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="新增页面"><span class="post-title-index">4.4. </span><a href="#新增页面" class="headerlink" title="新增页面"></a>新增页面</h3><ul><li><code>dictAddEdit.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;open&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;字典名称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;dictName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.dictName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入字典名称&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;字典类型&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;dictType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.dictType&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入字典类型&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;form.status&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-radio</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;dict in dict.type.sys_normal_disable&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;dict.value&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:label</span>=<span class="string">&quot;dict.value&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span>&#123;&#123;dict.label&#125;&#125;<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;备注&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;remark&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.remark&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">EventBus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/eventBus&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; updateType, addType &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/system/dict/type&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;dictAddEdit&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">dicts</span>: [<span class="string">&#x27;sys_normal_disable&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      title : <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 是否显示弹出层</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">open</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 表单参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">form</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 表单校验</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dictName</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;字典名称不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dictType</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;字典类型不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">EventBus</span>.$on(<span class="string">&#x27;dictToolbarObj&#x27;</span>, <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">open</span> = obj.<span class="property">open</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">form</span> = obj.<span class="property">form</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">title</span> = obj.<span class="property">title</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  methods : &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 提交表单</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">dictId</span> != <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateType</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;修改成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$emit(<span class="string">&#x27;onSuccess&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addType</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">$modal</span>.<span class="title function_">msgSuccess</span>(<span class="string">&quot;新增成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 取消表单</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">clearValidate</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">open</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">form</span> = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-组件开发（七）</title>
      <link href="/posts/6d55525.html"/>
      <url>/posts/6d55525.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>具体细节参考 <a href="https://cn.vuejs.org/guide/introduction.html"><code>Vue</code> 官方文档</a> ，本章节会详细讲解到 <code>Vue</code> 组件开发。</p><p>本章节的案例会涉及到前两章的内容 </p><ul><li><a href="https://wickson.top/posts/7f538b33.html">Vue-脚手架（五）</a></li><li><a href="https://wickson.top/posts/26ad9f96.html">Vue-项目依赖（六）</a></li></ul></blockquote><p>具体内容如下</p><ul><li>组件注册</li><li>组件通信</li><li>插槽</li></ul><hr><h2 id="什么是组件❔"><span class="post-title-index">2. </span><a href="#什么是组件❔" class="headerlink" title="什么是组件❔"></a>什么是组件❔</h2><blockquote><p>组件：在程序中组件就是对数据和方法的简单封装。</p><p><strong><code>Vue</code> 组件</strong>：这是 <code>Vue</code> 的亮点之一，<strong>组件</strong> 允许我们将 <code>UI</code> 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。</p><p>例子：例如一个表单包含如下内容（搜索栏、列表页、分页条、新增|编辑页、详情页），那我们就可以通过组件化的思想将这些模块封装成一个个组件。</p></blockquote><ul><li>官网组件图解</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2017/01/components.png" alt="img" style="float:left;"></p><hr><h2 id="组件注册"><span class="post-title-index">3. </span><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><blockquote><p>在 <code>Vue</code> 中，如果我们需要某些地方使用到组件，那么就必须要进行注释。</p><p>我将会通过两种方式进行组件注册：</p><ul><li>全局注册</li><li>局部注册</li></ul></blockquote><h3 id="全局注册"><span class="post-title-index">3.1. </span><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><blockquote><p><strong>全局注册</strong>：在应用的任何地方都可以使用的组件称为全局组件。</p></blockquote><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tagName 为组件名，options 为配置选项</span><br><span class="line">Vue.component(tagName, options)</span><br></pre></td></tr></table></figure><p>假设，我们需要在全局注册。那我们我们在 <code>main.js</code> 进行注册组件即可</p><ul><li><code>main.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"># <span class="title class_">MyComponent</span>被全局注册为my-component，这意味着你可以在应用中的任何地方使用&lt;my-component&gt;&lt;/my-component&gt;标签。</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, <span class="title class_">MyComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>) <span class="comment">// 使用 render 函数渲染 App 组件，并将其挂载到 id 为 &#x27;app&#x27; 的元素上</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>); <span class="comment">// 手动挂载 Vue 实例到 id 为 &#x27;app&#x27; 的元素上</span></span><br></pre></td></tr></table></figure><h3 id="局部注册"><span class="post-title-index">3.2. </span><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><blockquote><p>局部注册：将组件限制在一个特定的 <code>Vue</code> 实例或另一个组件的作用域内。</p></blockquote><p>假设，我们需要在<strong>局部注册</strong>。那我们我们在 局部组件 引入组件即可。</p><ul><li><code>component</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ParentComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;my-component&#x27;</span>: <span class="title class_">MyComponent</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="组件通信"><span class="post-title-index">4. </span><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><blockquote><p><strong>组件通信</strong>：这个模块是非常非常重要的，<code>Vue</code> 的特色组件化。既然涉及到组件化了，那么就一定会涉及到组件之间的通信。</p></blockquote><p>我们会通过如下内容来讲解组件通信</p><ul><li><strong>父子组件通信（props、$emit）</strong></li><li><strong>父组件访问子组件（$refs）</strong></li></ul><h3 id="父子组件通信"><span class="post-title-index">4.1. </span><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><blockquote><p>父子组件：通过官网的组件图可以看到，组件和组件之间是存在层级关系的，我们这里主要讨论父子组件。</p></blockquote><h4 id="props"><span class="post-title-index">4.1.1. </span><a href="#props" class="headerlink" title="props"></a>props</h4><blockquote><p><strong><code>props</code></strong>：是用于将数据从父组件传递到子组件的机制。父组件通过将数据绑定到子组件的属性上，使子组件可以接受并使用这些数据。</p><p><code>props</code> 可以是任何类型的数据，包括字符串、数字、对象、数组等。</p></blockquote><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">filed</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们需要通过父组件向子组件进行传值</p><ul><li><code>ParentView.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span> 我是父组件 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-view</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildView</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildView.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; </span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">ChildView</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentMessage</span>: <span class="string">&#x27;Hello from parent!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>ChildView.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308131403286.png" alt="image-20230813140341213"></p><h4 id="emit"><span class="post-title-index">4.1.2. </span><a href="#emit" class="headerlink" title="$emit"></a>$emit</h4><blockquote><p><code>$emit</code> ：是用于在子组件中触发自定义事件，并向父组件发送消息的方法。</p><p>子组件可以使用 <code>$emit</code> 来通知父组件发生了某些事件或状态的变化，从而实现子组件向父组件传递数据。</p></blockquote><p>假设我们在子组件中与父组件通信。</p><ul><li><code>ChildView.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendEventToParent&quot;</span>&gt;</span>向父组件发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sendEventToParent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;child-event&#x27;</span>, <span class="string">&#x27;Hello from child!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parentView.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-view</span> @<span class="attr">child-event</span>=<span class="string">&quot;handleChildEvent&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildView</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildView.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildView</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      message : <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleChildEvent</span>(<span class="params">messageFromChild</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span> = messageFromChild</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message from child:&#x27;</span>, messageFromChild);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308131444822.gif" alt="动画"></p><h3 id="父组件访问子组件"><span class="post-title-index">4.2. </span><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><h4 id="refs"><span class="post-title-index">4.2.1. </span><a href="#refs" class="headerlink" title="$refs"></a>$refs</h4><blockquote><p><code>$refs</code> 是 <code>Vue.js</code> 提供的一个特殊属性，用于<strong>在组件中访问被标记为 <code>ref</code> 的子组件或 DOM 元素。通过 <code>$refs</code>，你可以在父组件中直接引用子组件的实例或操作 DOM 元素</strong>，而不需要通过事件或 <code>props</code> 进行数据传递。</p></blockquote><ul><li><code>ParenView.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;callChildMethod&quot;</span>&gt;</span> 调用子组件方法 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-view</span> <span class="attr">ref</span>=<span class="string">&quot;childRef&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildView</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildView.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildView</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      message : <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">callChildMethod</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">childRef</span>.<span class="title function_">childMethod</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>ChildView.vue</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      message : <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">childMethod</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;父子调用子组件成功&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308131522195.gif" alt="动画"></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-项目依赖（六）</title>
      <link href="/posts/26ad9f96.html"/>
      <url>/posts/26ad9f96.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于上一章节中讲解了《<a href="https://wickson.top/posts/7f538b33.html">Vue-脚手架</a>》，所以我们想要完全的构建一个项目是需要很多依赖的。</p></blockquote><p><strong>依赖内容如下</strong></p><ul><li><code>Vuex</code></li><li><code>Vue-Router</code></li><li><code>Axios</code></li></ul><hr><h2 id="Vuex"><span class="post-title-index">2. </span><a href="#Vuex" class="headerlink" title="Vuex"></a><code>Vuex</code></h2><blockquote><p><code>Vuex</code> : 专门为 <code>Vue.js</code> 应用程序开发的状态管理库。</p><p><code>Vuex</code> 主要解决了应用程序中 <strong>组件之间共享状态</strong> 和 <strong>管理状态</strong> 的问题。在大型 <code>Vue</code> 应用中，组件的状态可能会变得复杂，而 <code>Vuex</code> 提供了一种集中式管理状态的方式，使得状态的变化和管理更加可预测和可维护。</p></blockquote><h3 id="第一步：安装-Vuex"><span class="post-title-index">2.1. </span><a href="#第一步：安装-Vuex" class="headerlink" title="第一步：安装 Vuex"></a>第一步：安装 <code>Vuex</code></h3><ul><li>由于我们的 <code>Vue</code> 版本采用的是 <code>2.6.14</code> 为了兼容，我们安装 <code>3.5.1</code> 版本的 <code>Vuex</code> </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm instal -g vuex@3.5.1 </span><br></pre></td></tr></table></figure><ul><li>或者直接在 <code>Vue-CLI</code> 脚手架中直接添加依赖</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308121220848.gif" alt="动画"></p><h3 id="第二步：创建-Store"><span class="post-title-index">2.2. </span><a href="#第二步：创建-Store" class="headerlink" title="第二步：创建 Store"></a>第二步：创建 <code>Store</code></h3><ul><li>创建文件 <code>/store/index.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// State（状态）：应用程序中的所有状态被集中存储在一个状态树中。这个状态树可以看作是单一源 of truth（单一的数据源），供整个应用程序的组件访问。</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Getter（获取器）：Getters允许您从存储在状态树中的状态中派生出一些衍生状态，类似于计算属性。</span></span><br><span class="line">  <span class="attr">getter</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Mutation（变更）：Mutations是用于修改状态的方法。它们是同步的操作，用于在应用程序中记录状态变化。</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Action（动作）： Actions是类似于Mutations的方法，但可以包含异步操作。</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Module（模块）： 当应用程序变得复杂时，Vuex允许您将状态和操作分割为模块。</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第三步：配置-Store"><span class="post-title-index">2.3. </span><a href="#第三步：配置-Store" class="headerlink" title="第三步：配置 Store"></a>第三步：配置 <code>Store</code></h3><ul><li>在 <code>main.js</code> 添加 <code>store</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 将Store添加到Vue实例中  </span></span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="案例：计数器"><span class="post-title-index">2.4. </span><a href="#案例：计数器" class="headerlink" title="案例：计数器"></a>案例：计数器</h3><blockquote><p><strong>Vuex</strong> ：计数器应用程序，允许您增加计数并通过异步操作增加计数。</p></blockquote><ul><li>修改  <code>/store/index.js</code></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  // State（状态）：应用程序中的所有状态被集中存储在一个状态树中。这个状态树可以看作是单一源 of truth（单一的数据源），供整个应用程序的组件访问。</span><br><span class="line">  state: &#123;</span><br><span class="line"><span class="addition">+    count: 0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  // Getter（获取器）：Getters允许您从存储在状态树中的状态中派生出一些衍生状态，类似于计算属性。</span><br><span class="line">  getter: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  // Mutation（变更）：Mutations是用于修改状态的方法。它们是同步的操作，用于在应用程序中记录状态变化。</span><br><span class="line">  mutations: &#123;</span><br><span class="line"><span class="addition">+    increment(state) &#123;</span></span><br><span class="line"><span class="addition">+      state.count++;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  // Action（动作）： Actions是类似于Mutations的方法，但可以包含异步操作。</span><br><span class="line">  actions: &#123;</span><br><span class="line"><span class="addition">+    incrementAsync(&#123; commit &#125;) &#123;</span></span><br><span class="line"><span class="addition">+      setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="addition">+        commit(&#x27;increment&#x27;);</span></span><br><span class="line"><span class="addition">+      &#125;, 1000);</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  // Module（模块）： 当应用程序变得复杂时，Vuex允许您将状态和操作分割为模块。</span><br><span class="line">  modules: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>创建页面 <code>src/views/CounterView1.vue</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementAsync&quot;&gt;Increment Async&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count() &#123;</span><br><span class="line">      return this.$store.state.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.$store.commit(&#x27;increment&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementAsync() &#123;</span><br><span class="line">      this.$store.dispatch(&#x27;incrementAsync&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>创建页面 <code>src/views/CounterView2.vue</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;我是组件2&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count() &#123;</span><br><span class="line">      return this.$store.state.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308121404298.gif" alt="动画" style="float:left"></p><hr><h2 id="Vue-Router"><span class="post-title-index">3. </span><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a><code>Vue-Router</code></h2><blockquote><p><strong>Vue Router</strong> ：是一个为 <code>Vue.js</code> 应用程序提供路由功能的官方插件。它允许你在单页应用（Single Page Application，SPA）中管理不同视图之间的导航，实现页面之间的切换和状态管理，同时也支持<strong>路由参数、嵌套路由、路由导航守卫</strong>等功能。</p></blockquote><h3 id="第一步：安装-Vue-Router"><span class="post-title-index">3.1. </span><a href="#第一步：安装-Vue-Router" class="headerlink" title="第一步：安装 Vue-Router"></a>第一步：安装 <code>Vue-Router</code></h3><ul><li>指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm instal vue-router@3.5.1</span><br></pre></td></tr></table></figure><ul><li>也可以通过 <code>vue ui</code> 进行创建</li></ul><h3 id="第二步：创建-Vue-Router"><span class="post-title-index">3.2. </span><a href="#第二步：创建-Vue-Router" class="headerlink" title="第二步：创建 Vue Router"></a>第二步：创建 <code>Vue Router</code></h3><ul><li>创建文件 <code>/router/index.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 定义了 URL 路径，即当用户访问的路径匹配 /cont/law 时，该路由会生效。</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>, <span class="comment">// 路由的名称，用于在代码中引用该路由。</span></span><br><span class="line">    <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> route.<span class="property">query</span>, <span class="comment">// 它定义了如何将路由的查询参数传递给组件作为 props。</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span> <span class="comment">// 定义了该路由所对应的 Vue 组件。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> route.<span class="property">query</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="第三步：配置-Vue-Router"><span class="post-title-index">3.3. </span><a href="#第三步：配置-Vue-Router" class="headerlink" title="第三步：配置 Vue Router"></a>第三步：配置 <code>Vue Router</code></h3><ul><li><strong>配置 <code>main.js</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  router,</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第四步：使用"><span class="post-title-index">3.4. </span><a href="#第四步：使用" class="headerlink" title="第四步：使用"></a>第四步：使用</h3><ul><li><code>App.Vue</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;!-- &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt; |  --&gt;</span><br><span class="line">      &lt;router-link to=&quot;/counter1&quot;&gt;Counter1&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/counter2&quot;&gt;Counter2&lt;/router-link&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot;&gt;</span><br><span class="line">#app</span><br><span class="line">  font-family Avenir, Helvetica, Arial, sans-serif</span><br><span class="line">  -webkit-font-smoothing antialiased</span><br><span class="line">  -moz-osx-font-smoothing grayscale</span><br><span class="line">  text-align center</span><br><span class="line">  color #2c3e50</span><br><span class="line">  margin-top 60px</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308121557450.png" alt="image-20230812155743418" style="float:left"></p><hr><h2 id="Axios"><span class="post-title-index">4. </span><a href="#Axios" class="headerlink" title="Axios"></a><code>Axios</code></h2><blockquote><p><strong>Axios</strong> ：是一个基于 Promise 的 JavaScript HTTP 客户端，用于浏览器和 Node.js。它支持在浏览器中发起 HTTP 请求，并且提供了丰富的功能，如请求和响应的拦截、请求取消、并发请求等。</p></blockquote><h3 id="第一步：安装-Axios"><span class="post-title-index">4.1. </span><a href="#第一步：安装-Axios" class="headerlink" title="第一步：安装 Axios"></a>第一步：安装 <code>Axios</code></h3><ul><li>指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios@0.19.1</span><br></pre></td></tr></table></figure><ul><li><code>package.json</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.19.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="案例：获取用户信息"><span class="post-title-index">4.2. </span><a href="#案例：获取用户信息" class="headerlink" title="案例：获取用户信息"></a>案例：获取用户信息</h3><ul><li>配置路由</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/userList&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;userList&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> route.<span class="property">query</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/UserView.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>UserView.vue</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;User List&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;user in users&quot; :key=&quot;user.id&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">    </span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      users: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.fetchUsers();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchUsers() &#123;</span><br><span class="line">      axios.get(&#x27;https://jsonplaceholder.typicode.com/users&#x27;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          this.users = response.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308121618549.png" alt="image-20230812161813518" style="float:left"></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-脚手架（五）</title>
      <link href="/posts/7f538b33.html"/>
      <url>/posts/7f538b33.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>我们通过上一节的内容 《<a href="https://wickson.top/posts/cca35467.html">Vue-Webpack（四）</a>》知道了如何通过 <code>Webpack</code> 构建 <code>Vue</code> ，但通过哪种方式在实际开发中肯定是不现实的。所以需要引入专门构建 <code>Vue</code> 的脚手架 进行开发</p></blockquote><hr><h2 id="脚手架"><span class="post-title-index">2. </span><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><blockquote><p>目前 <code>Vue</code> 提供了两种脚手架的开发工具，分别是 <code>Vue CLI</code> 和 <code>Vite</code> ，其中 <code>Vue CLI</code> 现已处于维护模式!</p></blockquote><h3 id="Vue-Cli"><span class="post-title-index">2.1. </span><a href="#Vue-Cli" class="headerlink" title="Vue Cli"></a><code>Vue Cli</code></h3><blockquote><p>官网地址：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p><p>尽量使用 <code>cmd</code> 命令窗口进行执行命令</p></blockquote><h4 id="第一步：安装-Vue-CLI"><span class="post-title-index">2.1.1. </span><a href="#第一步：安装-Vue-CLI" class="headerlink" title="第一步：安装 Vue CLI"></a>第一步：安装 <code>Vue CLI</code></h4><ul><li>安装指定版本的 <code>Vue Cli</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli@3.7.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112347185.png" alt="image-20230811234747151" style="float:left;"></p><h4 id="第二步：创建项目"><span class="post-title-index">2.1.2. </span><a href="#第二步：创建项目" class="headerlink" title="第二步：创建项目"></a>第二步：创建项目</h4><ul><li>指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112349079.png" alt="image-20230811234932062" style="float:left"></p><ul><li>详情</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112351226.png" alt="image-20230811235104195"></p><ul><li>预设</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112353897.png" alt="image-20230811235354853"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112353642.png" alt="image-20230811235311608"></p><ul><li>功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112355470.png" alt="image-20230811235523411"></p><ul><li>配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112356584.png" alt="image-20230811235608553"></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112356379.png" alt="image-20230811235648342"></p><ul><li>创建完成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308112358450.png" alt="image-20230811235847399"></p><h4 id="第三步：目录结构"><span class="post-title-index">2.1.3. </span><a href="#第三步：目录结构" class="headerlink" title="第三步：目录结构"></a>第三步：目录结构</h4><ul><li>图解</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308120000017.png" alt="image-20230812000010999" style="float:left"></p><ul><li>目录说明</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app/          // 项目根目录</span><br><span class="line">├── public/           // 静态资源文件夹</span><br><span class="line">│   ├── index.html    // 入口 HTML 文件</span><br><span class="line">│   ├── ...</span><br><span class="line">│</span><br><span class="line">├── src/              // 项目源代码文件夹</span><br><span class="line">│   ├── assets/       // 存放静态资源（图片、样式等）</span><br><span class="line">│   ├── components/   // Vue 组件文件夹</span><br><span class="line">│   ├── views/        // 页面级别的 Vue 组件文件夹</span><br><span class="line">│   ├── App.vue       // 应用程序的根组件</span><br><span class="line">│   ├── main.js       // 入口 JavaScript 文件</span><br><span class="line">│   ├── ...</span><br><span class="line">│</span><br><span class="line">├── node_modules/     // 依赖模块文件夹</span><br><span class="line">│</span><br><span class="line">├── .gitignore        // Git 忽略配置文件</span><br><span class="line">├── babel.config.js   // Babel 配置文件</span><br><span class="line">├── package.json      // 项目配置和依赖列表</span><br><span class="line">├── README.md         // 项目说明文件</span><br><span class="line">├── vue.config.js  // 项目构建过程的配置文件</span><br></pre></td></tr></table></figure><h4 id="第四步：配置-vue-config-js"><span class="post-title-index">2.1.4. </span><a href="#第四步：配置-vue-config-js" class="headerlink" title="第四步：配置 vue.config.js"></a>第四步：配置 <code>vue.config.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 基本路径</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  <span class="comment">// 构建时的输出目录</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  <span class="comment">// 放置生成的静态资源目录</span></span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>,</span><br><span class="line">  <span class="comment">// 指定html输出路径</span></span><br><span class="line">  <span class="attr">indexPath</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">  <span class="comment">// 设置语法检查</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 设置是否需要sourceMap</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 配置开发环境下的一些服务器配置</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 配置代理</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第五步：运行项目"><span class="post-title-index">2.1.5. </span><a href="#第五步：运行项目" class="headerlink" title="第五步：运行项目"></a>第五步：运行项目</h4><ul><li>指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308120002011.png" alt="image-20230812000237970"></p><h3 id="Vite"><span class="post-title-index">2.2. </span><a href="#Vite" class="headerlink" title="Vite"></a><code>Vite</code></h3><blockquote><p>Vite 是一个基于现代浏览器原生 ES 模块系统的构建工具，专为开发 <code>Vue.js</code> 单页面应用（SPA）而设计的。与传统的打包工具（如<code>Webpack</code>）不同，Vite 采用了一种更快、更轻量级的开发模式，能够在开发阶段实现即时的、按需加载。</p><p>官方文档：<a href="https://cn.vitejs.dev/guide/">https://cn.vitejs.dev/guide/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Webpack（四）</title>
      <link href="/posts/cca35467.html"/>
      <url>/posts/cca35467.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于我们学习 <code>Vue</code> 时 <code>Webpack</code> 是无法绕过去的。但作为后端开发只需要了解即可，并不一定要想前端工程师一样精通。</p></blockquote><hr><h2 id="什么是-Webpack"><span class="post-title-index">2. </span><a href="#什么是-Webpack" class="headerlink" title="什么是 Webpack ?"></a>什么是 <code>Webpack</code> ?</h2><blockquote><p>官方文档：<a href="https://webpack.docschina.org/concepts/entry-points/">https://webpack.docschina.org/concepts/entry-points/</a></p><p><code>Webpack</code> 是一个现代前端构建工具，用于处理 <code>JavaScript</code> 模块、资源文件（如样式、图片等）以及其他静态资源，将它们打包成一个或多个优化的 bundle，以提高应用的性能和可维护性。</p></blockquote><p><strong>使用拼图的例子描述如下</strong></p><blockquote><p>假设你正在组织一个庞大的拼图，每个拼图片段代表着你的应用程序的一部分，包括各种 <code>JavaScript</code> 代码、样式、图片和其他资源。但是他们非常混乱、难以管理和组装。<code>Webpack</code> 就像是一个智能的拼图整理工具。它可以将这些碎片按照你的需要整理、排序和合并。</p></blockquote><ul><li>首先，它会检查每个碎片上写着的说明，这相当于模块化的 JavaScript 代码。</li><li>然后，它会将这些碎片中的颜色块、图案等，相应地进行分类，这就好像是处理样式文件。还有一些碎片是图片，Webpack 知道如何将它们正确地放在一起，就像是处理图片资源。</li><li><p>最终，Webpack 会根据你的设置，将所有整理好的碎片合并成几个优化的大块，就像是组装一幅完整的拼图。</p></li><li><p>总之，<code>Webpack</code> 就像是一个拼图整理工具，它帮助你把代码和资源整理得更有序，以提高网站性能和开发效率。</p></li></ul><p><strong>官网图解</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308102021448.png" alt="image-20230810202142414"></p><hr><h2 id="安装-Webpack"><span class="post-title-index">3. </span><a href="#安装-Webpack" class="headerlink" title="安装 Webpack"></a>安装 <code>Webpack</code></h2><h3 id="第一步：安装-Webpack"><span class="post-title-index">3.1. </span><a href="#第一步：安装-Webpack" class="headerlink" title="第一步：安装 Webpack"></a>第一步：安装 <code>Webpack</code></h3><ul><li>执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">mkdir</span> 01_webpack</span><br><span class="line">&gt; <span class="built_in">cd</span> .\01_webpack\</span><br><span class="line">&gt; npm init -y</span><br><span class="line">&gt; npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><ul><li>文件目录</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01_webpack</span><br><span class="line">  |- /node_modules</span><br><span class="line">  |- package.json</span><br><span class="line">  |- package-lock.json</span><br></pre></td></tr></table></figure><h3 id="第二步：创建配置文件"><span class="post-title-index">3.2. </span><a href="#第二步：创建配置文件" class="headerlink" title="第二步：创建配置文件"></a>第二步：创建配置文件</h3><blockquote><p>Webpack 使用配置文件来指定打包的规则和行为。</p></blockquote><ul><li>在根目录创建一个名为 <strong><code>webpack.config.js</code></strong> 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>, <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>) <span class="comment">// 输出目录</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>文件目录</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">01_webpack</span><br><span class="line">  |- package.json</span><br><span class="line">  |- package-lock.json</span><br><span class="line"><span class="addition">+ |- /dist</span></span><br><span class="line"><span class="addition">+ |- /src</span></span><br><span class="line"><span class="addition">+ |- main.js</span></span><br><span class="line"><span class="addition">+ |- webpack.config.js</span></span><br></pre></td></tr></table></figure><h3 id="第三步：创建入口文件"><span class="post-title-index">3.3. </span><a href="#第三步：创建入口文件" class="headerlink" title="第三步：创建入口文件"></a>第三步：创建入口文件</h3><blockquote><p>在配置文件中指定了入口文件后，你需要在项目中创建该入口文件。</p></blockquote><ul><li>创建 <code>/src/main.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, Webpack!&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="第四步：安装加载器和插件"><span class="post-title-index">3.4. </span><a href="#第四步：安装加载器和插件" class="headerlink" title="第四步：安装加载器和插件"></a>第四步：安装加载器和插件</h3><blockquote><p>Webpack 可以使用加载器（Loaders）来处理不同类型的文件，例如将 ES6 代码转换为 ES5、处理样式文件、图片等。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><ul><li><strong><code>package.json</code> 新增依赖</strong> </li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308102227203.png" alt="image-20230810222711172" style="float:left"></p><h3 id="第五步：配置加载器"><span class="post-title-index">3.5. </span><a href="#第五步：配置加载器" class="headerlink" title="第五步：配置加载器"></a>第五步：配置加载器</h3><blockquote><p>在配置文件中，配置加载器来处理不同类型的文件。例如， CSS 加载器用于处理样式文件。</p></blockquote><ul><li><code>webpack.config.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="comment">// 匹配 JavaScript 文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除 node_modules 目录</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配 CSS 文件</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] <span class="comment">// 先使用 css-loader 处理，再使用 style-loader 处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第六步：运行构建"><span class="post-title-index">3.6. </span><a href="#第六步：运行构建" class="headerlink" title="第六步：运行构建"></a>第六步：运行构建</h3><blockquote><p>使用命令行运行 Webpack，它将根据配置文件开始构建项目。</p></blockquote><ul><li><code>package.json</code></li></ul><blockquote><p>删除：”main”: “index.js”,</p><p>新增：”private”: true, </p><p>新增·：”build”: “webpack —config webpack.config.js”</p><p>我们安装包是 <code>private</code>（私有的），并移除 <code>main</code> 入口。这可以防止意外发布你的代码。</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;01_webpack&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line"><span class="deletion">-  &quot;main&quot;: &quot;index.js&quot;,</span></span><br><span class="line"><span class="addition">+  &quot;private&quot;: true,</span></span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line"><span class="addition">+    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;css-loader&quot;: &quot;^6.8.1&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^3.3.3&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^5.88.2&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^5.1.4&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308102230417.gif" alt="动画"></p><hr><h2 id="Webpack-配置-Vue2-X"><span class="post-title-index">4. </span><a href="#Webpack-配置-Vue2-X" class="headerlink" title="Webpack 配置 Vue2.X"></a><code>Webpack</code> 配置 <code>Vue2.X</code></h2><blockquote><p>我们基于上面的案例，设置一个基本的 Vue 项目并使用 Webpack 进行构建。</p><p>这个示例包含了一个基本的 Vue 组件、Webpack 配置以及用于开发和构建的命令。</p></blockquote><h3 id="第一步：安装-Webpack-1"><span class="post-title-index">4.1. </span><a href="#第一步：安装-Webpack-1" class="headerlink" title="第一步：安装 Webpack"></a>第一步：安装 <code>Webpack</code></h3><ul><li>执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">mkdir</span> 02_webpack_vue</span><br><span class="line">&gt; <span class="built_in">cd</span> .\02_webpack_vue\</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">&gt; npm init -y </span><br><span class="line"><span class="comment"># 添加依赖</span></span><br><span class="line"><span class="comment"># - webpack@4.46.0: 前端构建工具，用于打包和处理资源</span></span><br><span class="line"><span class="comment"># - webpack-cli@4.7.2: webpack 的命令行工具，方便在命令行中使用 webpack</span></span><br><span class="line">&gt; npm install webpack@4 webpack-cli@3 --save-dev </span><br></pre></td></tr></table></figure><ul><li>文件目录</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01_webpack</span><br><span class="line">  |- /node_modules</span><br><span class="line">  |- package.json</span><br><span class="line">  |- package-lock.json</span><br></pre></td></tr></table></figure><h3 id="第二步：创建组件"><span class="post-title-index">4.2. </span><a href="#第二步：创建组件" class="headerlink" title="第二步：创建组件"></a>第二步：创建组件</h3><ul><li>创建 <code>/src/App.vue</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello, Vue with Webpack!&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件目录</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">01_webpack</span><br><span class="line">  |- /node_modules</span><br><span class="line">  |- package.json</span><br><span class="line">  |- package-lock.json</span><br><span class="line"><span class="addition">+ |- /dist</span></span><br><span class="line"><span class="addition">+ |- /src</span></span><br><span class="line"><span class="addition">+ |- App.vue</span></span><br></pre></td></tr></table></figure><h3 id="第三步：创建文件入口"><span class="post-title-index">4.3. </span><a href="#第三步：创建文件入口" class="headerlink" title="第三步：创建文件入口"></a>第三步：创建文件入口</h3><ul><li>创建 <code>/src/main.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>) <span class="comment">// 使用 render 函数渲染 App 组件，并将其挂载到 id 为 &#x27;app&#x27; 的元素上</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>); <span class="comment">// 手动挂载 Vue 实例到 id 为 &#x27;app&#x27; 的元素上</span></span><br></pre></td></tr></table></figure><ul><li>文件目录</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">01_webpack</span><br><span class="line">  |- /node_modules</span><br><span class="line">  |- package.json</span><br><span class="line">  |- package-lock.json</span><br><span class="line">  |- /src</span><br><span class="line"> |- App.vue</span><br><span class="line"><span class="addition">+ |- main.js</span></span><br></pre></td></tr></table></figure><h3 id="第四步：创建文件"><span class="post-title-index">4.4. </span><a href="#第四步：创建文件" class="headerlink" title="第四步：创建文件"></a>第四步：创建文件</h3><ul><li><p>创建 <code>/src/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Webpack Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="第五步：添加依赖"><span class="post-title-index">4.5. </span><a href="#第五步：添加依赖" class="headerlink" title="第五步：添加依赖"></a>第五步：添加依赖</h3><ul><li>执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装了以下开发依赖：</span></span><br><span class="line"><span class="comment"># - vue@2.6.14: Vue 2.x 版本，用于构建用户界面</span></span><br><span class="line"><span class="comment"># - vue-loader@15.9.8: 用于加载和解析 Vue 单文件组件</span></span><br><span class="line"><span class="comment"># - vue-template-compiler@2.6.14: 用于编译 Vue 单文件组件中的模板</span></span><br><span class="line"><span class="comment"># - webpack-dev-server@3.11.2: 开发服务器，用于在开发过程中提供实时预览和热重载</span></span><br><span class="line"><span class="comment"># - html-webpack-plugin@5.3.2: 自动生成 HTML 文件，并将打包后的资源自动引入</span></span><br><span class="line"><span class="comment"># - css-loader@6.3.0: 用于加载和解析 CSS 文件，使其能够在项目中使用</span></span><br><span class="line"><span class="comment"># - vue-style-loader@4.1.3: 用于加载 Vue 单文件组件中的样式</span></span><br><span class="line">&gt; npm install vue@2.6.14 vue-loader@15.9.8 vue-template-compiler@2.6.14 webpack-dev-server@3.11.2 html-webpack-plugin@3.2.0 css-loader@3.6.0 vue-style-loader@4.1.3 --save-dev</span><br></pre></td></tr></table></figure><h3 id="第六步：配置加载器"><span class="post-title-index">4.6. </span><a href="#第六步：配置加载器" class="headerlink" title="第六步：配置加载器"></a>第六步：配置加载器</h3><ul><li>创建 <code>webpack.config.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,  <span class="comment">// 入口文件，指定项目的起始位置</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,  <span class="comment">// 输出文件名，打包后的 JavaScript 文件将命名为 bundle.js</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)  <span class="comment">// 输出路径，打包后的文件将存放在 dist 目录中</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,  <span class="comment">// 匹配以 .vue 结尾的文件</span></span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;vue-loader&#x27;</span>  <span class="comment">// 使用 vue-loader 处理 Vue 单文件组件</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,  <span class="comment">// 匹配以 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;vue-style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]  <span class="comment">// 先使用 vue-style-loader 处理样式，再使用 css-loader 加载 CSS 文件</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span>  <span class="comment">// 使用 index.html 作为模板生成 HTML 文件，并自动引入打包后的资源</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第七步：运行构建"><span class="post-title-index">4.7. </span><a href="#第七步：运行构建" class="headerlink" title="第七步：运行构建"></a>第七步：运行构建</h3><ul><li><code>package.json</code></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;01_webpack&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line"><span class="deletion">-  &quot;main&quot;: &quot;index.js&quot;,</span></span><br><span class="line"><span class="addition">+  &quot;private&quot;: true,</span></span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line"><span class="addition">+    &quot;dev&quot;: &quot;webpack-dev-server --open&quot;,</span></span><br><span class="line"><span class="addition">+    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;css-loader&quot;: &quot;^3.6.0&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.14&quot;,</span><br><span class="line">    &quot;vue-loader&quot;: &quot;^15.9.8&quot;,</span><br><span class="line">    &quot;vue-style-loader&quot;: &quot;^4.1.3&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.6.14&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.46.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.12&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行构建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308110036639.png" alt="image-20230811003600613" style="float:left;"></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-生命周期（三）</title>
      <link href="/posts/a886c21.html"/>
      <url>/posts/a886c21.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>具体细节参考 <a href="https://cn.vuejs.org/guide/introduction.html"><code>Vue</code> 官方文档</a> ，本章节会详细讲解到 <code>Vue</code> 的生命周期，理解了生命周期可以在不同的阶段更好的管理组件。</p></blockquote><p>本章节会通过如下内容来讲解：</p><ul><li>生命周期基本概念</li><li><code>Vue</code> 的生命周期<ul><li><code>Vue</code> 每个阶段做了哪些事情</li><li><code>Vue</code> 代码详解</li></ul></li></ul><hr><h2 id="生命周期"><span class="post-title-index">2. </span><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>生命周期：就是从出生到死亡的一个过程，无论是在生活中还是在程序中都适用。</p><p>生命周期代表一个实体的整个生存过程，包括创建（出生）、更新（成长）、销毁（死亡）等阶段。</p></blockquote><hr><h2 id="Vue2-X-生命周期"><span class="post-title-index">3. </span><a href="#Vue2-X-生命周期" class="headerlink" title="Vue2.X 生命周期"></a><code>Vue2.X</code> 生命周期</h2><ol><li><p><strong>🤔思考：那 <code>Vue</code> 和人的生命周期有什么关系呢？</strong></p><ul><li>创建（出生）：<code>created</code> </li><li>更新（成长）：<code>mounted</code></li><li>销毁（死亡）：<code>destroyed</code></li></ul></li><li><p><strong>🤔思考：那 <code>Vue</code> 的生命周期可以抽象为那几个过程呢？</strong></p><p>可以分为四个阶段，八个过程，具体信息如下：</p><div class="tabs" id="explain"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#explain-1">创建阶段</button></li><li class="tab"><button type="button" data-href="#explain-2">成长阶段</button></li><li class="tab"><button type="button" data-href="#explain-3">更新阶段</button></li><li class="tab"><button type="button" data-href="#explain-4">销毁阶段</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="explain-1"><p>在这个阶段，Vue 组件正在创造和准备自己，就像一个人从诞生到成长的过程。</p><p><strong><code>beforeCreate</code></strong> </p><ul><li>在组件实例初始化完成之后立即调用</li><li><code>vue</code> 实例的<strong>挂载元素</strong> <code>$el</code> 和 <strong>数据对象</strong> <code>data</code> 都为 <strong><code>undefined</code></strong>，还未初始化。</li><li>类似在人出生前，家庭在准备迎接新成员，但孩子还没有呱呱坠地。</li></ul><p><strong><code>create</code></strong> </p><ul><li>在组件实例处理完所有与状态相关的选项后调用。</li><li><code>vue</code> 实例的 <strong>数据对象</strong><code>data</code>有了，<code>$el</code> 还没有</li><li>类似孩子出生后，已经成为一个个体，可以开始认识世界，但还没有参与到各种活动中。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-2"><p>这个阶段类似于一个人的成长过程，Vue 组件与用户进行交互，更新状态，不断发展。</p><p><strong><code>beforeMount</code></strong></p><ul><li>在组件被挂载到 <code>DOM</code> 之前调用。</li><li><code>vue</code> 实例的 <code>$el</code> 和 <code>data</code> 都初始化了，但还是虚拟的 <code>DOM</code> 节点，具体的 <code>data.filter</code> 还未替换。</li><li>类似孩子成长为学童，准备进入学校阶段，但尚未真正开始上课</li></ul><p><strong><code>mounted</code></strong></p><ul><li>在组件被挂载到 <code>DOM</code> 上后调用，这是初始化过程的最后一个阶段。</li><li><code>vue</code> 实例挂载完成，<code>data.filter</code> 成功渲染。</li><li>类似孩子已经进入学校，可以和同学互动，参加各种活动，融入社交圈。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-3"><p>这个阶段类似于一个人在成长过程中的不断更新和变化，Vue 组件会根据数据的变化进行更新。</p><p><strong><code>beforeUpdate</code></strong></p><ul><li>在组件即将因为一个响应式状态变更而更新其 DOM 树之前调用。</li><li><code>data</code> 更新时触发，当虚拟DOM中的data发生改变时触发，此时虚拟DOM没有加载到页面上。<br>页面上的数据不变，虚拟DOM中的数据改变。</li><li>类似一个人在改变自己的日常习惯，但尚未完全转变为新状态。</li></ul><p><strong><code>updated</code></strong></p><ul><li>在组件因为一个响应式状态变更而更新其 DOM 树之后调用。</li><li><code>data</code> 更新时触发，虚拟DOM中的data发生改变页面上的data也发生改变（即新生成的虚拟DOM挂载上页面了）</li><li>类似人已经适应了新的习惯，改变已经生效并完成更新。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-4"><p>这个阶段类似于一个人的寿命终结阶段，Vue 组件准备完成最终的清理和结束。</p><p><strong><code>beforeDestroy</code></strong></p><ul><li>在实例销毁之前被调用。可以进行清理工作，如取消定时器、解绑事件等。</li><li>组件销毁时触发</li><li>类似一个人在离世前，安排遗愿和做一些后事的准备。</li></ul><p><strong><code>destroyed</code></strong></p><ul><li>在实例销毁之后被调用。此时组件已经被完全销毁，事件监听和数据绑定都被解除。</li><li>组件销毁时触发，<code>vue</code> 实例解除了事件监听以及和 <code>DOM</code> 绑定（无响应了），但 <code>DOM</code>节点依旧存在</li><li>类似一个人已经离世，所有关联的事物都已经解除。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p><strong>💡<code>Vue</code> 生命周期图解</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308091741172.png" alt="Vue 实例生命周期" style="zoom:67%;float:left"></p></li><li><p><strong>🛠️代码实现</strong></p><p>假设 通过 计数器 按钮实现 <code>Vue</code> 的生命周期</p><ul><li><code>HTML</code> 模板和数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>计数器：&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span>销毁<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line">        this.counter++;</span><br><span class="line">      &#125;,</span><br><span class="line">      destroy() &#123;</span><br><span class="line">        this.$destroy();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">      console.log(&#x27;beforeCreate: 实例正在创建中 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      console.log(&#x27;created: 实例已创建 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount() &#123;</span><br><span class="line">      console.log(&#x27;beforeMount: 在挂载到 DOM 之前 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      console.log(&#x27;mounted: 实例已挂载到 DOM ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpdate() &#123;</span><br><span class="line">      console.log(&#x27;beforeUpdate: 在更新数据之前 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    updated() &#123;</span><br><span class="line">      console.log(&#x27;updated: 数据已更新 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">      console.log(&#x27;beforeDestroy: 实例即将被销毁 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed() &#123;</span><br><span class="line">      console.log(&#x27;destroyed: 实例已被销毁 ==&gt; 实例(this.counter)：&#x27;, this.counter, &#x27;，DOM节点：&#x27;, this.$el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308091812537.gif" alt="动画" style="float:left"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-基础语法（二）</title>
      <link href="/posts/ce705295.html"/>
      <url>/posts/ce705295.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>具体细节参考 <a href="https://cn.vuejs.org/guide/introduction.html"><code>Vue</code> 官方文档</a> ，这一章的内容非常重要，我们开发完成之后会通过一个案例将这些知识点全部串起来。</p></blockquote><p>本文主要将讲解 <code>Vue</code> 的基础语法，包括如下内容：</p><ul><li>条件渲染（ v-if 、v-else、v-else-if、v-show）</li><li>列表渲染（ v-for ）</li><li>属性绑定（ v-bind、v-model ）</li><li>事件处理（ v-on ）</li><li>计算属性（ computed ）</li><li>监听器（ watch ）</li><li>Class 与 Style 绑定</li><li>任务清单-案例</li></ul><hr><h2 id="条件渲染"><span class="post-title-index">2. </span><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><blockquote><p>如下四个条件渲染指令在开发中使用频率非常高，类似于java中的 <code>if</code>、<code>else</code>、<code>else-if</code>。例如，任务状态信息等需求。</p><ul><li><code>v-if</code></li><li><code>v-else</code></li><li><code>v-else-if</code></li><li><code>v-show</code></li></ul></blockquote><h3 id="v-if"><span class="post-title-index">2.1. </span><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><blockquote><p><code>v-if</code>：用于条件判断指令，一般用于界面内容的渲染，该指令会走表达式为 <code>true</code> 的分支。</p></blockquote><h3 id="v-else"><span class="post-title-index">2.2. </span><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><blockquote><p><code>v-else</code>: 一般结合 <code>v-if</code> 使用，该指令走与 <code>v-if</code> 相反的分支。</p></blockquote><h3 id="v-else-if"><span class="post-title-index">2.3. </span><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><blockquote><p><code>v-else-if</code>：提供的是相应于v-if的，它可以连续多次重复使用。</p><p><code>v-else</code> 和 <code>v-else-if</code> 必须紧跟在 <code>v-if</code> 或 <code>v-else-if</code> 的后面，并且它们只能与相同父元素的 <code>v-if</code> 或 <code>v-else-if</code> 一起使用。</p></blockquote><p>具体信息如下图</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308071540037.png" style="zoom:50%;float:left"></p><p>假设，根据 <code>type</code> 类型展示不同的字母。</p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span> B <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span> C <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span> Not A/B/C <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      type: &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308071608321.png" alt="image-20230807160807290" style="zoom:100%;float:left"></p><h3 id="v-show"><span class="post-title-index">2.4. </span><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><blockquote><p><code>v-show</code>：也是条件渲染指令，控制元素显示或者隐藏。 用法与 <code>v-if</code> 一致，但不能和 <code>v-else</code> 和 <code>v-else-if</code> 一起使用。</p></blockquote><p>假设，根据 <code>type</code> 类型展示不同的字母。</p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 的实例和数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      type: &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308071608321.png" alt="image-20230807160807290" style="zoom:100%;float:left"></p><h3 id="v-if-和-v-show-区别"><span class="post-title-index">2.5. </span><a href="#v-if-和-v-show-区别" class="headerlink" title="v-if 和 v-show 区别"></a><code>v-if</code> 和 <code>v-show</code> 区别</h3><ol><li><p><strong>渲染方式</strong></p><ul><li><code>v-if</code>：当条件为 <code>false</code> 时，元素中不会在 <code>DOM</code> 中存在，它会被完全移除。</li><li><code>v-show</code>：当条件为 <code>false</code> 时，元素仍然在 <code>DOM</code> 中存在，但是通过CSS样式将其隐藏（display）。</li></ul></li><li><p><strong>性能开销</strong></p><ul><li><code>v-if</code>：当条件为 <code>true</code> 时，<code>Vue</code> 会重新创建元素并渲染。当条件为 <code>false</code> 时，元素不会被渲染。这也就是说只要切换条件，元素都需要被创新创建和销毁，如果切换频繁这需要的性能开销就比较大了。</li><li><code>v-show</code>：当条件不管是 <code>true</code> 或者 <code>false</code> 元素都已经被渲染完成了，所以就不存在切换时的性能开销。</li></ul></li><li><p><strong>如何选择</strong></p><ul><li><p><code>v-if</code>：当条件为 <code>false</code> 时，我们也希望减少相关的 <code>DOM</code> 数量，那我们使用 <code>v-if</code> 就是合适的。</p><p>例如如下代码中，我希望展示列表页时，删除详情页的页面信息减少请求次数，就可以使用 <code>v-if</code> 来完成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class-style&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据状态渲染不同组件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当状态为 &#x27;list&#x27; 时，显示列表页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list-page</span> <span class="attr">v-if</span>=<span class="string">&quot;status === &#x27;list&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当状态为 &#x27;detail&#x27; 时，显示详情页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">detail-page</span> <span class="attr">v-else-if</span>=<span class="string">&quot;status === &#x27;detail&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">detail-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ListPage</span> <span class="keyword">from</span> <span class="string">&#x27;./ListPage.vue&#x27;</span>; <span class="comment">// 导入列表页组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">DetailPage</span> <span class="keyword">from</span> <span class="string">&#x27;./DetailPage.vue&#x27;</span>; <span class="comment">// 导入详情页组件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ListPage</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">DetailPage</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">status</span>: <span class="string">&#x27;list&#x27;</span>, <span class="comment">// 默认状态为 &#x27;list&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-show</code>：如果需要频繁切换时，而不产生较大的性能开销时，我们就可以使用 <code>v-show</code>。</p><p>例如如下代码中， 展开/收起文章的详细内容时。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; article.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleContent(article)&quot;</span>&gt;</span>Toggle Content<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;article.showContent&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; article.content &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">article</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;Article&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;Content of Article&#x27;</span>, <span class="attr">showContent</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">toggleContent</span>(<span class="params">article</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      article.<span class="property">showContent</span> = !article.<span class="property">showContent</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="列表渲染"><span class="post-title-index">3. </span><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><blockquote><p>列表渲染（<code>v-for</code>）是非常非常非常常用的一个指令，在开发中 100% 会使用到的一个指令，类似于 <code>java</code> 中的 <code>for</code> 循环。</p></blockquote><h3 id="v-for"><span class="post-title-index">3.1. </span><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote><p><code>v-for</code>：基于一个数组进行列表的渲染。例如，我们的 <code>form</code> 表单就一定会使用到。</p></blockquote><ul><li>语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;&#123; message &#125; in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有 index 索引时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(&#123; message &#125;, index) in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125; &#123;&#123; index &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假设我们有一个数组，需要将数组里面的元素全部遍历出来，使用 <code>v-for</code> 实现。</p><ul><li><p><code>HTML</code> 模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.message &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Vue</code> 实例和数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">items</span>: [</span><br><span class="line">        &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308071719211.png" alt="image-20230807171914191" style="zoom:100%;float:left"></p></li></ul><hr><h2 id="属性绑定"><span class="post-title-index">4. </span><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><blockquote><p>属性绑定：在前端页面中如果需要将数据绑定在 <code>HTML</code> 元素或者表单的属性上时，我们需要这些属性绑定的值可以随着数据的变化而进行更新。</p><p>在属性绑定中，常用的指令有如下两种：</p><ul><li><code>v-bind</code></li><li><code>v-model</code></li></ul></blockquote><h3 id="v-bind"><span class="post-title-index">4.1. </span><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><blockquote><p><code>v-bind</code>：用于将数据绑定到 <strong><code>HTML</code> 元素</strong> 上，使属性值可以动态的随数据的变化而变化。 </p><p>如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p></blockquote><ul><li>语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中 <code>v-bind</code> 可以省略不写，直接简化为 <code>:</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中针对 <code>v-bind</code> 的典型用法应该时分页条，如下是 <a href="https://element-plus.org/zh-CN/component/pagination.html#%E8%AE%BE%E7%BD%AE%E6%9C%80%E5%A4%A7%E9%A1%B5%E7%A0%81%E6%8C%89%E9%92%AE%E6%95%B0"><code>Element-ui</code> 分页条</a> 的用法。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308071821319.png" alt="image-20230807182109294" style="zoom:80%;float:left"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">:page-size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">:pager-count</span>=<span class="string">&quot;11&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><span class="post-title-index">4.2. </span><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><blockquote><p><code>v-model</code>：用于将数据绑定在 <strong>表单元素（文本输入框、复选框、单选按钮等等）</strong> 上创建双向绑定数据，可以实现用户的输入与数据之间的同步。</p></blockquote><ul><li>语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>假设我们将多个复选框绑定到同一个数组</p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">checkedNames</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308072218364.gif" alt="动画" style="float:left;"></p><hr><h2 id="事件处理"><span class="post-title-index">5. </span><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p>事件处理：在前端开发中我们有时需要监听 <code>DOM</code> 事件，并在触发时执行相应的 <code>JavaScript</code> 代码，控制数据的变化或执行特定的操作。</p><p>事件处理的值可以是如下两种：</p><ul><li><strong>内联事件处理器</strong></li><li><strong>方法事件处理器</strong></li><li><strong>自定义事件处理器（后面在组建通信时讲解）</strong></li><li>按钮修饰符</li></ul></blockquote><ul><li><code>Vue</code> 语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span> Click Me <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>简写：省略 <code>v-on:</code> 修改为 <code>@</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span> Click Me <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联事件处理器"><span class="post-title-index">5.1. </span><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器</h3><blockquote><p>内联事件处理器：指的是在 <code>HTML</code> 元素中指定事件监听函数，类似于 <code>JavaScript</code> 的 <code>onclick</code> 事件。</p></blockquote><p>假设我们现在通过 <code>内联事件处理器</code> 实现点击按钮数字<code>＋1</code></p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> Count is: &#123;&#123; count &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308081152597.gif" alt="动画" style="float:left"></p><h3 id="方法事件处理器"><span class="post-title-index">5.2. </span><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h3><blockquote><p>方法事件处理器：如果简单的案例可以通过 <code>内联事件处理器</code> 进行解决，但业务一旦复杂，那么 <code>内联事件处理器</code> 的劣势（不够灵活）就出来了。这个时候我们将点击事件的处理逻辑提出来抽成一个方法，就形成了 <code>方法事件处理器</code>。</p></blockquote><p> 假设我们现在通过 <code>方法事件处理器</code> 实现点击按钮数字<code>＋1</code>。如下的案例虽然很简单，但是后续我们</p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> Count is: &#123;&#123; count &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308081209134.gif" alt="动画" style="float:left"></p><hr><h2 id="计算属性"><span class="post-title-index">6. </span><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><blockquote><p>计算属性：我们在开发中，无法避免两个属性发生计算的，一旦某个属性的值发生变化，那么他们计算出来的结果也一定会发生变化，这个时候就需要使用到属性计算了。</p></blockquote><h3 id="computed"><span class="post-title-index">6.1. </span><a href="#computed" class="headerlink" title="computed"></a>computed</h3><blockquote><p>computed：当其依赖的属性的值发生变化的时，计算属性会重新计算。</p></blockquote><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>假设我们需要判断当前数组的数量是否显示元素，不使用 计算属性 <code>computed</code></strong></p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">author</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">          <span class="attr">books</span>: [</span><br><span class="line">            <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308081357460.png" alt="image-20230808135722435" style="float:left"></p><p><strong>假设我们需要判断当前数组的数量是否显示元素，使用 计算属性 <code>computed</code></strong></p><p><strong>计算属性带来的优点</strong></p><ul><li>复用性高：如果在后期我们使用组件开发，那将会导致大量的冗余代码。如果使用 <code>computed</code> 把复杂的逻辑封装为一个属性，使模板中的代码更简洁、易读。</li><li>性能提高： 计算属性具有自动缓存机制，只有当其依赖的响应式数据发生变化时，才会重新计算。</li></ul><p>使用 <code>computed</code> 修改之后的代码如下</p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">author</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">          <span class="attr">books</span>: [</span><br><span class="line">            <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="comment">// 一个计算属性的 getter</span></span><br><span class="line">      publishedBooksMessage () &#123;</span><br><span class="line">        <span class="comment">// `this` 指向当前组件实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">author</span>.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="监听器"><span class="post-title-index">7. </span><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><blockquote><p>监听器：监听观察某个事件（程序）发生变化时，事件发生者（事件源） 就会给注册该事件的监听者（监听器）发送消息，告诉监听者某些信息已经发生变化了。</p></blockquote><h3 id="watch"><span class="post-title-index">7.1. </span><a href="#watch" class="headerlink" title="watch"></a>watch</h3><blockquote><p>watch：在 <code>Vue</code> 中，监听器通常指的是 <code>watch</code> 去监听属性来响应数据的变化。</p></blockquote><ul><li>浅层监听器语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>深层监听器语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">someObject</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意：在嵌套的变更中，</span></span><br><span class="line">        <span class="comment">// 只要没有替换对象本身，</span></span><br><span class="line">        <span class="comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>❔监听器和计算属性有什么区别呢</strong></p><ul><li><p><strong>异步操作</strong>：如果说我们需要的数据发生变化需要调用外部 <code>API</code> 时，使用计算属性是不行的，因为计算属性采用的是同步，而监听器采用的异步。</p></li><li><p><strong>监控多个数据变化</strong>：如果说我们需要监听多个数据源发生变化，并且只要其中一个数据发生变化时就执行操作。那么监听器是更加合适的。</p></li></ul><p>假设我们使用监听器实现登录功能，需求如下：</p><ol><li>用户名长度必须大于5</li><li>密码长度必须大于8</li><li>登录按钮必须满足以上两个条件才可以登录</li></ol><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login Form<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isValid&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code>  实例和数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        username: &quot;&quot;,</span><br><span class="line">        password: &quot;&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      isValid() &#123;</span><br><span class="line">        return this.username.length &gt;= 5 &amp;&amp; this.password.length &gt;= 8;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      username(newValue, oldValue) &#123;</span><br><span class="line">        console.log(`Username changed from $&#123;oldValue&#125; to $&#123;newValue&#125;`);</span><br><span class="line">      &#125;,</span><br><span class="line">      password(newValue, oldValue) &#123;</span><br><span class="line">        console.log(`Password changed from $&#123;oldValue&#125; to $&#123;newValue&#125;`);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308081554548.gif" alt="动画"></p><hr><h2 id="Class-与-Style-绑定"><span class="post-title-index">8. </span><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><blockquote><p><strong>Class</strong> 与 <strong>Style</strong> 绑定：指的是将 <code>HTML</code> 元素的样式与 <code>CSS</code> 类进行联动的过程。</p></blockquote><h3 id="Class-绑定"><span class="post-title-index">8.1. </span><a href="#Class-绑定" class="headerlink" title="Class 绑定"></a><code>Class</code> 绑定</h3><blockquote><p>通过为 HTML 元素添加一个或多个类名，你可以将元素与预定义的 <code>CSS</code> 样式规则关联起来。</p></blockquote><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box red-border&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>CSS</code> 样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red-border</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Style-绑定"><span class="post-title-index">8.2. </span><a href="#Style-绑定" class="headerlink" title="Style 绑定"></a><code>Style</code> 绑定</h3><blockquote><p>内联样式是直接在 HTML 元素中使用 <code>style</code> 属性来定义样式。</p></blockquote><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background-color: lightgray;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内联样式虽然灵活，但通常不推荐在大规模项目中频繁使用，因为它容易导致代码混乱，难以维护。</p><h3 id="Vue-绑定-class"><span class="post-title-index">8.3. </span><a href="#Vue-绑定-class" class="headerlink" title="Vue 绑定  class"></a><code>Vue</code> 绑定  <code>class</code></h3><blockquote><p>属性绑定的一个常见需求场景是操纵元素的 <code>CSS class</code> 列表和内联样式，这个需求是非常常见的。例如我们需要通过按钮控制表单是需要编辑还是保存。</p></blockquote><ul><li>语法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假设我们通过按钮控制字体的样式</p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleStatus(task)&quot;</span>&gt;</span>Toggle Status<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span>&gt;</span>Dynamic Class Binding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isActive: false,</span><br><span class="line">        hasError: false</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      toggleStatus() &#123;</span><br><span class="line">        this.isActive = !this.isActive</span><br><span class="line">        this.hasError = !this.hasError</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><code>css</code> 样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.text-danger</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308082113970.gif" alt="动画"></p><p>如下代码还可以改写为如下样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggleStatus(task)&quot;</span>&gt;</span>Toggle Status<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span>Dynamic Class Binding<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isActive</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hasError</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">classObject</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;text-danger&#x27;</span>: <span class="variable language_">this</span>.<span class="property">hasError</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">toggleStatus</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isActive</span> = !<span class="variable language_">this</span>.<span class="property">isActive</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">hasError</span> = !<span class="variable language_">this</span>.<span class="property">hasError</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="任务清单-案例"><span class="post-title-index">9. </span><a href="#任务清单-案例" class="headerlink" title="任务清单-案例"></a>任务清单-案例</h2><p>需求如下</p><ol><li>通过输入框输入任务点，添加到任务列表中；</li><li>在添加的任务点通过按钮实现任务是否完成以及删除任务点；</li><li>统计已经完成的任务数量</li><li>需要将任务列表添加进缓存，实现关闭浏览器也可以展示任务清单列表</li></ol><p>效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308082346330.gif" alt="动画" style="float:left"></p><ol><li><p><strong>实现前端页面</strong></p><ul><li><code>HTML</code> 前端页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Todo 任务清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;回车添加任务清单&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span> 任务点 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span> 是否完成 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span> 删除任务 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>已经完成的任务数量：0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>通过输入框输入任务点，添加到任务列表中</strong></p><ul><li><code>HTML</code> 前端页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Todo 任务清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;addTask&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;newTask&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;回车添加任务清单&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(task , index) in taskList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; task.task &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span> 是否完成 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span> 删除任务 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>已经完成的任务数量：0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">newTask</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">taskList</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="comment">// 添加任务点</span></span><br><span class="line">      <span class="title function_">addTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">newTask</span>.<span class="title function_">trim</span>() !== <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">push</span>(&#123;<span class="attr">task</span>: <span class="variable language_">this</span>.<span class="property">newTask</span>&#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">newTask</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308090048518.gif" alt="动画" style="float:left"></p></li><li><p><strong>在添加的任务点通过按钮实现任务 是否完成 以及 删除任务 </strong></p><ul><li><code>HTML</code> 前端页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Todo 任务清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;addTask&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;newTask&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;回车添加任务清单&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(task , index) in taskList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: task.isActive &#125;&quot;</span>&gt;</span> &#123;&#123; task.task &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;completedTask(task)&quot;</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTask(index)&quot;</span>&gt;</span>删除任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>已经完成的任务数量：0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>CSS</code> 样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">newTask</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">taskList</span>: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="comment">// 添加任务点</span></span><br><span class="line">      <span class="title function_">addTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">newTask</span>.<span class="title function_">trim</span>() !== <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">push</span>(&#123;<span class="attr">task</span>: <span class="variable language_">this</span>.<span class="property">newTask</span>, <span class="attr">isActive</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">newTask</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 是否完成</span></span><br><span class="line">      <span class="title function_">completedTask</span>(<span class="params">task</span>) &#123;</span><br><span class="line">        task.<span class="property">isActive</span> = !task.<span class="property">isActive</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 删除任务</span></span><br><span class="line">      <span class="title function_">removeTask</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>结果</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308090055891.gif" alt="动画" style="float:left"></p></li></ul></li><li><p><strong>统计已经完成的任务数量</strong></p><ul><li><code>HTML</code> 模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Todo 任务清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;addTask&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;newTask&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;回车添加任务清单&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(task , index) in taskList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: task.isActive &#125;&quot;</span>&gt;</span> &#123;&#123; task.task &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;completedTask(task)&quot;</span>&gt;</span>是否完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTask(index)&quot;</span>&gt;</span>删除任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>已经完成的任务数量：&#123;&#123; finishedTotal &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="comment">// 属性计算</span></span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="title function_">finishedTotal</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">taskList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">isActive</span>).<span class="property">length</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308082346330.gif" alt="动画" style="float:left"></p></li><li><p><strong>需要将任务列表添加进缓存，实现关闭浏览器也可以展示任务清单列表</strong></p><ul><li><code>Vue</code> 实例和数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        newTask: &#x27;&#x27;,</span><br><span class="line">        taskList: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 监听数组</span><br><span class="line">    watch: &#123;</span><br><span class="line">      taskList: &#123;</span><br><span class="line">        handler(newTaskList, oldTaskList) &#123;</span><br><span class="line">          localStorage.setItem(&#x27;taskList&#x27;, JSON.stringify(newTaskList));</span><br><span class="line">        &#125;,</span><br><span class="line">        deep: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 在生命周期中会讲到 created</span><br><span class="line">    created() &#123;</span><br><span class="line">        const storedTasks = JSON.parse(localStorage.getItem(&quot;taskList&quot;));</span><br><span class="line">        if (storedTasks) &#123;</span><br><span class="line">          this.taskList = storedTasks;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202308090121139.gif" alt="动画"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-基础概念（一）</title>
      <link href="/posts/1b94845f.html"/>
      <url>/posts/1b94845f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue是什么❔"><span class="post-title-index">1. </span><a href="#Vue是什么❔" class="headerlink" title="Vue是什么❔"></a><code>Vue</code>是什么❔</h2><div class="note success simple"><p><code>Vue</code> 是一个开源的 <code>MVVM</code> 前端 <code>JavaScript</code> 框架，用于在 <code>Web</code> 上生成用户界面和单页应用程序。</p></div><p>通过 对比 <code>MVC</code> 架构和 <code>MVVM</code> 架构，可以明显看到使用 <code>Vue</code> 之后的区别</p><h3 id="MVC-架构"><span class="post-title-index">1.1. </span><a href="#MVC-架构" class="headerlink" title="MVC 架构"></a><code>MVC</code> 架构</h3><blockquote><p>以 JQuery，LayUI 为代表的一系列架构。这个时候前后端并没有分离的很彻底</p><p>M：Model（模型），负责存储数据和应用程序逻辑。</p><p>V：View（视图），负责显示数据和用户界面。</p><p>C：Controller（控制器），负责处理用户输入和应用程序逻辑。</p></blockquote><p><strong>图解</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ibG9naW1hZ2UtMTI1NTYxODU5Mi5jb3MuYXAtY2hlbmdkdS5teXFjbG91ZC5jb20vaW1nMjAyMDAzMTgyMDQ4NDMucG5n" alt="MVC与三层架构理解 - 全栈程序员必看" style="zoom:50%;float:left"></p><p><strong>我们通过待办任务事项 代码 来展示</strong></p><ul><li><code>Model</code> 模型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （Model）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        tasks.add(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTask</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        tasks.remove(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTasks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tasks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>View</code> 视图</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskView</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTasks</span><span class="params">(List&lt;String&gt; tasks)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String task : tasks) &#123;</span><br><span class="line">            System.out.println(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Controller</code> 控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TaskModel model;</span><br><span class="line">    <span class="keyword">private</span> TaskView view;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskController</span><span class="params">(TaskModel model, TaskView view)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">        <span class="built_in">this</span>.view = view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        model.addTask(task);</span><br><span class="line">        updateView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTask</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        model.removeTask(task);</span><br><span class="line">        updateView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateView</span><span class="params">()</span> &#123;</span><br><span class="line">        view.showTasks(model.getTasks());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MVCDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TaskModel</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskModel</span>();</span><br><span class="line">        <span class="type">TaskView</span> <span class="variable">view</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskView</span>();</span><br><span class="line">        <span class="type">TaskController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskController</span>(model, view);</span><br><span class="line"></span><br><span class="line">        controller.addTask(<span class="string">&quot;买食品&quot;</span>);</span><br><span class="line">        controller.addTask(<span class="string">&quot;完成作业&quot;</span>);</span><br><span class="line">        controller.removeTask(<span class="string">&quot;买食品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MVVM-架构"><span class="post-title-index">1.2. </span><a href="#MVVM-架构" class="headerlink" title="MVVM 架构"></a><code>MVVM</code> 架构</h3><blockquote><p>以 Vue、Angular、React为代表的一系列框架</p><p><code>MVVM (Model-View-ViewModel)</code> 架构可以理解为 <code>MVC</code> 的增强版。</p><p>M：Model（模型），负责存储数据和业务逻辑。</p><p>V：View（视图），负责用户界面的显示。</p><p>VM：ViewModel（视图模型）， MVVM 的核心，它负责将视图与模型之间的通信和数据绑定，即双向绑定。</p></blockquote><p><strong>图解</strong></p><p><img src="https://pic4.zhimg.com/80/edd0080fb145315fbc96164c219fee7e_hd.jpg" alt="vue-mvvm设计模式" style="zoom:50%;float:left"></p><p><strong>代码详解</strong></p><ul><li><code>Model</code> 模型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （Model）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTask</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        tasks.add(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTask</span><span class="params">(String task)</span> &#123;</span><br><span class="line">        tasks.remove(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTasks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tasks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>View</code> 视图</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskView</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTasks</span><span class="params">(List&lt;String&gt; tasks)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String task : tasks) &#123;</span><br><span class="line">            System.out.println(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ViewModel</code> 视图模型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 视图模型（ViewModel）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskViewModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TaskModel model;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; taskStrings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskViewModel</span><span class="params">(TaskModel model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTaskStrings</span><span class="params">()</span> &#123;</span><br><span class="line">        taskStrings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(model.getTasks());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getTaskStrings</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskStrings;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MVVMDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TaskModel</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskModel</span>();</span><br><span class="line">        <span class="type">TaskViewModel</span> <span class="variable">viewModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskViewModel</span>(model);</span><br><span class="line">        <span class="type">TaskView</span> <span class="variable">view</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskView</span>();</span><br><span class="line"></span><br><span class="line">        model.addTask(<span class="string">&quot;买食品&quot;</span>);</span><br><span class="line">        model.addTask(<span class="string">&quot;完成作业&quot;</span>);</span><br><span class="line"></span><br><span class="line">        viewModel.updateTaskStrings();</span><br><span class="line">        view.showTasks(viewModel.getTaskStrings());</span><br><span class="line"></span><br><span class="line">        model.removeTask(<span class="string">&quot;买食品&quot;</span>);</span><br><span class="line"></span><br><span class="line">        viewModel.updateTaskStrings();</span><br><span class="line">        view.showTasks(viewModel.getTaskStrings());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MVC-架构-和-MVVM-架构有什么区别？"><span class="post-title-index">1.3. </span><a href="#MVC-架构-和-MVVM-架构有什么区别？" class="headerlink" title="MVC 架构 和 MVVM 架构有什么区别？"></a><code>MVC</code> 架构 和 <code>MVVM</code> 架构有什么区别？</h3><p>通过代码我们可以看出如下区别</p><p><strong><code>MVC</code> 架构</strong></p><ul><li><strong>模型（Model）</strong>：存储数据和业务逻辑。在MVC示例中，模型包含待办事项的列表，并提供了添加和删除任务的方法。</li><li><strong>视图（View）</strong>：展示数据给用户。在MVC示例中，视图用于显示待办事项列表，并提供了用户与任务列表交互的界面。</li><li><strong>控制器（Controller）</strong>：协调模型和视图之间的交互。在MVC示例中，控制器负责接收用户的输入（添加或删除任务），然后将操作传递给模型来进行处理，并在必要时更新视图。</li></ul><p><strong><code>MVVM</code> 架构</strong></p><ul><li><strong>模型（Model）</strong>：存储数据和业务逻辑。</li><li><p><strong>视图（View）</strong>：展示数据给用户。</p></li><li><p><strong>视图模型（ViewModel）</strong>：在MVVM中，引入了视图模型作为模型数据和视图之间的桥梁。视图模型负责从模型获取数据，并将其转化为视图可以展示的格式。在示例中，视图模型通过更新任务字符串列表，将模型中的待办事项列表转化为可供视图显示的字符串列表。</p></li></ul><p>在这两个示例中，主要区别在于MVVM引入了视图模型（ViewModel）层，负责将模型数据转化为视图所需的格式。这样，视图只需要关心显示数据，而不需要处理数据的转化逻辑。这种分离增加了代码的可维护性和灵活性，特别是在大型应用中。</p><h2 id="💡Vue-解决了哪些问题"><span class="post-title-index">2. </span><a href="#💡Vue-解决了哪些问题" class="headerlink" title="💡Vue 解决了哪些问题"></a>💡<code>Vue</code> 解决了哪些问题</h2><blockquote><p>参考博文：<a href="https://cn.vuejs.org/guide/introduction.html#api-styles">简介 | Vue.js (vuejs.org)</a></p></blockquote><ul><li>解决了数据与视图的同步更新。</li><li><p>解决了复杂 <code>DOM</code> 操作</p><ul><li>之前通过 <code>JQuery</code> 时我们需要获取 <code>DOM</code> ，Vue.js 采用 <strong><code>虚拟DOM</code></strong> 来代替直接操作真实DOM，通过比较虚拟DOM的差异，最小化DOM操作，从而提高了性能，并解决了复杂的DOM操作问题。</li></ul></li><li><p>解决了组件化开发困难</p><ul><li>Vue.js支持组件化开发，它将应用划分为多个组件，每个组件具有独立的逻辑和视图。例如，一个表单的 <code>CRUD</code> 我们就可以通过不同的组件进行开发，然后在引入。</li></ul></li><li><p>解决了代码可维护性差</p><ul><li><code>LayUI</code> 开发的一个表单中可能 所有的 <code>CURD</code> 基本上都在一个 html 中完成，并没有实现模块化开发，导致耦合度高，不宜维护。</li><li><code>Vue</code> 就解决了这个问题，可以将一个需求拆分为多个模块进行开发和维护。</li></ul></li></ul><h2 id="🛠️Vue-快速上手"><span class="post-title-index">3. </span><a href="#🛠️Vue-快速上手" class="headerlink" title="🛠️Vue 快速上手"></a>🛠️<code>Vue</code> 快速上手</h2><p>如下是官网提供的 <code>Vue</code> <a href="https://play.vuejs.org/#eNo9jcEKwjAMhl/lt5fpQYfXUQfefAMvvRQbddC1pUuHUPrudg4HIcmXjyRZXEM4zYlEJ+T0iEPgXjn6BB8Zhp46WUZWDjCa9f6w9kAkTtH9CRinV4fmRtZ63H20Ztesqiylphqy3R5UYBqD1UyVAPk+9zkvV1CKbCv9poMLiTEfR2/IXpSoXomqZLtti/IFwVtA9A==">快速上手</a> 案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">跟 Vue 说 Hello World！</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello World!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>以 <code>MVVM</code> 架构进行解释说明</p><p><strong>View（视图）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>ViewModel（视图模型）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">// TODO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Model（模型）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello World!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-前言</title>
      <link href="/posts/120eec8d.html"/>
      <url>/posts/120eec8d.html</url>
      
        <content type="html"><![CDATA[<h2 id="🐻‍❄️-写作目的"><span class="post-title-index">1. </span><a href="#🐻‍❄️-写作目的" class="headerlink" title="🐻‍❄️ 写作目的"></a>🐻‍❄️ 写作目的</h2><blockquote><p>目前大部分公司使用的前端框架都是基于 <code>VUE</code> 进行开发的，作为后端工程师也是需要掌握 <code>VUE</code> 的相关知识，做部分简单的开发。所以本文本以 <code>Vue2.x</code> 版本 作为一个备忘录。</p></blockquote><p>目前大部分公司前后端开发工程师的模式如下：</p><ul><li>前端工程师：主要负责系统全局 <code>UI</code> 组件、核心组件、移动端开发。</li><li>后端工程师：主要负责后台接口、数据库、服务器的运维与开发，但也需要做部分前端工作，例如简单表单的 <code>CRUD</code> 开发。</li></ul><h2 id="😘-写作方式"><span class="post-title-index">2. </span><a href="#😘-写作方式" class="headerlink" title="😘 写作方式"></a>😘 写作方式</h2><blockquote><p>本文主要以需求推动相关技术的学习，因为这样学习速度最快。</p></blockquote><p>通常，在公司里，我们直接收到需求后，会在现有系统的基础上进行开发。这涉及到很多知识点，我们需要将这些知识点融合，逐一击破。</p><h2 id="🍃-写作风格"><span class="post-title-index">3. </span><a href="#🍃-写作风格" class="headerlink" title="🍃 写作风格"></a>🍃 写作风格</h2><ul><li><p>What：介绍相关知识点是什么。</p></li><li><p>Why：阐述该知识点解决了哪些问题。</p></li><li><p>How：使用相关案例来解决问题。</p></li></ul><h2 id="📇-写作大纲"><span class="post-title-index">4. </span><a href="#📇-写作大纲" class="headerlink" title="📇 写作大纲"></a>📇 写作大纲</h2><ul><li><p><a href="https://wickson.top/2023/07/10/Vue/Vue%20-%20%E5%89%8D%E8%A8%80/"><code>Vue</code> - 前言</a></p></li><li><p><a href="https://wickson.top/2023/07/11/Vue/Vue-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%80%EF%BC%89/"><code>Vue</code> - 基础概念（一）</a></p></li><li><code>Vue</code> - 基础语法（二）</li><li><code>Vue</code> - 生命周期（三）</li><li><code>Vue</code> - <code>Webpack</code>（四）</li><li><code>Vue</code> - 组件开发（五）</li><li><code>Vue</code> - 路由守卫（六）</li><li><code>Vue</code> - 实战案例（六）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-事务（四）</title>
      <link href="/posts/698c9247.html"/>
      <url>/posts/698c9247.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文主要分为三个部分：</p><ul><li>第一个部分为 <code>MySQL</code> 事务的特性；</li><li>第二个部分为 <code>MySQL</code> 事务的隔离级别；</li><li>第三个部分为 <code>MySQL</code> 常见锁机制；</li><li>第四个部分为具体的实践案例。</li></ul></blockquote><h2 id="💡问题思考"><span class="post-title-index">2. </span><a href="#💡问题思考" class="headerlink" title="💡问题思考"></a>💡问题思考</h2><ol><li><p><strong><code>MySQL</code> 事务是什么？</strong></p><ul><li><code>MySQL</code> 事务是指一组 <code>SQL</code> 语句，它们被当成一个单独的工作单元， 要么全部执行成功，要么全部不执行。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假设你有一个银行账户，你要向另一个账户转账 1000 元。</span><br><span class="line">这个操作涉及到两个 SQL 语句：一个是从你的账户扣除 1000 元，另一个是给对方的账户增加 1000 元。</span><br><span class="line">如果你不使用事务，那么可能会出现以下情况：</span><br><span class="line">1. 第一个 SQL 语句执行成功，但是第二个 SQL 语句执行失败，导致你的钱少了 1000 元，但是对方没有收到。</span><br><span class="line">2. 第一个 SQL 语句执行失败，但是第二个 SQL 语句执行成功，导致你的钱没有变化，但是对方多了 1000 元。</span><br><span class="line">3. 第一个 SQL 语句执行成功，但是在第二个 SQL 语句执行之前，有其他人查询了你或对方的账户余额，看到了不正确的数据。</span><br><span class="line">这些情况都会造成数据的不一致和不完整。如果你使用事务，那么你可以保证两个 SQL 语句要么都执行成功，要么都不执行。</span><br></pre></td></tr></table></figure></li><li><p><strong><code>MySQL</code> 事务解决了什么问题？</strong></p><ul><li><p>针对上诉问题，事务最少是需要满足一致性和隔离性。</p></li><li><p><strong>脏读</strong>：一个事务读取了另一个事务未提交的数据，<strong>不符合一致性</strong>。</p></li><li><strong>不可重复读</strong>：一个事务读取了另一个事务已经提交的 <code>update</code> 操作的数据，导致前后两次查询结果不一致，<strong>不符合隔离性</strong></li><li><strong>幻读</strong>：一个事务读取了另一个事务已经提交的 insert 操作的数据，导致前后两次查询结果不一致，<strong>不符合隔离性</strong>。</li></ul></li><li><p><strong><code>MySQL</code> 事务隔离级别是什么？</strong></p><ul><li><code>MySQL</code> 的事务隔离级别是指在<strong>多个事务并发运行时，互相是如何隔离的，从而来避免一些事务并发运行时产生的问题</strong>。</li><li><code>SQL</code> 标准中规定了四种事务隔离级别：<strong>读未提交（Read Uncommitted）</strong>、<strong>读已提交（Read Committed）</strong>、<strong>可重复读（Repeatable Read）</strong>、<strong>串行化（<code>Serializable</code>）</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">假设有两个人 A 和 B，他们都要从银行取钱。</span><br><span class="line">A 先开始取钱，他将银行卡中的余额从 1000 元改为 800 元，但是还没有完成取钱。此时，B 开始取钱，他需要查询银行卡中的余额。</span><br><span class="line">如果 B 的隔离级别是读未提交，则 B 可以读取到 A 修改后的余额 800 元；</span><br><span class="line">如果 B 的隔离级别是读已提交，则 B 只能读取到 A 修改前的余额 1000 元；</span><br><span class="line">如果 B 的隔离级别是可重复读，则 B 只能读取到 A 修改前的余额 1000 元；</span><br><span class="line">如果 B 的隔离级别是串行化，则 B 必须等待 A 完成取钱后才能开始查询。</span><br></pre></td></tr></table></figure></li></ol><h2 id="事务特性"><span class="post-title-index">3. </span><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><blockquote><p>事务是由一组 <code>SQL</code> 语句组成的逻辑处理单元,事务具有以下4个属性,通常简称为事务的 <strong>ACID</strong> 属性。</p></blockquote><ul><li>原子性(Atomicity) ：事务是一个原子操作单元,其对数据的修改,要么全都执行,要么全都不执行。</li><li>一致性(Consistent) ：在事务开始和完成时,数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改,以保持数据的完整性。</li><li>隔离性(Isolation) ：数据库系统提供一定的隔离机制,保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的,反之亦然。</li><li>持久性(Durable) ：事务完成之后,它对于数据的修改是永久性的,即使出现系统故障也能够保持。</li></ul><h2 id="事务隔离级别"><span class="post-title-index">4. </span><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><blockquote><p>从问题思考中，我们知道事务的隔离级别主要分为以下四类：</p><ul><li><strong>读未提交（Read Uncommitted）</strong></li><li><strong>读已提交（Read Committed）</strong></li><li><strong>可重复读（Repeatable Read）</strong></li><li><strong>串行化（<code>Serializable</code>）</strong></li></ul><p>而事务隔离级别主要解决了以下主要的三个问题：</p><ul><li><strong>脏读</strong></li><li><strong>不可重复读</strong></li><li><strong>幻读</strong></li></ul><p><strong><code>Mysql</code> 默认的事务隔离级别是可重复读，用Spring开发程序时，如果不设置隔离级别默认用 <code>Mysql</code> 设置的隔离级别，如果 <code>Spring</code> 设置了就用已经设置的隔离级别</strong></p></blockquote><ul><li><strong>脏读</strong>、<strong>不可重复读</strong> 和 <strong>幻读</strong>，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</li></ul><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读(Dirty Read)</th><th>不可重复读(NonRepeatable Read)</th><th>幻读(Phantom Read)</th></tr></thead><tbody><tr><td>读未提交(Read uncommitted)</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读已提交(Read committed)</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读(Repeatableread)</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>可串行化(Serializable)</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table></div><ul><li>查看当前数据库的事务隔离级别：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;tx_isolation&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>设置事务隔离级别：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> tx_isolation<span class="operator">=</span><span class="string">&#x27;REPEATABLE-READ&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="锁"><span class="post-title-index">5. </span><a href="#锁" class="headerlink" title="锁"></a>锁</h2><blockquote><p>锁的本质是解决了 计算机协调多个进程或线程并发访问某一资源的机制。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-执行计划（三）</title>
      <link href="/posts/efe48dc1.html"/>
      <url>/posts/efe48dc1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文主要分为三个部分，第一个部分讲解 <code>MySQL</code> 查询时会经过哪些过程；第二个部分讲解 <code>Explain</code> 的基本用法；第三个部分讲解 <code>Explain</code> 参数分析。 </p><p>如下很多操作只是一些基本的操作，如果相对 <code>MySQL</code> 进行深层次的学习还是要对 B+ 树有一定了解</p><p><strong>准备工作</strong></p><ul><li>导入 <code>SQL</code> 文件：<strong><a href="https://www.yuque.com/attachments/yuque/0/2023/sql/3009312/1675232949321-223f7e2a-763c-4fd0-b3ab-3a780183719d.sql?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fsql%2F3009312%2F1675232949321-223f7e2a-763c-4fd0-b3ab-3a780183719d.sql%22%2C%22name%22%3A%22explain_demo_test.sql%22%2C%22size%22%3A2597%2C%22ext%22%3A%22sql%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22u85e0af12-a42a-4726-8f10-7f751f7fe49%22%2C%22taskType%22%3A%22upload%22%2C%22type%22%3A%22%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u94be3304%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">explain_demo_test.sql</a></strong> 之后会有三张表（actor、film、film_actor）</li></ul></blockquote><h2 id="MySQL-查询过程"><span class="post-title-index">2. </span><a href="#MySQL-查询过程" class="headerlink" title="MySQL 查询过程"></a><code>MySQL</code> 查询过程</h2><p>服务器程序处理来自客户端的查询请求大致需要经过三个部分 : <strong>连接管理、解析与优化、存储引擎</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151907705.png" alt="image2022-12-28_16-1-44.png"><br><code>MySQL</code> 查询过程如下：</p><ol><li>客户端将查询发送到 <code>MySQL</code> 服务器</li><li>服务器先检查<strong>查询缓存</strong>，如果命中，立即返回缓存中的结果；否则进入下一阶段</li><li>服务器对 <code>SQL</code> 进行<strong>解析</strong>、<strong>预处理</strong>，再由<strong>优化器</strong>生成对象的<strong>执行计划</strong></li><li><code>MySQL</code> 根据<strong>优化器</strong>生成的<strong>执行计划</strong>，调用<strong><code>存储引擎API</code></strong>来执行查询</li><li>服务器将结果返回给客户端，同时<strong>缓存查询结果</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151907957.png" alt="image2022-12-27_15-52-41.png"></p><h2 id="Explain-基本介绍"><span class="post-title-index">3. </span><a href="#Explain-基本介绍" class="headerlink" title="Explain 基本介绍"></a>Explain 基本介绍</h2><h3 id="Explain-是什么？"><span class="post-title-index">3.1. </span><a href="#Explain-是什么？" class="headerlink" title="Explain 是什么？"></a>Explain 是什么？</h3><ul><li><code>MySQL</code> 的 Explain 是一个用于查看 SELECT、INSERT、UPDATE、DELETE 语句 <strong>执行计划 </strong>的命令。</li><li>执行计划：指 <code>SQL</code> 语句在经过 <code>MySQL</code> <strong>查询优化器 </strong>的优化会后，具体的执行方式。</li></ul><h3 id="Explain-解决了那些问题？"><span class="post-title-index">3.2. </span><a href="#Explain-解决了那些问题？" class="headerlink" title="Explain 解决了那些问题？"></a>Explain 解决了那些问题？</h3><ul><li>它可以帮助我们<strong>了解查询执行计划</strong>，并<strong>识别潜在的性能问题</strong>。</li></ul><h3 id="Explain-如何使用？"><span class="post-title-index">3.3. </span><a href="#Explain-如何使用？" class="headerlink" title="Explain 如何使用？"></a>Explain 如何使用？</h3><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 第一条：<span class="keyword">SQL</span>基础执行信息</span><br><span class="line">EXPLAIN EXTENDED <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> actor;</span><br><span class="line"># MySQL优化后的查询语句，可以看到优化器具体优化的<span class="keyword">SQL</span>信息</span><br><span class="line"><span class="keyword">SHOW</span> WARNINGS;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain extended <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> actor;<span class="keyword">show</span> warnings;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Level   <span class="operator">|</span> Code <span class="operator">|</span> Message                                                                                                                                                                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Warning <span class="operator">|</span> <span class="number">1681</span> <span class="operator">|</span> <span class="string">&#x27;EXTENDED&#x27;</span> <span class="keyword">is</span> deprecated <span class="keyword">and</span> will be removed <span class="keyword">in</span> a future release.                                                                                                                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Note    <span class="operator">|</span> <span class="number">1003</span> <span class="operator">|</span> <span class="comment">/* select#1 */</span> <span class="keyword">select</span> `explain_demo_test`.`actor`.`id` <span class="keyword">AS</span> `id`,`explain_demo_test`.`actor`.`name` <span class="keyword">AS</span> `name`,`explain_demo_test`.`actor`.`update_time` <span class="keyword">AS</span> `update_time` <span class="keyword">from</span> `explain_demo_test`.`actor` <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h2 id="Explain-参数分析"><span class="post-title-index">4. </span><a href="#Explain-参数分析" class="headerlink" title="Explain 参数分析"></a>Explain 参数分析</h2><ul><li>每张表对应的索引情况，使用Explain得到的结果都不一样，执行 Explain 请对照索引情况看</li></ul><div class="tabs" id="explain"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#explain-1">id</button></li><li class="tab"><button type="button" data-href="#explain-2">select_type</button></li><li class="tab"><button type="button" data-href="#explain-3">table</button></li><li class="tab"><button type="button" data-href="#explain-4">partitions</button></li><li class="tab"><button type="button" data-href="#explain-5">type</button></li><li class="tab"><button type="button" data-href="#explain-6">possible_keys</button></li><li class="tab"><button type="button" data-href="#explain-7">key</button></li><li class="tab"><button type="button" data-href="#explain-8">key_len</button></li><li class="tab"><button type="button" data-href="#explain-9">ref</button></li><li class="tab"><button type="button" data-href="#explain-10">rows</button></li><li class="tab"><button type="button" data-href="#explain-11">filtered</button></li><li class="tab"><button type="button" data-href="#explain-12">Extra</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="explain-1"><p>select 的序列号，表示优化器访问表的顺序。</p><ul><li>序号越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-2"><p>查询数据的操作类型（简单、复杂），表示使用的 SELECT 语句的类型</p><ul><li>simple：简单查询，单表查询</li><li>primary：复杂查询中最外层的 select</li><li>subquery：包含在 select 中的子查询（不在 from 子句中）</li><li>derived：包含在 from 子句中的子查询，也称为派生表（derived）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-3"><p>查询数据的操作类型（简单、复杂），表示使用的 SELECT 语句的类型</p><ul><li>表示被访问的表的名称</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-4"><p>匹配的分区信息，不用管</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-5"><p>表示访问表的关联类型或者连接类型。一些常见的连接类型包括：</p><ul><li>system：正在访问只有一行的表。</li><li>const：使用具有唯一或主键约束的索引列访问表。</li><li>eq_ref：使用唯一索引或主键访问表。</li><li>ref：使用非唯一索引访问表。</li><li>range : 使用一个索引来检索给定范围的行, 通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中</li><li>index：只遍历索引树。</li><li>ALL：全表扫描，性能最拉垮。</li></ul><p><strong>优先级排序：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong></p><p><strong>通常优化至少到 range 级别，最好能优化到ref</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-6"><p>查询数据可能使用哪些索引来查找</p><ul><li>如果该列是NULL，则没有使用索引</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-7"><p>显示 MySQL 实际使用的索引</p><ul><li>如果为 NULL，则没有使用索引查询</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-8"><p>表示索引中使用的字节数，通过该列计算查询中使用的索引的长度</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-9"><p>表的索引字段关联了哪张表的哪个字段或常量</p><ul><li>const（常量）</li><li>字段名（例：film.id）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-10"><p>估算出找到所需的记录或所需读取的行数</p><ul><li>数值越小越好</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-11"><p>结果的行数占读取行数的百分比</p><ul><li>值越大越好</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="explain-12"><p>十分重要的额外信息，如下是常见的值</p><ul><li>Using index：使用覆盖索引。</li><li>Using where：使用 where 语句来处理结果，并且查询的列未被索引覆盖。</li><li>Using index condition：查询的列不完全被索引覆盖，where条件中是一个前导列的范围；</li><li>Using temporary：mysql需要创建一张临时表来处理查询。</li><li>Using filesort：外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘完成排序。</li><li>Select tables optimized away：使用某些聚合函数（比如 max、min）来访问存在索引的某个字段</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="id"><span class="post-title-index">4.1. </span><a href="#id" class="headerlink" title="id"></a>id</h3><blockquote><p>id：<strong>select 查询序列号</strong></p><ul><li>序号越大执行优先级越高；</li><li>id相同，执行顺序由上至下；</li><li>id不同，id值越大优先级越高，越先被执行；</li><li>id为NULL最后执行；</li></ul></blockquote><h3 id="select-type"><span class="post-title-index">4.2. </span><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><blockquote><p>select_type：<strong>select_type 表示对应行是简单还是复杂的查询</strong></p><ul><li><strong>SIMPLE</strong>        ： 简单查询，一般指单表查询。</li><li><strong>DERIVED     </strong> ：派生表，包含在 from 子句中的子查询。</li><li><strong>PRIMARY     </strong>：复杂查询，一般指最外层的 select。</li><li><strong>SUBQUERY</strong>  ：包含在 select 中的子查询（不在 from 子句中） 。</li><li><strong>UNION       </strong> ： 表示使用 UNION 运算符的 SELECT 语句。</li></ul></blockquote><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#关闭mysql5<span class="number">.7</span>新特性对衍生表的合并优化</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session optimizer_switch<span class="operator">=</span><span class="string">&#x27;derived_merge=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.39</span> sec)</span><br><span class="line"> </span><br><span class="line"># Explain 执行的过程，其中对应的 select_type</span><br><span class="line"># EXPLAIN <span class="keyword">SELECT</span>                             <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>   id <span class="operator">=</span> <span class="number">1</span>; select_type <span class="operator">=</span> <span class="keyword">PRIMARY</span>;  <span class="keyword">table</span> <span class="operator">=</span> <span class="operator">&lt;</span>derived3<span class="operator">&gt;</span></span><br><span class="line">#   ( <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> actor <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> )     <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>   id <span class="operator">=</span> <span class="number">2</span>; select_type <span class="operator">=</span> SUBQUERY; <span class="keyword">table</span> <span class="operator">=</span> actor</span><br><span class="line"># <span class="keyword">FROM</span></span><br><span class="line">#   ( <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> film <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> ) der; <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>   id <span class="operator">=</span> <span class="number">3</span>; select_type <span class="operator">=</span> DERIVED;  <span class="keyword">table</span> <span class="operator">=</span> film</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> actor <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>) der;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived3<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">system</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> film       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> SUBQUERY    <span class="operator">|</span> actor      <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"> </span><br><span class="line"># 还原默认配置;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session optimizer_switch<span class="operator">=</span><span class="string">&#x27;derived_merge=on&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"> </span><br><span class="line"># select_type <span class="operator">=</span> SIMPLE ，说明使用的是单表</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"> </span><br><span class="line"># select_type <span class="operator">=</span> <span class="keyword">UNION</span> ，说明在 <span class="keyword">union</span> 中的第二个和随后的 <span class="keyword">select</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">No</span> tables used <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="keyword">UNION</span>       <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">No</span> tables used <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h3 id="table"><span class="post-title-index">4.3. </span><a href="#table" class="headerlink" title="table"></a>table</h3><blockquote><p>table：<strong>这一列表示 explain 的一行正在访问哪个表。</strong></p><ul><li>当 from 子句中有子查询时，table 列是 <derivenn> 格式，表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。</derivenn></li></ul></blockquote><p><strong>衍生表</strong></p><ul><li>执行这行如果想要得到衍生表，需要执行以下两条语句：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#关闭mysql5<span class="number">.7</span>新特性对衍生表的合并优化</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session optimizer_switch<span class="operator">=</span><span class="string">&#x27;derived_merge=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.39</span> sec)</span><br><span class="line"></span><br><span class="line"># 得到的 <span class="keyword">table</span> 列中就存在衍生表信息。</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>) der;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">system</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> film       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br></pre></td></tr></table></figure><h3 id="type"><span class="post-title-index">4.4. </span><a href="#type" class="headerlink" title="type"></a>type</h3><blockquote><p>type：这一列表示<strong>关联类型</strong>或<strong>访问类型</strong>，即<strong>MySQL决定如何查找表中的行</strong>，查找数据行记录的大概范围。</p><p>依次从最优到最差分别为，一般来说，得保证查询达到range级别，最好达到ref：</p><ol><li><strong>null</strong> </li><li><strong>system</strong></li><li><strong>const </strong></li><li><strong>eq_ref </strong></li><li><strong>ref</strong></li><li><strong>range</strong></li><li><strong>index</strong> </li><li><strong>ALL</strong></li></ol></blockquote><ol><li><p>NULL</p><blockquote><p>mysql能够在<strong>优化阶段分解查询语句</strong>，在执行阶段用不着再访问表或索引。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">min</span>(id) <span class="keyword">from</span> film;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">Select</span> tables optimized away <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>const, system</p><blockquote><p>mysql能对查询的某部分进行优化并将其转化成一个常量，所以表最多有一个匹配行，读取1次，速度比较快。</p><p><strong>system是const的特例</strong>，表里只有一条元组匹配时为system</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain extended <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>) tmp;<span class="keyword">show</span> warnings;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">system</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> film       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.10</span> sec)</span><br><span class="line"> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Level   <span class="operator">|</span> Code <span class="operator">|</span> Message                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Warning <span class="operator">|</span> <span class="number">1681</span> <span class="operator">|</span> <span class="string">&#x27;EXTENDED&#x27;</span> <span class="keyword">is</span> deprecated <span class="keyword">and</span> will be removed <span class="keyword">in</span> a future release. <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Note    <span class="operator">|</span> <span class="number">1003</span> <span class="operator">|</span> <span class="comment">/* select#1 */</span> <span class="keyword">select</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">AS</span> `id`,<span class="string">&#x27;film1&#x27;</span> <span class="keyword">AS</span> `name` <span class="keyword">from</span> dual     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+-------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>eq_ref</p><blockquote><p><strong>primary key 或 unique key 索引的所有部分被连接使用</strong> ，最多只会返回一条符合条件的记录。</p><p>这可能是在const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 其中 film表 使用的是主键索引， film_actor使用的是联合索引 NDEX `idx_film_actor_id`(`film_id`, `actor_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film_actor <span class="keyword">left</span> <span class="keyword">join</span> film <span class="keyword">on</span> film_actor.film_id <span class="operator">=</span> film.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+--------------------------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>                                  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+--------------------------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film_actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>                                 <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> explain_demo_test.film_actor.film_id <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+--------------------------------------+------+----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>ref</p><blockquote><p>相比 eq_ref，不使用唯一索引，而是使用<strong>普通索引</strong>或者<strong>唯一性索引的部分前缀</strong>，索引要和某个值相比较，可能会找到多个符合条件的行。</p></blockquote><p><strong>1. 普通索引</strong></p><ul><li><p><code>file</code> 表的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line">- 联合索引：INDEX `idx_name`(`name`)</span><br><span class="line"></span><br><span class="line">file表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `name` varchar(10) DEFAULT NULL COMMENT &#x27;电影名称&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Explain 分析结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;film1&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_name      <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">33</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.68</span> sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 唯一性索引的部分前缀</strong></p><ul><li><p>表的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">file 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line">- 联合索引：KEY `idx_name`(`name`) </span><br><span class="line"></span><br><span class="line">file 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `name` varchar(10) DEFAULT NULL COMMENT &#x27;电影名称&#x27;</span><br><span class="line"></span><br><span class="line">film_actor 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line">- 联合索引：KEY `idx_film_actor_id` (`film_id`,`actor_id`)</span><br><span class="line"></span><br><span class="line">film_actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `film_id` int(11) NOT NULL COMMENT &#x27;电影ID&#x27;</span><br><span class="line">- `actor_id` int(11) NOT NULL COMMENT &#x27;演员ID&#x27;</span><br><span class="line">- `remark` varchar(255) DEFAULT NULL COMMENT &#x27;备注&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Explain 分析结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> film_id <span class="keyword">from</span> film <span class="keyword">left</span> <span class="keyword">join</span> film_actor <span class="keyword">on</span> film.id <span class="operator">=</span> film_actor.film_id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+-------------------+-------------------+---------+---------------------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys     <span class="operator">|</span> key               <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>                       <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+-------------------+-------------------+---------+---------------------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span> idx_name          <span class="operator">|</span> <span class="number">33</span>      <span class="operator">|</span> <span class="keyword">NULL</span>                      <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film_actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> explain_demo_test.film.id <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+-------------------+-------------------+---------+---------------------------+------+----------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>range</p><blockquote><p>范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中。使用一个索引来检索给定范围的行。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>index</p><blockquote><p>扫描全索引就能拿到结果，一般是<strong>扫描某个二级索引</strong>，这种扫描<strong>不会从索引树根节点开始快速查找</strong>，而是直接对二级索引的叶子节点遍历和扫描，速度还是比较慢的，这种查询一般为使用覆盖索引，二级索引一般比较小，所以这种通常比ALL快一些。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film;</span><br><span class="line"> </span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">33</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>ALL</p><blockquote><p>即全表扫描，扫描你的聚簇索引的所有叶子节点。通常情况下这需要增加索引来进行优化了。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor;</span><br><span class="line"> </span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure></li></ol><h3 id="possible-keys"><span class="post-title-index">4.5. </span><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><blockquote><p>possible_keys列表示在某个查询语句中，对某个表执行单表查询时可能用到的索引有哪些</p><p>如果该列是NULL，则没有相关的索引。</p><p><strong>注意</strong></p><p>possible_keys列中的值并不是越多越好，可能使用的索引越多，查询优化器计算查询成本时就得花费更长时间，所以如果可以的话，尽量删除那些用不到的索引</p></blockquote><h3 id="key"><span class="post-title-index">4.6. </span><a href="#key" class="headerlink" title="key"></a>key</h3><blockquote><p>key列表示实际用到的索引有哪些，如果没有使用索引，则该列是 NULL</p></blockquote><h3 id="key-len"><span class="post-title-index">4.7. </span><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><blockquote><p>key_len列表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度.</p></blockquote><ul><li>表的信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">film_actor 表的索引信息</span><br><span class="line"></span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line">- 联合索引：KEY `idx_film_actor_id` (`film_id`,`actor_id`)</span><br><span class="line"></span><br><span class="line">**film_actor 表的字段类型**</span><br><span class="line"></span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `film_id` int(11) NOT NULL COMMENT &#x27;电影ID&#x27;</span><br><span class="line">- `actor_id` int(11) NOT NULL COMMENT &#x27;演员ID&#x27;</span><br><span class="line">- `remark` varchar(255) DEFAULT NULL COMMENT &#x27;备注&#x27;</span><br></pre></td></tr></table></figure><p><strong>key_len 为什么为4？</strong></p><blockquote><p><strong>因为走到了索引 idx_film_actor_id ，而 字段（film_id）数据类型是int , int就是占四个字节</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film_actor <span class="keyword">where</span> film_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys     <span class="operator">|</span> key               <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film_actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">1.83</span> sec)</span><br></pre></td></tr></table></figure><p><strong>key_len 计算规则如下</strong></p><blockquote><p><strong>字符串</strong></p><ul><li>5.0.3以后版本中，n均代表字符数，而不是字节数，如果是utf-8，一个数字或字母占1个字节，一个汉字占3个字节</li><li>char(n)：如果存汉字长度就是 3n 字节</li><li>varchar(n)：如果存汉字则长度是 3n + 2 字节，加的2字节用来存储字符串长度，因为varchar是变长字符串</li><li>例如：某个索引列的类型是VARCHAR(100)，使用的字符集是utf8，那么该列实际占用的最大存储空间就是100 × 3 = 300个字节</li></ul><p><strong>数值类型</strong></p><ul><li>tinyint：1字节</li><li>smallint：2字节</li><li>int：4字节</li><li>bigint：8字节</li></ul><p><strong>时间类型</strong></p><ul><li>date：3字节</li><li>timestamp：4字节</li><li>datetime：8字节</li></ul><p><strong>NULL</strong></p><ul><li>如果字段允许为 NULL，需要1字节记录是否为 NULL</li></ul></blockquote><h3 id="ref"><span class="post-title-index">4.8. </span><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote><p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量</p><p>常见的有：const（常量），字段名（例：film.id）</p></blockquote><h3 id="rows"><span class="post-title-index">4.9. </span><a href="#rows" class="headerlink" title="rows"></a>rows</h3><blockquote><p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p></blockquote><h3 id="filtered"><span class="post-title-index">4.10. </span><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h3><blockquote><p>对于单表而言这个列没啥意义，结果函数占总数的百分比。</p></blockquote><h3 id="Extra"><span class="post-title-index">4.11. </span><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><blockquote><p>这一列展示的是额外信息。常见的重要值如下：</p><ol><li>Using index（覆盖索引)</li><li>Using where（查询的列未被索引覆盖）</li><li>Using index condition（不完全被索引覆盖）</li><li>Using temporary</li><li>Using filesort</li><li>Select tables optimized away</li></ol></blockquote><ol><li><p>Using index（覆盖索引)</p><blockquote><p>mysql执行计划explain结果里的key有使用索引，如果 <strong>select 后面查询的字段都可以从这个索引的树中获取</strong>，这种情况可以说是用到了<strong>覆盖索引</strong>，extra里一般都有using index；</p></blockquote><ul><li><p>表信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">film_actor 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line">- 联合索引：KEY `idx_film_actor_id` (`film_id`,`actor_id`)</span><br><span class="line"></span><br><span class="line">film_actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `film_id` int(11) NOT NULL COMMENT &#x27;电影ID&#x27;</span><br><span class="line">- `actor_id` int(11) NOT NULL COMMENT &#x27;演员ID&#x27;</span><br><span class="line">- `remark` varchar(255) DEFAULT NULL COMMENT &#x27;备注&#x27;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> film_id <span class="keyword">from</span> film_actor <span class="keyword">where</span> film_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys     <span class="operator">|</span> key               <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film_actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">19.56</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Using where（查询的列未被索引覆盖）</p><blockquote><p>使用 where 语句来处理结果，并且查询的列未被索引覆盖</p></blockquote><ul><li><p>表信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">actor 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line"></span><br><span class="line">actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `name` varchar(45) DEFAULT NULL COMMENT &#x27;演员名称&#x27;</span><br><span class="line">- `update_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line"></span><br><span class="line">actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `name` varchar(45) DEFAULT NULL COMMENT &#x27;演员名称&#x27;</span><br><span class="line">- `update_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>    <span class="number">33.33</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Using index condition（不完全被索引覆盖）</p><blockquote><p>查询的列不完全被索引覆盖，where条件中是一个前导列的范围；</p></blockquote><ul><li><p>表信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">film_actor 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line">- 联合索引：KEY `idx_film_actor_id` (`film_id`,`actor_id`)</span><br><span class="line"></span><br><span class="line">film_actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `film_id` int(11) NOT NULL COMMENT &#x27;电影ID&#x27;</span><br><span class="line">- `actor_id` int(11) NOT NULL COMMENT &#x27;演员ID&#x27;</span><br><span class="line">- `remark` varchar(255) DEFAULT NULL COMMENT &#x27;备注&#x27;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film_actor <span class="keyword">where</span> film_id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+-------------------+-------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys     <span class="operator">|</span> key               <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+-------------------+-------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film_actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> idx_film_actor_id <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+-------+-------------------+-------------------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Using temporary</p><blockquote><p>mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。</p></blockquote><ul><li><p>表信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">actor 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line"></span><br><span class="line">actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `name` varchar(45) DEFAULT NULL COMMENT &#x27;演员名称&#x27;</span><br><span class="line">- `update_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;</span><br><span class="line"></span><br><span class="line">actor.name 没有索引，此时创建了张临时表来distinct</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="keyword">distinct</span> name <span class="keyword">from</span> actor;</span><br><span class="line"> </span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> temporary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>film.name 建立了idx_name索引，此时查询时extra是using index,没有用临时表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 新增 idx_name 索引</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `film` <span class="keyword">ADD</span> INDEX `idx_name`(`name`) <span class="keyword">USING</span> BTREE;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.09</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="keyword">distinct</span> name <span class="keyword">from</span> film;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> idx_name      <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">33</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"> </span><br><span class="line"># 删除 idx_name 索引</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `film` <span class="keyword">DROP</span> INDEX `idx_name`;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">1.78</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Using filesort</p><blockquote><p>将用<strong>外部排序</strong>而不是<strong>索引排序</strong>，数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的。</p></blockquote><ul><li><p>表信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actor 表的索引信息</span><br><span class="line">- 主键索引：PRIMARY KEY (`id`)</span><br><span class="line"></span><br><span class="line">actor 表的字段类型</span><br><span class="line">- `id` int(11) NOT NULL COMMENT &#x27;主键ID&#x27;</span><br><span class="line">- `name` varchar(45) DEFAULT NULL COMMENT &#x27;演员名称&#x27;</span><br><span class="line">- `update_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排序name并检索行记录</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> actor <span class="keyword">order</span> <span class="keyword">by</span> name;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> actor <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">20.78</span> sec)</span><br></pre></td></tr></table></figure></li><li><p><strong>film.name建立了idx_name索引,此时查询时extra是using index</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 新增 idx_name 索引</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `film` <span class="keyword">ADD</span> INDEX `idx_name`(`name`) <span class="keyword">USING</span> BTREE;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.09</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"># Extra：<span class="keyword">Using</span> index。添加idx_name 索引之后使用到了覆盖索引</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> film <span class="keyword">order</span> <span class="keyword">by</span> name;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> film  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">33</span>      <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.20</span> sec)</span><br><span class="line"> </span><br><span class="line"># 删除 idx_name 索引</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `film` <span class="keyword">DROP</span> INDEX `idx_name`;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">1.78</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Select tables optimized away</p><blockquote><p>使用某些聚合函数（比如 max、min）来访问存在索引的某个字段</p></blockquote><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">min</span>(id) <span class="keyword">from</span> film;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">Select</span> tables optimized away <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-表设计规范（二）</title>
      <link href="/posts/1ce85a1d.html"/>
      <url>/posts/1ce85a1d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文主要讲解 <code>MySQL</code> 中对表的设计。例如，表的通用字段、如何选择合适的字段类型、如何处理 1:1 、1:N 的关系等等。</p><p>我们设计时可以通过 <a href="http://www.pdman.cn/#/">PDMan</a> 对表进行设计</p></blockquote><h2 id="选择合适的字段类型"><span class="post-title-index">2. </span><a href="#选择合适的字段类型" class="headerlink" title="选择合适的字段类型"></a>选择合适的字段类型</h2><blockquote><p>数值类型（Numeric Types）：用于存储数值数据，包括整数和浮点数。例如，int、bigint、float、double、decimal 等。</p><p>字符串类型（String Types）：用于存储文本和字符数据。例如，char、varchar、text、enum、set 等。</p><p>日期和时间类型（Date and Time Types）：用于存储日期、时间和时间戳数据。例如，date、time、datetime、timestamp、year 等。</p><p>布尔类型（Boolean Type）：用于存储布尔值，表示真或假。MySQL 中的布尔类型是 tinyint(1)，可以用来存储 0 或 1。</p><p>二进制类型（Binary Types）：用于存储二进制数据，如图像、音频、视频等。例如，binary、varbinary、blob 等。</p></blockquote><h3 id="整数数据类型"><span class="post-title-index">2.1. </span><a href="#整数数据类型" class="headerlink" title="整数数据类型"></a>整数数据类型</h3><blockquote><p>整数数据类型：<code>tinyint</code>、<code>smallint</code>、<code>int</code>、<code>bigint</code></p></blockquote><p><code>tinyint</code></p><ul><li>基本定义：用于存储非常小的整数值。它占用 1 个字节的存储空间，并且可以表示范围为 -128 到 127（有符号）或 0 到 255（无符号）的整数。</li><li>适用场景：用于存储布尔值（0 或 1）或非常小的整数数据。</li></ul><p><code>smallint</code></p><ul><li>基本定义：用于存储较小的整数值。它占用 2 个字节的存储空间，并且可以表示范围为 -32,768 到 32,767（有符号）或 0 到 65,535（无符号）的整数。</li><li>适用场景：用于存储中等大小的整数数据，如年份或月份，<code>smallint</code> 可能是一个不错的选择</li></ul><p><code>int</code></p><ul><li>基本定义：用于存储普通大小的整数值。它占用 4 个字节的存储空间，并且可以表示范围为 -2,147,483,648 到 2,147,483,647（有符号）或 0 到 4,294,967,295（无符号）的整数。</li><li>适用场景：用于存储大多数整数数据。</li></ul><p><code>bigint</code></p><ul><li>基本定义：用于存储非常大的整数值。它占用 8 个字节的存储空间，并且可以表示范围为 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807（有符号）或 0 到 18,446,744,073,709,551,615（无符号）的整数。</li><li>适用场景：用于存储非常大的整数数据。</li></ul><h3 id="浮点数数据类型"><span class="post-title-index">2.2. </span><a href="#浮点数数据类型" class="headerlink" title="浮点数数据类型"></a>浮点数数据类型</h3><blockquote><p>浮点数数据类型：<code>float</code>、<code>double</code> 和 <code>decimal</code> </p><p>根据数据范围、精度要求、存储空间和计算性能等因素来选择合适的浮点数数据类型</p></blockquote><p><code>float</code></p><ul><li>基本定义：单精度浮点数数据类型，用于存储较小范围的浮点数。它占用 4 个字节的存储空间，并提供大约 7 位数字的精度。</li><li>适用场景：用于存储相对较小的浮点数，并且不需要非常高的精度，例如科学计数。</li></ul><p><code>double</code></p><ul><li>基本定义：双精度浮点数数据类型，用于存储较大范围的浮点数。它占用 8 个字节的存储空间，并提供大约 15 位数字的精度。</li><li>适用场景：用于存储大多数浮点数，并提供相对较高的精度，例如 存储坐标就是一个不错的选择。</li></ul><p><code>decimal</code> </p><ul><li>基本定义：精确的浮点数数据类型，用于存储需要高精度计算的浮点数。它占用可变的存储空间，具体取决于指定的精度和标度。精度表示总位数，标度表示小数点后的位数。</li><li>适用场景：decimal 可以存储非常大的数值，并提供高度精确的计算，适合于货币、金融和精确计算等领域。</li></ul><h3 id="字符串数据类型"><span class="post-title-index">2.3. </span><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h3><blockquote><p>字符串数据类型：<code>char</code>、<code>varchar</code> 和 <code>text</code></p></blockquote><p><code>char</code></p><ul><li>基本定义：char 是一种固定长度的字符串类型。你需要指定一个固定的长度，范围是 0 到 255 个字符。</li><li>适用场景：用于长度固定的数据，例如身份证号、固定长度的标识符等</li></ul><p><code>varchar</code></p><ul><li>基本定义：可变长度的字符串类型。你需要指定一个最大长度，范围是 0 到 65,535 个字符。它只会占用实际值所需的存储空间加上额外的一些字节作为长度信息。</li><li>适用场景：用于长度可变的数据，例如存储用户名称、电子邮件地址等。</li></ul><p><code>text</code></p><ul><li>基本定义：用于存储大量文本数据的数据类型，其最大存储容量为约 65,535 字符。</li><li>适用场景：用于存储较大的文本、文章、备注等。</li></ul><h2 id="添加通用字段"><span class="post-title-index">3. </span><a href="#添加通用字段" class="headerlink" title="添加通用字段"></a>添加通用字段</h2><div class="table-container"><table><thead><tr><th><strong>字段</strong></th><th><strong>类型</strong></th><th><strong>解释</strong></th><th><strong>是否必须</strong></th></tr></thead><tbody><tr><td><strong>id</strong></td><td>bigint(20)</td><td><strong>主键</strong></td><td><strong>必须</strong></td></tr><tr><td>create_by</td><td>varchar(64)</td><td>创建者</td><td>非必须</td></tr><tr><td>update_by</td><td>varchar(64)</td><td>更新者</td><td>非必须</td></tr><tr><td><strong>create_time</strong></td><td>datetime</td><td><strong>更新时间</strong></td><td><strong>必须</strong></td></tr><tr><td><strong>update_time</strong></td><td>datetime</td><td><strong>更新时间</strong></td><td><strong>必须</strong></td></tr><tr><td>data_status</td><td>tinyint(1)、bit(1)</td><td>数据状态</td><td>非必须</td></tr><tr><td>remark</td><td>varchar</td><td>记录备注</td><td>非必须</td></tr></tbody></table></div><h2 id="一张表的字段不宜过多"><span class="post-title-index">4. </span><a href="#一张表的字段不宜过多" class="headerlink" title="一张表的字段不宜过多"></a>一张表的字段不宜过多</h2><div class="note orange simple"><p>张表的字段不宜过多，一般尽量不要超过20个字段。如果一张表的字段过多，表中保存的数据可能就会很大，查询效率就会很低</p></div><p><strong>那如何解决字段过多问题呢？</strong></p><ul><li>如果实在需要很多字段，可以把一张大的表，拆成多张小的表，它们的主键相同即可。</li><li>表的字段数非常多时，可以将表分成两张表，一张作为条件查询表，一张作为详细内容表。</li><li>核心就是采用 1  ：1 的形式将表进行拆分。</li></ul><p><strong>示例</strong></p><blockquote><p>假设你有一个用户信息表，其中包含用户的基本信息，如名字、密码、电子邮件地址、电话号码等。此外，还包含用户的银行卡信息，如卡号、银行名称、有效期等。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 用户的基本信息 users</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------------+--------------------------------------------------------------+-------------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> username    <span class="operator">|</span> password                                                     <span class="operator">|</span> email             <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------------+--------------------------------------------------------------+-------------------+-------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> admin       <span class="operator">|</span> $<span class="number">2</span>a$<span class="number">10</span>$<span class="number">0</span>acJOIk2D25<span class="operator">/</span>oC87nyclE.<span class="number">.0</span>lzeu9DtQ<span class="operator">/</span>n3geP4fkun<span class="operator">/</span>zIVRhHJIO <span class="operator">|</span> admin<span class="variable">@example</span>.com <span class="operator">|</span> <span class="number">15612345678</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> John        <span class="operator">|</span> $<span class="number">2</span>a$<span class="number">10</span>$<span class="number">11</span>U48RhyJ5pSBYWSn12AD.<span class="operator">/</span>ld671.ycSzJHbyrtpeoMeYiw31eo8a <span class="operator">|</span> john<span class="variable">@example</span>.com  <span class="operator">|</span> <span class="number">15601691300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">3</span> <span class="operator">|</span> Mary        <span class="operator">|</span> $<span class="number">2</span>a$<span class="number">10</span>$YMpimV4T6BtDhIaA8jSW.u8UTGBeGhc<span class="operator">/</span>qwXP4oxoMr4mOw9.qttt6 <span class="operator">|</span> mary<span class="variable">@example</span>.com  <span class="operator">|</span> <span class="number">15601701300</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------------+--------------------------------------------------------------+-------------------+-------------+</span></span><br><span class="line"> </span><br><span class="line"># 银行卡基本信息 users_card</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> user_id     <span class="operator">|</span> card_number <span class="operator">|</span> bank_name   <span class="operator">|</span> expiration_date   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1234567890</span>  <span class="operator">|</span> Bank A      <span class="operator">|</span> <span class="number">2022</span><span class="number">-12</span><span class="number">-30</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">2345678901</span>  <span class="operator">|</span> Bank B      <span class="operator">|</span> <span class="number">2021</span><span class="number">-11</span><span class="number">-10</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">3</span> <span class="operator">|</span> <span class="number">3</span>           <span class="operator">|</span> <span class="number">3456789012</span>  <span class="operator">|</span> Bank C      <span class="operator">|</span> <span class="number">2020</span><span class="number">-12</span><span class="number">-01</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------------+-----------------------------------------------+</span></span><br></pre></td></tr></table></figure><h2 id="设计表时，评估哪些字段需要加索引"><span class="post-title-index">5. </span><a href="#设计表时，评估哪些字段需要加索引" class="headerlink" title="设计表时，评估哪些字段需要加索引"></a><strong>设计表时，评估哪些字段需要加索引</strong></h2><div class="note orange simple"><p>如果有查询条件的字段，一般就需要建立索引。</p><p>唯一性太差的字段不需要创建索引,即便用于where条件.</p><p>建立联合索引时,也要考虑把重复率低而又用得多的列放在前面.</p><p>索引也不要建得太多，一般单表索引个数不要超过 <strong>5</strong> 个。因为创建过多的索引，会降低写得速度。</p><p>超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。</p></div><p>针对 逻辑删除 索引如何建立</p><ul><li>逻辑删除与唯一索引：<a href="https://developer.aliyun.com/article/861184">https://developer.aliyun.com/article/861184</a></li><li>唯一索引遇上逻辑删除：<a href="https://juejin.cn/post/7155492949583724551">https://juejin.cn/post/7155492949583724551</a></li><li>保持Unique Key的逻辑删除方案：<a href="https://cloud.tencent.com/developer/article/1531915">https://cloud.tencent.com/developer/article/1531915</a></li><li>如何解决逻辑删除与唯一索引冲突：<a href="https://www.lin2j.tech/archives/logic-delete-and-unique-key">https://www.lin2j.tech/archives/logic-delete-and-unique-key</a></li><li><strong>逻辑删除和唯一索引：</strong><a href="https://chsm.locklab.cn/2020/08/29/logical-deletion-and-unique-index/">https://chsm.locklab.cn/2020/08/29/logical-deletion-and-unique-index/</a></li></ul><p><strong>案例</strong></p><blockquote><p>当我们查询某一条记录 ， 大部分情况都会走 <code>物理删除</code>，我们要查询某条记录对应的SQL： <code>where delete_flag = 0</code> 。前面我们说了 唯一性太差的字段不需要建立索引，那么 字段 <code>delete_flag</code> 这个字段只有 <code>0</code> 或者 <code>1</code> .应该如何处理呢？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151523915.png" alt="image-20230515152307862"></p><h2 id="不需要严格遵守-3NF"><span class="post-title-index">6. </span><a href="#不需要严格遵守-3NF" class="headerlink" title="不需要严格遵守 3NF"></a>不需要严格遵守 3NF</h2><p><strong>数据库三范式（3NF）基本概念</strong></p><ul><li><p>第一范式：对属性的原子性，要求属性具有<strong>原子性，不可再分解</strong>；</p><ul><li>例如：学生（学号，姓名，性别，出生年月日），如果认为最后一列还可以再分成（出生年，出生月，出生日），这说明不具备原子性。</li></ul></li><li><p>第二范式：对记录的唯一性，要求记录有唯一标识，即实体的<strong>唯一性，即不存在部分依赖</strong>；</p><ul><li>例如：课程（学号、姓名、课程号、学分），学分依赖课程号，姓名依赖与学号，所以不符合二范式。</li><li>正确做法：学生：Student(学号, 姓名)；课程：Course(课程号, 学分)；选课关系：StudentCourse(学号, 课程号, 成绩)。</li></ul></li><li><p>第三范式：对字段的冗余性，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即<strong>不存在传递依赖</strong>；</p><ul><li>例如：学号, 姓名, 年龄, 学院名称, 学院电话。依赖传递: (学号) → (学生)；(所在学院) → (学院电话)</li><li>正确做法：学生：(学号, 姓名, 年龄, 所在学院)；学院：(学院, 电话)。</li></ul></li></ul><p><strong>案例</strong></p><blockquote><p>通过业务字段冗余来减少表关联，我们设计表及其字段之间的关系, 应尽量满足第三范式。但是有时候，可以适当冗余，来提高效率</p></blockquote><p>总金额 = 单价 <em> 数量，总金额这个字段的存在，表明该表的设计不满足第三范式，因为总金额可以由单价</em>数量得到，说明总金额是冗余字段。</p><div class="table-container"><table><thead><tr><th><strong>商品名称</strong></th><th><strong>商品型号</strong></th><th><strong>单价</strong></th><th><strong>数量</strong></th><th><strong>总金额</strong></th></tr></thead><tbody><tr><td>手机</td><td>IPhone 13 Pro Max</td><td>9000</td><td>5</td><td>45000</td></tr></tbody></table></div><h2 id="数据库字段是枚举类型的，需要在comment注释清楚"><span class="post-title-index">7. </span><a href="#数据库字段是枚举类型的，需要在comment注释清楚" class="headerlink" title="数据库字段是枚举类型的，需要在comment注释清楚"></a>数据库字段是枚举类型的，需要在comment注释清楚</h2><blockquote><p>如果你设计的数据库字段是枚举类型的话，就需要在comment后面注释清楚每个枚举的意思，以便于维护</p></blockquote><p><strong>正例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`session_status` <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;session授权态 00：在线-授权态有效 01：下线-授权态失效 02：下线-主动退出 03：下线-在别处被登录&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>反例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`session_status` <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;session授权态&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="1-N-、-N-N-关系的设计"><span class="post-title-index">8. </span><a href="#1-N-、-N-N-关系的设计" class="headerlink" title="(1 : N) 、(N : N)关系的设计"></a>(1 : N) 、(N : N)关系的设计</h2><p><strong>1 : N 表的设计</strong></p><blockquote><p>从表（N的这一方）创建一个字段，以字段作为外键指向主表（1的这一方）的主键</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151531955.png" alt="image2022-12-30_16-51-18.png"></p><p><strong>N : N表设计</strong></p><blockquote><p>通过增加第三张表，把N:N修改为两个 1:N，例如 RBAC 表的设计</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151533552.png" alt="image2022-12-19_14-15-35.png"></p><h2 id="不搞外键关联，一般都在代码维护"><span class="post-title-index">9. </span><a href="#不搞外键关联，一般都在代码维护" class="headerlink" title="不搞外键关联，一般都在代码维护"></a>不搞外键关联，一般都在代码维护</h2><p><strong>什么是外键呢？</strong></p><ul><li>外键，也叫FOREIGN KEY，它是用于将两个表连接在一起的键。</li><li>FOREIGN KEY是一个表中的一个字段（或字段集合），它引用另一个表中的PRIMARY KEY。它是用来保证数据的一致性和完整性的。</li></ul><p><strong>阿里的Java规范也有这么一条：</strong></p><ul><li>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</li></ul><p><strong>我们为什么不推荐使用外键呢？</strong></p><ul><li>使用外键存在性能问题、并发死锁问题、使用起来不方便等等。</li><li>每次做DELETE或者UPDATE都必须考虑外键约束，会导致开发的时候很难受,测试数据造数据也不方便。</li><li>还有一个场景不能使用外键，就是分库分表。 </li></ul><h2 id="参考博文"><span class="post-title-index">10. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><ul><li><a href="https://juejin.cn/post/7147135702604447758">掘金文章（21个MySQL表设计的经验准则）</a></li><li><a href="https://zhuanlan.zhihu.com/p/63005458">MySQL中的char和varchar</a></li><li><a href="https://www.cnblogs.com/mkl34367803/p/13096564.html">为什么说性别不适合做索引</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-表命名规范（一）</title>
      <link href="/posts/9abc017f.html"/>
      <url>/posts/9abc017f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文主要讲解 <code>MySQL</code> 表中的一些错误命名规范，虽然这是一个很简单的事情，但随着需求增多，表也在不断扩张，如果没有相关的表命名规范，到时候维护起来也会及其麻烦。我们以 开源框架 <code>Ruoyi</code> 为例，讲解这个框架对表的命名处理。</p></blockquote><h2 id="不规范表命名存在的问题"><span class="post-title-index">2. </span><a href="#不规范表命名存在的问题" class="headerlink" title="不规范表命名存在的问题"></a>不规范表命名存在的问题</h2><h3 id="表命名"><span class="post-title-index">2.1. </span><a href="#表命名" class="headerlink" title="表命名"></a>表命名</h3><div class="note orange simple"><p>问题一：如下图中，如下表名虽然可以做到见名其意，但随着业务扩展。当需要查询某一个模块的数据时，但又不清楚表名就会存在问题。</p></div><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151249471.png" alt="image-20230515124929426"></p><h3 id="字段命名"><span class="post-title-index">2.2. </span><a href="#字段命名" class="headerlink" title="字段命名"></a>字段命名</h3><div class="note orange simple"><p>问题二：如下图中，找到了表名，但如果要修改某个字段的数据又会存在问题了。</p></div><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151255479.png" alt="image-20230515125527436"></p><h2 id="Ruoyi-对表命名的处理"><span class="post-title-index">3. </span><a href="#Ruoyi-对表命名的处理" class="headerlink" title="Ruoyi 对表命名的处理"></a><code>Ruoyi</code> 对表命名的处理</h2><blockquote><p>基本规范</p><ul><li><strong>数据库表名、字段名、索引名等都需要命名规范，可读性高(一般要求用英文)，最好做到见名知意</strong></li><li>我们可以通过命名知道表属于那个模块，可以高效的定位到表进行修改。</li></ul></blockquote><h3 id="表命名-1"><span class="post-title-index">3.1. </span><a href="#表命名-1" class="headerlink" title="表命名"></a>表命名</h3><blockquote><p>基本规范</p><ul><li>必须使用小写字母或者数字，禁止使用数字开头，禁止使用拼音，并且一般不使用英文缩写。</li><li>在 <code>MySQL</code> 中，如果表名可以使用父级模块的名称作为前缀，可以更好地组织和管理表</li></ul></blockquote><p>如下图，<code>QRTZ</code> 开头就可以知道是定时任务模块的数据。<code>system</code> 开头的就知道是系统模块的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305151302576.png" alt="image2022-12-30_10-30-27.png"></p><h3 id="字段命名-1"><span class="post-title-index">3.2. </span><a href="#字段命名-1" class="headerlink" title="字段命名"></a>字段命名</h3><blockquote><p>基本规范</p><ul><li>必须使用小写字母或者数字，禁止使用数字开头，禁止使用拼音，并且一般不使用英文缩写</li></ul></blockquote><p>例如，一个表的账号字段</p><ul><li>反例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_user` (</span><br><span class="line">  `<span class="number">1</span>_acc_no` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`acc_no`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci COMMENT<span class="operator">=</span><span class="string">&#x27;用户信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>正例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_user` (</span><br><span class="line">  `account_no` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`account_no`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci COMMENT<span class="operator">=</span><span class="string">&#x27;用户信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="索引命名"><span class="post-title-index">3.3. </span><a href="#索引命名" class="headerlink" title="索引命名"></a>索引命名</h3><p>主键索引：</p><ul><li>pk_字段名。 例如：<strong><code>PRIMARY KEY (</code>id<code>) USING BTREE</code></strong></li></ul><p>唯一索引：</p><ul><li>uk_字段名。 例如：<strong><code>UNIQUE INDEX</code>uk_mobile<code>(</code>mobile<code>ASC) USING BTREE</code></strong></li></ul><p>普通索引：</p><ul><li>idx_字段名。例如：<strong><code>INDEX</code>idx_mobile<code>(</code>mobile<code>ASC) USING BTREE</code></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-负载均衡（九）</title>
      <link href="/posts/ed9b15a4.html"/>
      <url>/posts/ed9b15a4.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题思考？"><span class="post-title-index">1. </span><a href="#问题思考？" class="headerlink" title="问题思考？"></a>问题思考？</h2><ol><li><p><strong>负载均衡之前使用的什么方案？</strong></p><ul><li>在早期并发不大的情况，我们一般使用如下图所示的架构。</li><li>当用户增长量上升，服务器处理请求的能力到达了极限，就会出现加载速度慢，出现宕机情况</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305121653538.png" alt="image.png"></p></li><li><p><strong>负载均衡 解决了什么问题？</strong></p><ul><li>针对上面的问题就可以使用 负载均衡 策略进行处理，具体如下图</li><li>当我们其中一台服务出现问题，我们可以通过负载均衡策略将请求转移到其他服务器中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305121654822.gif" alt="v2-3661c2082103036ecb23a3f29be740be_b.gif"></p></li><li><p><strong>负载均衡提供的策略？</strong></p><ul><li>轮询策略（round-robin）：请求在所有可用服务器之间平均分配，负载均衡默认的配置就是轮询。</li><li>权重策略（weight）：服务器被分配一个权重，请求根据每个服务器的权重分配。</li><li>随机策略（random）：请求被随机分配在任意一台可用服务器当中。</li><li>ip_hash：客户端的 IP 地址将用作哈希键，来自同一个ip的请求会被转发到相同的服务器。</li><li>响应时长策略（fair）：根据服务器的响应时间来分配请求，响应时间短的优先分配，即负载压力小的优先会分配。</li><li>最少连接（least_conn）：将请求分配给活动连接数最少的服务器（较为空闲的服务器）。</li></ul></li></ol><h2 id="Nginx-配置负载均衡策略"><span class="post-title-index">2. </span><a href="#Nginx-配置负载均衡策略" class="headerlink" title="Nginx 配置负载均衡策略"></a><strong>Nginx 配置负载均衡策略</strong></h2><blockquote><p>根据业务场景的不同选择不同的策略方式，如果选择的策略不适合特定场景，可能会导致性能问题。</p></blockquote><h3 id="最佳实现（round-robin、random）"><span class="post-title-index">2.1. </span><a href="#最佳实现（round-robin、random）" class="headerlink" title="最佳实现（round-robin、random）"></a>最佳实现（round-robin、random）</h3><blockquote><p>最佳实践的两种策略：<strong>轮询策略（round-robin）、随机策略（random）</strong></p><p><strong>最佳实现的考量指标</strong></p><ul><li>这种是最常见的一种配置，当不知道用什么的时候就采用这一类型。</li><li>随机策略在大量请求的情况下，按照概率的理论等同于轮询策略。</li></ul></blockquote><p><strong>轮询策略（round-robin）：请求在所有可用服务器之间平均分配</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置就是轮询策略</span></span><br><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.102:9001</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8003</span>;</span><br><span class="line">    <span class="comment"># 匹配请求中的host值</span></span><br><span class="line">    <span class="attribute">server_name</span> ruoyi.balance.localhost;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 监听请求静态资源 html 路径</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="comment"># 查找目录</span></span><br><span class="line">      <span class="attribute">root</span> /home/basics-analysis/web;</span><br><span class="line">      <span class="comment"># 默认查找</span></span><br><span class="line">      <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 监听请求后端服务</span></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /api &#123;</span><br><span class="line">        <span class="comment">#nginx的主机地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 配置代理服务器</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server_group;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>随机策略（random）：请求被随机分配在任意一台可用服务器当中</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机策略</span></span><br><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   random;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.102:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能优先（weight、fair、least-conn）"><span class="post-title-index">2.2. </span><a href="#性能优先（weight、fair、least-conn）" class="headerlink" title="性能优先（weight、fair、least_conn）"></a>性能优先（weight、fair、least_conn）</h3><blockquote><p>性能优先的三种策略：<strong>权重策略（weight）、响应时长策略（fair）、最小连接（least_conn）</strong></p><p><strong>性能优先的考量指标</strong></p><ul><li>从经验或硬件上分为高权重、低权重的机器。</li><li>按照节点请求的响应时长来决定是多分配请求，还是少分配请求。</li><li>按照保持的连接数。一般来说保持的连接数越多说明处理的任务越多，也是最繁忙的，可以将请求分配给其他机器处理。</li></ul></blockquote><p><strong>权重策略（weight）：服务器被分配一个权重，请求根据每个服务器的权重分配</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 权重策略</span></span><br><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span> weight=<span class="number">5</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应时长策略（fair）：根据服务器的响应时间来分配请求，响应时间短的优先分配，即负载压力小的优先会分配</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 响应时长策略</span></span><br><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   fair;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最少连接数（least_conn）：将请求分配给活动连接数最少的服务器（较为空闲的服务器）</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最少连接数</span></span><br><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   least_conn;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保持稳定（ip-hash、url-hash）"><span class="post-title-index">2.3. </span><a href="#保持稳定（ip-hash、url-hash）" class="headerlink" title="保持稳定（ip_hash、url_hash）"></a>保持稳定（ip_hash、url_hash）</h3><blockquote><p><strong>保持稳定的两种策略：ip_hash、url_hash</strong></p><p><strong>保持稳定的考量指标</strong></p><ul><li>很多请求都是有状态的，上一次请求到哪个业务节点，这次还要请求到哪台机器。</li><li>将客户端的 IP 地址 或者 url 作为哈希键，来自同一个ip的请求会被转发到相同的服务器。</li></ul><p><strong>保持稳定的两种策略存在的问题</strong></p><ul><li><strong>当有一个上游服务器宕机或者扩容的时候，会引发大量的路由变更，进而引发连锁反应，如果上游服务器在有缓存的情况下导致大量缓存失效等问题。</strong></li><li><strong>针对这个问题，参考博文：</strong><a href="https://blog.csdn.net/qq_34556414/article/details/106156796">https://blog.csdn.net/qq_34556414/article/details/106156796</a></li></ul></blockquote><p><strong>ip_hash策略</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip_hash</span></span><br><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>url_hash策略</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url_hash</span></span><br><span class="line"><span class="section">upstream</span> server_group&#123;</span><br><span class="line">   <span class="attribute">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="故障节点摘除与恢复"><span class="post-title-index">3. </span><a href="#故障节点摘除与恢复" class="headerlink" title="故障节点摘除与恢复"></a>故障节点摘除与恢复</h2><ul><li>经典配置详解</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> server_group &#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.100:9001</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.206.101:9001</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置详解</strong></p><div class="table-container"><table><thead><tr><th><strong>指令</strong></th><th><strong>默认值</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>max_fails</td><td>1</td><td>请求失败多少次之后，暂停使用该节点。需要搭配fail_timeout 一起使用。</td></tr><tr><td>fail_timeout</td><td>10s</td><td>当认定该节点不能使用之后，暂定多久可以使用。</td></tr><tr><td>backup</td><td>-</td><td>类似于switch语句中的default，当主要节点都挂了的时候，会把请求打到这个backup节点</td></tr></tbody></table></div><h2 id="参考博文"><span class="post-title-index">4. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/32841479">什么是负载均衡？</a></p><p><a href="https://blog.csdn.net/finally_vince/article/details/124454458">Nginx负载均衡解决的问题和实现方式都在这里啦</a></p><p><a href="https://juejin.cn/post/6844904019043811342">Nginx专题（2）：Nginx的负载均衡策略及其配置</a></p><p><a href="https://blog.csdn.net/xyang81/article/details/51702900">Nginx负载均衡配置</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-WebSocket（八）</title>
      <link href="/posts/b0ee815c.html"/>
      <url>/posts/b0ee815c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-配置-WebSocket"><span class="post-title-index">1. </span><a href="#Nginx-配置-WebSocket" class="headerlink" title="Nginx 配置 WebSocket"></a>Nginx 配置 WebSocket</h2><blockquote><p>具体步骤如下：</p><ol><li>创建 <code>Nginx</code> 配置文件 <code>8004.conf</code></li><li>刷新 <code>Nginx</code> 配置文件</li></ol></blockquote><h3 id="实现步骤"><span class="post-title-index">1.1. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>创建 <code>Nginx</code> 配置文件 <code>8004.conf</code></p><ul><li><code>Nginx</code> 配置文件路径：<code>/etc/nginx/conf.d</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 $http_upgrade 变量映射到 $connection_upgrade 变量</span></span><br><span class="line"><span class="comment"># $http_upgrade 变量通常用于表示客户端请求是否支持 WebSocket。</span></span><br><span class="line"><span class="comment"># 如果客户端请求支持 WebSocket，则 $http_upgrade 变量的值为 &quot;websocket&quot;；否则，它的值为空字符串。</span></span><br><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">    <span class="attribute">default</span> upgrade;</span><br><span class="line">    &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 虚拟主机server块</span></span><br><span class="line">server&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># do something ...</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 监听 /message 路径的请求</span></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /message &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span> http://server:port;</span><br><span class="line">       <span class="comment"># 表示使用 HTTP/1.1 协议</span></span><br><span class="line">       <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;   </span><br><span class="line">       <span class="comment"># 表示将 Upgrade 头设置为 $http_upgrade。在http请求头中加入了 Upgrade: websocket</span></span><br><span class="line">       <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">       <span class="comment"># 表示将 Connection 头设置为 &quot;upgrade&quot;。在http请求头中加入了 Connection: Upgrade</span></span><br><span class="line">       <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>刷新 <code>Nginx</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># /usr/sbin/nginx -t </span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># /usr/sbin/nginx -s reload</span></span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ol><h2 id="WebSocket-长时间不进行推送"><span class="post-title-index">2. </span><a href="#WebSocket-长时间不进行推送" class="headerlink" title="WebSocket 长时间不进行推送"></a>WebSocket 长时间不进行推送</h2><ol><li>方案一：通过 <code>proxy_read_timeout</code> 超时连接时长解决</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听 /message 路径的请求</span></span><br><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /message &#123;</span><br><span class="line">   <span class="attribute">proxy_pass</span> http://server:port;</span><br><span class="line">   <span class="comment"># 解决连接超时问题，60分钟，默认是60s。</span></span><br><span class="line">   <span class="attribute">proxy_read_timeout</span> <span class="number">3600s</span>;</span><br><span class="line">   <span class="comment"># 表示使用 HTTP/1.1 协议</span></span><br><span class="line">   <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;   </span><br><span class="line">   <span class="comment"># 表示将 Upgrade 头设置为 $http_upgrade。在http请求头中加入了 Upgrade: websocket</span></span><br><span class="line">   <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">   <span class="comment"># 表示将 Connection 头设置为 &quot;upgrade&quot;。在http请求头中加入了 Connection: Upgrade</span></span><br><span class="line">   <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>方案二：通过前端设置定时器，进行 <code>WebSocket</code> 进行心跳请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">timer=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (websocket.<span class="property">readyState</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        websocket.<span class="title function_">send</span>(<span class="string">&quot;心跳包检测&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//IM连接已断开</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">50</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-配置跨域（七）</title>
      <link href="/posts/db06d141.html"/>
      <url>/posts/db06d141.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题思考？"><span class="post-title-index">1. </span><a href="#问题思考？" class="headerlink" title="问题思考？"></a>问题思考？</h2><ol><li><p><strong>什么是跨域？</strong></p><ul><li><strong>跨域是指浏览器不允许一个网站访问另一个网站的资源。</strong></li></ul></li><li><p><strong>跨域的例子？</strong></p><ul><li>当我们开发时，需要前后端进行联调代码。</li><li>这时 如果 前端的ip是 <code>192.168.56.10:8080</code> ，后端的ip是 <code>192.168.53.20:8888</code></li><li>那么 前端 请求后台就会出现跨域问题。</li></ul></li><li><p><strong>出现跨域的原因？</strong></p><ul><li>不同域名。例如：<a href="http://www.example.com/">www.example.com</a> 请求 <a href="http://api.example.com/">api.example.com</a></li><li>不同协议。例如：<a href="http://a.baidu.com/">http://a.baidu.com</a> 请求 <a href="https://www.baidu.com/">https://www.baidu.com</a> </li><li>不同端口。例如：<a href="http://127.0.0.1:5500/">http://127.0.0.1:5500</a> 请求 <a href="http://127.0.0.1:8089/">http://127.0.0.1:8089</a>  </li></ul></li><li><p><strong>图解说明</strong></p><ul><li><p>当我们在网页上面请求 <a href="http://127.0.0.1:5500/index">http://127.0.0.1:5500/index</a></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305121459712.png" alt="img"></p></li></ul><ul><li><p>这时候在JavaScript中需要请求第三方接口 <a href="http://127.0.0.1:8089/">http://127.0.0.1:8089</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;http://127.0.0.1:8089/api/testCross&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>控制台中打印错误信息</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305121459518.png" alt="img"></p></li></ul></li></ol><h2 id="Nginx-处理跨域"><span class="post-title-index">2. </span><a href="#Nginx-处理跨域" class="headerlink" title="Nginx 处理跨域"></a><code>Nginx</code> 处理跨域</h2><ul><li><p><strong>方式一：接受来自任意源的跨域请求</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置允许所有源的跨域请求（即 add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;）</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  <span class="comment"># 配置允许请求方法</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE&#x27;</span>;</span><br><span class="line">  <span class="comment"># 配置允许的请求头</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">  <span class="comment"># 如果请求方法是 OPTIONS，则返回 HTTP 状态码 20</span></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方式二：只有请求路径以 /api/ 开头的请求才会添加跨域头信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /api &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 配置允许所有源的跨域请求（即 add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;）</span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="comment"># 配置允许请求方法</span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE&#x27;</span>;</span><br><span class="line">    <span class="comment"># 配置允许的请求头</span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;</span><br><span class="line">    <span class="comment"># 如果请求方法是 OPTIONS，则返回 HTTP 状态码 20</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot-处理跨域"><span class="post-title-index">3. </span><a href="#SpringBoot-处理跨域" class="headerlink" title="SpringBoot 处理跨域"></a><code>SpringBoot</code> 处理跨域</h2><ul><li><p>针对于上面的前后端联调例子，我们可以在 <code>java</code> 中添加以下代码，就可以解决跨域问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourcesConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 跨域配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置访问源地址</span></span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置访问源请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置访问源请求方法</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 有效期 1800秒</span></span><br><span class="line">        config.setMaxAge(<span class="number">1800L</span>);</span><br><span class="line">        <span class="comment">// 添加映射路径，拦截一切请求</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="comment">// 返回新的CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="区别？"><span class="post-title-index">4. </span><a href="#区别？" class="headerlink" title="区别？"></a>区别？</h2><blockquote><p><code>Nginx</code> 处理跨域和 <code>Spring Boot</code> 处理跨域的区别主要在于它们<strong>处理跨域请求的位置</strong>不同。</p><p><code>Nginx</code> ：处理跨域适用于<strong>前端应用程序</strong>与<strong>后端 API 之间</strong>的跨域问题</p><p><code>Spring Boot</code>：处理跨域则适用于在<strong>后端应用程序</strong>中解决跨域问题</p></blockquote><ol><li><p><strong><code>Nginx</code> 处理跨域</strong></p><ul><li><code>Nginx</code> 处理跨域是在服务器端处理跨域请求的</li><li>首先，当客户端发送跨域请求时，<strong>请求会先到达 <code>Nginx</code> 服务器</strong>。</li><li>然后，<code>Nginx</code> 服务器会添加相应的头信息并转发请求到后端应用服务器。</li></ul></li><li><p><strong><code>SpringBoot</code> 处理跨域</strong></p><ul><li>Spring Boot 处理跨域是在应用服务器端处理跨域请求的</li><li>首先，当客户端发送跨域请求时，请求会先到达 <code>Nginx</code> 服务器；</li><li>然后，<code>Nginx</code> 服务器会转发请求到后端应用服务器；</li><li>最后，应用服务器再通过配置 <code>CORS</code> 过滤器来处理跨域请求；</li></ul></li><li><p><strong>服务器和服务器之间不存在跨域，只有浏览器才存在跨域的说法，例如 HttpClient 请求</strong>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-配置参数（六）</title>
      <link href="/posts/cfc171aa.html"/>
      <url>/posts/cfc171aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="location-参数"><span class="post-title-index">1. </span><a href="#location-参数" class="headerlink" title="location 参数"></a>location 参数</h2><blockquote><p>location ：配置请求的路由，可以使用修饰符或正则表达式。</p><p>注意事项：<strong>location uri 前边的/不能省略，uri后边的/可以省略</strong>。</p></blockquote><p>如下内容的优先级从高到低</p><div class="tabs" id="location"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#location-1">1.精确匹配【=】</button></li><li class="tab"><button type="button" data-href="#location-2">2.抢占式前缀匹配【^~】</button></li><li class="tab"><button type="button" data-href="#location-3">3.正则匹配【~】</button></li><li class="tab"><button type="button" data-href="#location-4">3.正则匹配【~*】</button></li><li class="tab"><button type="button" data-href="#location-5">4.普通前缀匹配【/】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="location-1"><p>用于<strong>标准 URI</strong> 前，要求请求字符串与其精准匹配，成功则立即处理，nginx 停止搜索其他匹配。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  只有当访问 www.nginx-test.com/match_all/ 时才会匹配 /usr/share/nginx/html/match_all/index.html</span></span><br><span class="line"><span class="section">location</span> = /match_all/ &#123;</span><br><span class="line">   <span class="attribute">root</span> /usr/share/nginx/html</span><br><span class="line">   index index.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-2"><p>用于<strong>标准 URI</strong> 前，并要求一旦匹配到就会立即处理，不再去匹配其他的那些个正则 URI，一般用来匹配目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当访问 www.nginx-test.com/bbs/ 时会匹配上 /usr/share/nginx/html/bbs/index.html</span></span><br><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /bbs &#123;</span><br><span class="line">   <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">   <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-3"><p>用于<strong>正则 URI</strong> 前，表示 URI 包含正则表达式， <strong>区分</strong>大小写</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用于正则 <span class="attribute">URI</span> 前，表示 URI 包含正则表达式， 区分大小写<span class="comment"># 当访问 www.nginx-test.com/a.jpg 等路径时会去 /usr/share/nginx/images/a.jpg 找对应的资源</span></span><br><span class="line">location <span class="regexp">~ \.(jpeg|jpg|png|svg)$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> /usr/share/nginx/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-4"><p>用于<strong>正则 URI</strong> 前， 表示 URI 包含正则表达式， <strong>不区分</strong>大小写</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当访问 www.nginx-test.com/A.jpg 等路径时会去 /usr/share/nginx/images/A.jpg 找对应的资源</span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~* \.(jpeg|jpg|png|svg)$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> /usr/share/nginx/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="location-5"><p>location 后没有参数直接跟着 <strong>标准 URI</strong>，表示前缀匹配，代表跟请求中的 URI 从头开始匹配</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">   <span class="attribute">root</span> /usr/share/nginx/html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="root-参数"><span class="post-title-index">2. </span><a href="#root-参数" class="headerlink" title="root 参数"></a>root 参数</h2><blockquote><p> <code>root</code> : 指令用于指定一个文件系统路径和静态资源文件的根目录。</p></blockquote><ul><li>语法</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">   <span class="comment"># root路径＋location路径</span></span><br><span class="line">   <span class="attribute">root</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /test &#123;</span><br><span class="line"><span class="attribute">root</span> /opt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x/test</span><br></pre></td></tr></table></figure><ul><li>实际访问目录</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/test</span><br></pre></td></tr></table></figure><h2 id="alias-参数"><span class="post-title-index">3. </span><a href="#alias-参数" class="headerlink" title="alias 参数"></a>alias 参数</h2><blockquote><p> <code>alias</code> ：指令用于指定文件系统路径，但它与 <code>root</code> 指令有所不同。</p><p> 指定文件路径，使用 <code>alias</code> 时，目录后面一定要加 <strong>/</strong></p></blockquote><ul><li>语法</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">   <span class="comment"># root路径＋location路径</span></span><br><span class="line">   <span class="attribute">alias</span> path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /test-alias/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /opt/test/alias/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x/test-alias/index.html</span><br></pre></td></tr></table></figure><ul><li>实际访问目录</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/test/alias/</span><br></pre></td></tr></table></figure><h2 id="proxy-pass-修饰符"><span class="post-title-index">4. </span><a href="#proxy-pass-修饰符" class="headerlink" title="proxy_pass 修饰符"></a>proxy_pass 修饰符</h2><blockquote><p>反向代理配置，用于代理请求，适用于前后端负载分离或多台机器、服务器负载分离的场景。</p><p>匹配到location配置的URL路径后，转发请求到【proxy_pass】配置的URL。</p><p>是否会附加location配置路径与【proxy_pass】配置的路径后是否有”/“有关，有”/“则不附加。</p><p>具体博文请参考 <a href="http://localhost:4000/2023/05/11/Nginx/Nginx-%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89/">Nginx-代理转发（四）</a></p></blockquote><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><p><a href="https://blog.csdn.net/weixin_46270732/article/details/116937218">什么是NGINX的动静分离；什么是负载均衡</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-动静分离（五）</title>
      <link href="/posts/b5837b07.html"/>
      <url>/posts/b5837b07.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文的核心主要是将前四篇博文的内容进行一个综合练习，通过 <code>Nginx</code> 部署开源框架 <code>Ruoyi-Vue</code> 这个需求进行实现动静分离。 </p><p><strong>准备工作</strong></p><ul><li>网盘链接: <a href="https://pan.baidu.com/s/13bTaoFbooNpEQ9oE9vXsGw">https://pan.baidu.com/s/13bTaoFbooNpEQ9oE9vXsGw</a>  密码: vx7n</li></ul></blockquote><h2 id="问题思考"><span class="post-title-index">2. </span><a href="#问题思考" class="headerlink" title="问题思考?"></a>问题思考?</h2><ol><li><p><strong>为什么不使用 Apache Tomcat 处理动静分离？</strong></p><ul><li><code>Apache Tocmat</code> 严格来说是一款 <code>java EE</code> 服务器，主要是用来处理 <code>servlet</code> 请求。例如 <code>SpringBoot</code> 中内置的就是 Tomcat 服务器。</li></ul></li><li><p><strong>静态资源（<code>html、css、js</code>、图片）交给谁处理？</strong></p><ul><li>将静态文件交给 <code>Nginx</code> 处理，可以提高系统的访问速度，减少 <code>Tomcat</code> 的请求次数，有效的给后端服务器降压。</li></ul></li><li><p><strong>静态资源一定是和 <code>Nginx</code> 放在同一台服务器的吗？</strong></p><ul><li>是的，本质上来说 <code>Nginx</code> 配置本身就是一个静态资源的服务器。例如，我们打的前端 Docker 镜像本质上一个 <code>Nginx</code> 服务器。</li></ul></li><li><p><strong>那动静分离之后，静态资源如何跟动态请求交互呢？</strong></p><ul><li>静态资源是通过浏览器和动态资源进行交互的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305120041894.png" alt="888dce6baa76ca30e5892d8f9d16f4a"></p></li></ol><h2 id="具体需求"><span class="post-title-index">3. </span><a href="#具体需求" class="headerlink" title="具体需求"></a>具体需求</h2><blockquote><p>本过程也可以在一台服务器中进行，但为了更好的理解动静分离，本人用到的是两台服务器 <code>server1</code> 和 <code>server2</code> 。</p><ul><li><code>server1</code> ：部署的是 <code>nginx</code> 和 前端文件服务；</li><li><code>server2</code> ：部署的是后端 jar 服务；</li></ul><p>实现流程如下：</p><ul><li>首先，当客户端通过 <a href="http://ip:port/path">http://ip:port/path</a> 进行访问。</li><li>然后，当请求达到服务器之后，通过 <code>Nginx</code> 代理 转发到真正的目标服务器上。</li><li>最后，返回请求信息。</li><li>具体流程如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305120049140.png" alt="image-20230512004958119"></p></blockquote><h2 id="Nginx-配置-Ruoyi-Vue-框架"><span class="post-title-index">4. </span><a href="#Nginx-配置-Ruoyi-Vue-框架" class="headerlink" title="Nginx 配置 Ruoyi-Vue 框架"></a><code>Nginx</code> 配置 <code>Ruoyi-Vue</code> 框架</h2><blockquote><p>具体步骤如下：</p><ol><li><code>server1</code> ：上传静态资源。</li><li><code>server1</code> ：创建 <code>nginx</code> 配置文件，并使其生效。</li><li><code>server2</code> ：修改 <code>ruoyi-admin.jar</code> 中的数据库和 <code>Redis</code> 连接信息，并使其生效。</li><li><code>server1</code> ：通过 <code>crul</code> 命令是否可以访问该端口。</li><li>客户端访问</li></ol></blockquote><h3 id="实现步骤"><span class="post-title-index">4.1. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p><code>server1</code> ：上传静态资源。</p><ul><li><p>文件路径：<code>/home/ruoyi</code></p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305120104382.png" alt="image-20230512010402361"></p></li></ul></li><li><p><code>server1</code> ：创建 <code>nginx</code> 配置文件，并使其生效。</p><div class="tabs" id="server1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#server1-1">【第一步：创建nginx配置文件 8003.conf】</button></li><li class="tab"><button type="button" data-href="#server1-2">【第二步：刷新 nginx 配置文件】</button></li><li class="tab"><button type="button" data-href="#server1-3">【第三步：开放防火墙端口，刷新配置】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="server1-1"><ul><li><p><code>nginx</code> 配置文件路径 <code>/etc/nginx/cond.d</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机server块</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"> <span class="comment"># 监听端口</span></span><br><span class="line">     <span class="attribute">listen</span>       <span class="number">8003</span>;</span><br><span class="line">     <span class="comment"># 匹配请求中的host值</span></span><br><span class="line">     <span class="attribute">server_name</span>  localhost;</span><br><span class="line">     <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 监听请求静态资源路径</span></span><br><span class="line">     <span class="section">location</span> / &#123;</span><br><span class="line">       <span class="attribute">root</span>   /home/ruoyi;</span><br><span class="line">   <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">       <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 监听请求静态资源路径</span></span><br><span class="line">     <span class="section">location</span> /prod-api/ &#123;</span><br><span class="line">        <span class="comment">#nginx的主机地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">         <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">         <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">         <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">         </span><br><span class="line">         <span class="comment"># 配置代理服务器, 这里 如果是本机就直接使用 http://localhost:port，如果不是就是用目标服务器的 ip + 端口。</span></span><br><span class="line">         <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">     <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">         <span class="attribute">root</span>   html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server1-2"><ul><li><p>刷新 <code>nginx</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># /usr/sbin/nginx -t </span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># /usr/sbin/nginx -s reload</span></span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server1-3"><ul><li><p><code>server1</code> ：开放防火墙端口，刷新配置。</p><div class="note warning simple"><p>如果为 阿里云 或者 腾讯云 需要配置安全组规则。例如：<a href="https://developer.aliyun.com/article/767328">阿里云-配置安全组规则</a></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --zone=public --add-port=8003/tcp --permanent # 开放8003端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p><code>server2</code> ：修改 <code>ruoyi-admin.jar</code> 中的连接信息，并使其生效。</p><div class="tabs" id="server2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#server2-1">【第一步：修改jar包配置信息】</button></li><li class="tab"><button type="button" data-href="#server2-2">【第二步：创建数据库信息】</button></li><li class="tab"><button type="button" data-href="#server2-3">【第三步：启动项目】</button></li><li class="tab"><button type="button" data-href="#server2-4">【第四步：开放端口】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="server2-1"><ul><li><p>通过压缩工具打开<code>jar</code>包，可以通过 <code>360压缩</code> 或者 <code>7z</code> 打开</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111635689.png" alt="image-20230511163533665"></p></li><li><p>修改 <code>BOOT-INF\classes</code> 文件下 <code>application-druid.yml</code> 文件中的 数据库连接信息</p><blockquote><p>关于Linux下的MySQL安装可以参考我的博客 《<a href="http://example.com/2023/05/09/Linux/Linux-Shell-MySQL/">Linux-Shell-MySQL</a>》</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 主库数据源</span></span><br><span class="line">            <span class="attr">master:</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://server:3306/ry?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">P@ssw0rd</span></span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <code>BOOT-INF\classes</code> 文件下 <code>application.yml</code> 文件中的 <code>Redis</code> 连接信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis 配置</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="comment"># 地址</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">server</span></span><br><span class="line">  <span class="comment"># 端口，默认为6379</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="comment"># 数据库索引</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 密码</span></span><br><span class="line">  <span class="attr">password:</span> </span><br><span class="line">  <span class="comment"># 连接超时时间</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">lettuce:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># 连接池的最大数据库连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">      <span class="comment"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server2-2"><ul><li><p>创建 <code>ry</code> 数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建 ruoyi 数据库 jdbc:mysql:<span class="operator">/</span><span class="operator">/</span>server:<span class="number">3306</span><span class="operator">/</span>ry</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `ry` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8mb4&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8mb4_unicode_ci&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>将百度网盘中的 <code>ry_20230223.sql</code> 文件导入 <code>ry</code> 数据库中</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305120108851.png" alt="image-20230512010835821"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server2-3"><ul><li><p>上传至 <code>/home/ruoyi</code> 盘符</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305120110359.png" alt="image-20230512011020342"></p></li><li><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># java -jar ruoyi-admin.jar &amp;</span></span><br><span class="line">[1] 6556</span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># tail -f nohup.out </span></span><br><span class="line">..............</span><br><span class="line">00:21:26.908 [main] INFO  c.r.RuoYiApplication - [logStarted,61] - Started RuoYiApplication <span class="keyword">in</span> 28.295 seconds (JVM running <span class="keyword">for</span> 29.96)</span><br><span class="line">(♥◠‿◠)ﾉﾞ  若依启动成功   ლ(´ڡ`ლ)ﾞ  </span><br><span class="line"> .-------.       ____     __        </span><br><span class="line"> |  _ _   \      \   \   /  /    </span><br><span class="line"> | ( <span class="string">&#x27; )  |       \  _. /  &#x27;</span>       </span><br><span class="line"> |(_ o _) /        _( )_ .<span class="string">&#x27;         </span></span><br><span class="line"><span class="string"> | (_,_).&#x27;</span> __  ___(_ o _)<span class="string">&#x27;          </span></span><br><span class="line"><span class="string"> |  |\ \  |  ||   |(_,_)&#x27;</span>         </span><br><span class="line"> |  | \ `<span class="string">&#x27;   /|   `-&#x27;</span>  /           </span><br><span class="line"> |  |  \    /  \      /           </span><br><span class="line"> <span class="string">&#x27;&#x27;</span>-<span class="string">&#x27;   `&#x27;</span>-<span class="string">&#x27;    `-..-&#x27;</span>  </span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server2-4"><ul><li><div class="note warning simple"><p>如果为 阿里云 或者 腾讯云 需要配置安全组规则。例如：<a href="https://developer.aliyun.com/article/767328">阿里云-配置安全组规则</a></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># firewall-cmd --zone=public --add-port=8080/tcp --permanent # 开放8080端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p><code>server1</code> ：通过 <code>crul</code> 命令是否可以访问该端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># curl http://server2:8080/</span></span><br><span class="line">欢迎使用RuoYi后台管理框架，当前版本：v3.8.5，请通过前端地址访问。</span><br></pre></td></tr></table></figure></li><li><p>客户端进行访问</p><ul><li>访问地址：<a href="http://server1:8003">http://server1:8003</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305120112387.png" alt="image-20230512011246341"></p></li></ol><h2 id="参考博文"><span class="post-title-index">5. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><p><a href="https://blog.csdn.net/weixin_46270732/article/details/116937218">什么是NGINX的动静分离；什么是负载均衡</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-代理转发（四）</title>
      <link href="/posts/fc4777.html"/>
      <url>/posts/fc4777.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在 《<a href="https://wickson.top/2023/05/11/Nginx/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89/">Nginx-反向代理（三）</a>》博文中在 nginx 的配置文件中出现了一下参数 <strong><code>proxy_pass</code></strong> 以及 如何 <strong><code>设置代理请求headers</code></strong>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听请求静态资源路径</span></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 配置代理服务器, 这里 如果是本机就直接使用 http://localhost:port，如果不是就是用目标服务器的 ip + 端口。</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://server2:port;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="proxy-pass"><span class="post-title-index">2. </span><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h2><blockquote><ul><li>proxy_pass: <strong>用于配制代理服务器，<code>proxy_pass</code> 区别于 <code>root</code> 和 <code>alias</code> ，是将请求反向代理到指定的url，后面博文会讲解他们的区别</strong></li></ul></blockquote><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass &lt;URL&gt;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://127.0.0.1:8081;</span><br><span class="line">proxy_pass http://127.0.0.1/proxy</span><br></pre></td></tr></table></figure><ul><li>注意事项：<strong>nginx 配置 proxy_pass 中 url 末尾 带/ 与 不带/ 的区别</strong></li></ul><div class="tabs" id="proxy_pass"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#proxy_pass-1">【 带/ 】</button></li><li class="tab"><button type="button" data-href="#proxy_pass-2">【 不带/ 】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="proxy_pass-1"><div class="note success simple"><p><strong>带 / : 会将原uri去除location匹配表达式后的内容拼接在proxy_pass中url之后</strong></p></div><p><strong>用户请求 URI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bbs/abc/test.html</span><br></pre></td></tr></table></figure><p><strong>proxy_pass 配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配路径，后缀不带/</span></span><br><span class="line"><span class="section">location</span> /bbs &#123;</span><br><span class="line">   <span class="comment"># 带 / : 会将原uri去除location匹配表达式后的内容拼接在proxy_pass中url之后</span></span><br><span class="line">   <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 匹配路径，后缀带/</span></span><br><span class="line"><span class="section">location</span> /bbs/ &#123;</span><br><span class="line">   <span class="comment"># 带 / : 会将原uri去除location匹配表达式后的内容拼接在proxy_pass中url之后</span></span><br><span class="line">   <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【 location /bbs 】</p><ul><li><p>计算规则：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a> + （/bbs/abc/test.html - /bbs）</p></li><li><p>最终结果：<a href="http://127.0.0.1:8080//abc/test.html">http://127.0.0.1:8080//abc/test.html</a></p></li></ul><p>【 location /bbs/ 】</p><ul><li><p>计算规则：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a> + （/bbs/abc/test.html - /bbs/）</p></li><li><p>最终结果：<a href="http://127.0.0.1:8080/abc/test.html">http://127.0.0.1:8080/abc/test.html</a></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="proxy_pass-2"><div class="note success simple"><p><strong>不带 / : location匹配到的部分属于请求部分，匹配到 /bbs/ 时会将整个请求部分追加到proxy_pass上</strong></p></div><p><strong>用户请求 URI</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bbs/abc/test.html</span><br></pre></td></tr></table></figure><p><strong>proxy_pass 配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配路径，后缀不带/</span></span><br><span class="line"><span class="section">location</span> /bbs &#123;</span><br><span class="line">   <span class="comment"># 不带 / : location匹配到的部分属于请求部分，匹配到 /bbs/ 时会将整个请求部分追加到proxy_pass上</span></span><br><span class="line">   <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 匹配路径，后缀带/</span></span><br><span class="line"><span class="section">location</span> /bbs/ &#123;</span><br><span class="line">   <span class="comment"># 不带 / : location匹配到的部分属于请求部分，匹配到 /bbs/ 时会将整个请求部分追加到proxy_pass上</span></span><br><span class="line">   <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【 location /bbs 】</p><ul><li><p>计算规则：<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> + （/bbs/abc/test.html）</p></li><li><p>最终结果：<a href="http://127.0.0.1:8080/bbs/abc/test.html">http://127.0.0.1:8080/bbs/abc/test.html</a></p></li></ul><p>【 location /bbs/ 】</p><ul><li><p>计算规则：<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> + （/bbs/abc/test.html）</p></li><li><p>最终结果：<a href="http://127.0.0.1:8080/bbs/abc/test.html">http://127.0.0.1:8080/bbs/abc/test.html</a></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="设置代理请求-headers"><span class="post-title-index">3. </span><a href="#设置代理请求-headers" class="headerlink" title="设置代理请求 headers"></a>设置代理请求 <code>headers</code></h2><blockquote><p>headers：指的是Nginx服务器发送给<strong>客户端的 HTTP 响应头部信息</strong>。</p><p>在HTTP响应中，头部信息包含关于响应的元数据，如响应的内容类型、响应的日期和时间、服务器的类型和版本、以及其他有关响应和请求的信息。</p></blockquote><h3 id="问题"><span class="post-title-index">3.1. </span><a href="#问题" class="headerlink" title="问题"></a>问题</h3><div class="note orange simple"><p>问题位置：系统监控 -&gt; 在线用户 - 主机地址</p><p>问题描述：其中主机字段应该是获取的当前登录用户的真实 ip 地址，而不是主机服务器的ip。</p></div><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305112036519.png" alt="image-20230511203608477"></p><h3 id="解决方案"><span class="post-title-index">3.2. </span><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>在 <code>nginx</code> 配置文件（8002.conf）中新增如下如下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机server块</span></span><br><span class="line">server&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8002</span>;</span><br><span class="line">    <span class="comment"># 匹配请求中的host值</span></span><br><span class="line">    <span class="attribute">server_name</span> ruoyi.localhost;</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># 监听请求静态资源路径</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#nginx的主机地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 配置代理服务器</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.206.120:8088;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>常用变量值</p><p>| <strong>变量名称</strong> | <strong>变量解释</strong>                                         |<br>| —————— | —————————————————————————— |<br>| $host        | nginx主机IP，例如 192.168.206.120                    |<br>| $http_host   | nginx主机IP和端口，例如 192.168.206.120:8002         |<br>| $proxy_host  | proxy_pass里配置的主机名和端口，例如：localhost:8088 |<br>| $remote_addr | 用户的真实IP，即客户端IP                             |</p></li></ol><ol><li><p>然后刷新配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># /usr/sbin/nginx -s reload</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>访问</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305112034508.png" alt="image-20230511203437468"></p></li></ol><h2 id="参考博文"><span class="post-title-index">4. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/549972745909"><code>nginx</code> 配置 proxy_pass 时 <code>url</code> 末尾带“/”与不带“/”的区别如下</a></li><li><a href="https://juejin.cn/post/7083306471697416228"><code>nginx proxy_pass</code>路径后带/与不带/的区别</a></li><li><a href="https://www.bilibili.com/video/BV1rG4y1e7BQ/?p=1&amp;vd_source=8c87bde4b88d9c9613014acf272109fc"><code>nginx</code>一小时入门精讲课程(干货纯享版)</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-反向代理（三）</title>
      <link href="/posts/be2f0375.html"/>
      <url>/posts/be2f0375.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文 主要通过案例 <strong><code>Nginx</code> 配置 <code>Ruoyi</code> 框架</strong> ，学习反向代理。 </p><p><strong>准备工作</strong></p><ul><li>网盘链接: <a href="https://pan.baidu.com/s/1NmCR-vdAcZLouRRn9V1yTA">https://pan.baidu.com/s/1NmCR-vdAcZLouRRn9V1yTA</a> 密码: 1b60</li><li>官网文档：<a href="http://doc.ruoyi.vip/ruoyi">http://doc.ruoyi.vip/ruoyi</a></li><li>源码下载：<a href="https://codeload.github.com/yangzongzhuan/RuoYi/zip/refs/tags/v4.7.4">https://codeload.github.com/yangzongzhuan/RuoYi/zip/refs/tags/v4.7.4</a></li></ul></blockquote><h2 id="具体需求"><span class="post-title-index">2. </span><a href="#具体需求" class="headerlink" title="具体需求"></a><strong>具体需求</strong></h2><blockquote><p>本过程也可以在一台服务器中进行，但为了更好的理解反向代理，本人用到的是两台服务器 <code>server1</code> 和 <code>server2</code> 。</p><ul><li><code>server1</code> ：部署的是 <code>nginx</code> 服务</li><li><code>server2</code> ：部署的是后端 jar 服务</li></ul><p>实现流程如下：</p><ul><li>首先，当客户端通过 <a href="http://ip:port/path">http://ip:port/path</a> 进行访问。</li><li>然后，当请求达到服务器之后，通过 <code>Nginx</code> 代理 转发到真正的目标服务器上。</li><li>最后，返回请求信息。</li><li>具体流程如下图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111616675.png" alt="image-20230511161605653"></p></blockquote><h2 id="Nginx-配置-Ruoyi-框架"><span class="post-title-index">3. </span><a href="#Nginx-配置-Ruoyi-框架" class="headerlink" title="Nginx 配置 Ruoyi 框架"></a><code>Nginx</code> 配置 <code>Ruoyi</code> 框架</h2><blockquote><p>具体步骤如下：</p><ol><li><code>server1</code> ：创建 <code>nginx</code> 配置文件，并使其生效。</li><li><code>server2</code> ：修改 <code>ruoyi-admin.jar</code> 中的数据库连接信息，并使其生效。</li><li><code>server1</code> ：通过 <code>crul</code> 命令是否可以访问该端口。</li><li>客户端访问</li></ol></blockquote><h3 id="实现步骤"><span class="post-title-index">3.1. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p><code>server1</code> ：创建 <code>nginx</code> 配置文件，并使其生效。</p><div class="tabs" id="server1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#server1-1">【第一步：创建nginx配置文件 8002.conf】</button></li><li class="tab"><button type="button" data-href="#server1-2">【第二步：刷新 nginx 配置文件】</button></li><li class="tab"><button type="button" data-href="#server1-3">【第三步：开放防火墙端口，刷新配置】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="server1-1"><ul><li><p><code>nginx</code> 配置文件路径 <code>/etc/nginx/cond.d</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机server块</span></span><br><span class="line">server&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 监听端口</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8002</span>;</span><br><span class="line">  <span class="comment"># 匹配请求中的host值</span></span><br><span class="line">  <span class="attribute">server_name</span> ruoyi.localhost;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 监听请求静态资源路径</span></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 配置代理服务器, 这里 如果是本机就直接使用 http://localhost:port，如果不是就是用目标服务器的 ip + 端口。</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://server2:port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server1-2"><ul><li><p>刷新 <code>nginx</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># /usr/sbin/nginx -t </span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># /usr/sbin/nginx -s reload</span></span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server1-3"><ul><li><p><code>server1</code> ：开放防火墙端口，刷新配置。</p><div class="note warning simple"><p>如果为 阿里云 或者 腾讯云 需要配置安全组规则。例如：<a href="https://developer.aliyun.com/article/767328">阿里云-配置安全组规则</a></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --zone=public --add-port=8002/tcp --permanent # 开放8002端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p><code>server2</code> ：修改 <code>ruoyi-admin.jar</code> 中的数据库连接信息，并使其生效。</p><div class="tabs" id="server2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#server2-1">【第一步：修改jar包配置信息】</button></li><li class="tab"><button type="button" data-href="#server2-2">【第二步：创建数据库信息】</button></li><li class="tab"><button type="button" data-href="#server2-3">【第三步：启动项目】</button></li><li class="tab"><button type="button" data-href="#server2-4">【第四步：开放端口】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="server2-1"><ul><li><p>通过压缩工具打开<code>jar</code>包，可以通过 <code>360压缩</code> 或者 <code>7z</code> 打开</p><p> <img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111635689.png" alt="image-20230511163533665"></p></li><li><p>修改 <code>BOOT-INF\classes</code> 文件下 <code>application-druid.yml</code> 文件中的 数据库连接信息</p><blockquote><p>关于Linux下的MySQL安装可以参考我的博客 《<a href="http://example.com/2023/05/09/Linux/Linux-Shell-MySQL/">Linux-Shell-MySQL</a>》</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 主库数据源</span></span><br><span class="line">            <span class="attr">master:</span></span><br><span class="line">                <span class="attr">url:</span> <span class="string">jdbc:mysql://server:3306/ry?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">P@ssw0rd</span></span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server2-2"><ul><li><p>创建 <code>ry</code> 数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建 ruoyi 数据库 jdbc:mysql:<span class="operator">/</span><span class="operator">/</span>server:<span class="number">3306</span><span class="operator">/</span>ry</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `ry` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8mb4&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8mb4_unicode_ci&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>将百度网盘中的 <code>ry_20210924.sql</code> 文件导入 <code>ry</code> 数据库中</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111648892.png" alt="image-20230511164821860"></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server2-3"><ul><li><p>上传至 <code>/home/ruoyi</code> 盘符</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111700052.png" alt="image-20230511170026032"></p></li><li><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 75366452 May 11 16:58 ruoyi-admin.jar</span><br><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># nohup java -jar ruoyi-admin.jar &amp;</span></span><br><span class="line">[1] 26695</span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># tail -f nohup.out </span></span><br><span class="line">..............</span><br><span class="line">17:09:07.497 [main] INFO  c.r.RuoYiApplication - [logStarted,61] - Started RuoYiApplication <span class="keyword">in</span> 22.314 seconds (JVM running <span class="keyword">for</span> 23.97)</span><br><span class="line">(♥◠‿◠)ﾉﾞ  若依启动成功   ლ(´ڡ`ლ)ﾞ  </span><br><span class="line"> .-------.       ____     __        </span><br><span class="line"> |  _ _   \      \   \   /  /    </span><br><span class="line"> | ( <span class="string">&#x27; )  |       \  _. /  &#x27;</span>       </span><br><span class="line"> |(_ o _) /        _( )_ .<span class="string">&#x27;         </span></span><br><span class="line"><span class="string"> | (_,_).&#x27;</span> __  ___(_ o _)<span class="string">&#x27;          </span></span><br><span class="line"><span class="string"> |  |\ \  |  ||   |(_,_)&#x27;</span>         </span><br><span class="line"> |  | \ `<span class="string">&#x27;   /|   `-&#x27;</span>  /           </span><br><span class="line"> |  |  \    /  \      /           </span><br><span class="line"> <span class="string">&#x27;&#x27;</span>-<span class="string">&#x27;   `&#x27;</span>-<span class="string">&#x27;    `-..-&#x27;</span> </span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="server2-4"><ul><li><div class="note warning simple"><p>如果为 阿里云 或者 腾讯云 需要配置安全组规则。例如：<a href="https://developer.aliyun.com/article/767328">阿里云-配置安全组规则</a></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># firewall-cmd --zone=public --add-port=8088/tcp --permanent # 开放8088端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-24-4-centos ruoyi]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li><li><p><code>server1</code> ：通过 <code>crul</code> 命令是否可以访问该端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># curl http://server2:8088/</span></span><br><span class="line">[root@VM-0-9-centos conf.d]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>客户端进行访问</p><ul><li>访问地址：<a href="http://server1:8002">http://server1:8002</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111744050.png" alt="image-20230511174435926"></p></li></ol><h2 id="参考博文"><span class="post-title-index">4. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><ul><li><a href="https://www.bilibili.com/video/BV1rG4y1e7BQ/?p=1&amp;vd_source=8c87bde4b88d9c9613014acf272109fc"><code>nginx</code>一小时入门精讲课程(干货纯享版)</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-静态资源（二）</title>
      <link href="/posts/9aade770.html"/>
      <url>/posts/9aade770.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><span class="post-title-index">1. </span><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本篇博文主要是通过 <code>Nginx</code> 服务器代理静态资源。主要有两个案例，其中一个是 <strong><code>Nginx</code> 配置静态资源</strong>，另一个是 <strong><code>Nginx</code> 配置静态网站</strong>。</p><p><strong>常见静态资源类型：</strong></p><ul><li>浏览器端渲染：HTML、<code>CSS</code>、<code>JS</code></li><li>图片：<code>JPEG</code>、<code>GIF</code>、<code>PNG</code></li><li>视频：<code>FLV</code>、<code>MPEG</code></li><li>文件：<code>TXT</code> 等任意下载文件</li></ul></blockquote><h2 id="Nginx-配置静态资源"><span class="post-title-index">2. </span><a href="#Nginx-配置静态资源" class="headerlink" title="Nginx 配置静态资源"></a><code>Nginx</code> 配置静态资源</h2><blockquote><p>具体步骤如下：</p><ol><li>上传图片到指定盘符；</li><li>创建 <code>nginx</code> 配置文件；</li><li>检测 <code>nginx</code> 配置文件，并刷新配置文件；</li><li>开放防火墙端口，并刷新配置；</li><li>进行访问；</li></ol></blockquote><h3 id="实现步骤"><span class="post-title-index">2.1. </span><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>上传图片到指定盘符</p><ul><li>上传路径：<code>/home/images</code> 盘符下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305110006300.png" alt="image-20230511000644277"></p></li><li><p>创建 <code>nginx</code> 配置文件。</p><ul><li><p>配置文件路径：<code>/etc/nginx/conf</code></p></li><li><p>配置文件名称：<code>8000.conf</code> </p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机server块</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment"># 端口</span></span><br><span class="line">     <span class="attribute">listen</span> <span class="number">8000</span>;</span><br><span class="line">     <span class="comment"># 匹配请求中的host值</span></span><br><span class="line">     <span class="attribute">server_name</span>    localhost;</span><br><span class="line"> </span><br><span class="line">     <span class="comment"># 监听请求静态资源 图片 路径</span></span><br><span class="line">     <span class="section">location</span> /images &#123;</span><br><span class="line">          <span class="comment"># 查找目录</span></span><br><span class="line">          <span class="attribute">root</span> /home;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检测 <code>nginx</code> 配置文件，并刷新配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos images]<span class="comment"># /usr/sbin/nginx -t # 检测配置文件命令</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># /usr/sbin/nginx -s reload # 刷新配置文件</span></span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>开放防火墙端口，并刷新配置。</p><div class="note warning simple"><p>如果为 阿里云 或者 腾讯云 需要配置安全组规则。例如：<a href="https://developer.aliyun.com/article/767328">阿里云-配置安全组规则</a></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --zone=public --add-port=8000/tcp --permanent # 开放8000端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>进行访问</p><ul><li>访问路径：<code>http:ip:8000/images/20230506231750.jpg</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305110136357.png" alt="image-20230511013614304"></p></li></ol><h2 id="Nginx-配置静态网站"><span class="post-title-index">3. </span><a href="#Nginx-配置静态网站" class="headerlink" title="Nginx 配置静态网站"></a><code>Nginx</code> 配置静态网站</h2><h3 id="准备工作"><span class="post-title-index">3.1. </span><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><p><code>Nginx</code> 配置静态网站，<code>AdminLTE</code> 后台管理系统。</p><ul><li><code>AdminLTE</code> 官方网址：<a href="https://adminlte.io/">https://adminlte.io/</a></li><li>源码下载：<a href="https://codeload.github.com/ColorlibHQ/AdminLTE/tar.gz/refs/tags/v3.2.0">https://codeload.github.com/ColorlibHQ/AdminLTE/tar.gz/refs/tags/v3.2.0</a></li></ul></blockquote><h3 id="实现步骤-1"><span class="post-title-index">3.2. </span><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><blockquote><p>具体步骤如下：</p><ol><li>上传静态资源到指定盘符；</li><li><code>nginx</code> 配置文件；</li><li>检测 <code>nginx</code> 配置文件，并刷新配置文件；</li><li>开放防火墙端口，并刷新配置；</li><li>进行访问；</li></ol></blockquote><ol><li><p><strong>上传静态资源到指定盘符</strong></p><ul><li>上传路径：<code>/home/images</code> 盘符下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305110122048.png" alt="image-20230511012248028"></p></li><li><p><strong>创建 <code>Nginx</code> 配置文件</strong></p><ul><li>配置文件路径：<code>/etc/nginx/conf</code></li><li>配置文件名称：<code>8001.conf</code> </li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置虚拟主机的相关参数，可以有多个</span></span><br><span class="line">server&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 监听端口, 监听可以配置成IP 或 端口或IP+端口listen 127.0.0.1:8000;</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">    <span class="comment"># 通过请求中的 host 值，找到对应的虚拟主机的配置</span></span><br><span class="line">    <span class="attribute">server_name</span> nginx-dev;</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 配置请求路由，location 总是从/目录开始匹配。</span></span><br><span class="line">    <span class="comment"># 例如：/static/css ==》 location /css &#123;   root /static;  &#125;</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/static/AdminLTE-<span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">index</span> index.html index2.html index3.html;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>检测 <code>nginx</code> 配置文件，并刷新配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos images]<span class="comment"># /usr/sbin/nginx -t # 检测配置文件命令</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># /usr/sbin/nginx -s reload # 刷新配置文件</span></span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p><strong>开放防火墙端口，并刷新配置</strong></p><div class="note warning simple"><p>如果为 阿里云 或者 腾讯云 需要配置安全组规则。例如：<a href="https://developer.aliyun.com/article/767328">阿里云-配置安全组规则</a></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --zone=public --add-port=8001/tcp --permanent # 开放8001端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-0-9-centos images]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p><strong>进行访问</strong></p><ul><li>访问路径：<a href="http://ip:8001/index.html">http://ip:8001/index.html</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305110133134.png" alt="image-20230511013353075"></p></li></ol><h2 id="参考博文"><span class="post-title-index">4. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><ul><li><a href="https://tsejx.github.io/devops-guidebook//server/nginx/static-resource-server">静态资源服务器</a></li><li><a href="https://www.bilibili.com/video/BV1rG4y1e7BQ/?p=1&amp;vd_source=8c87bde4b88d9c9613014acf272109fc"><code>nginx</code>一小时入门精讲课程(干货纯享版)</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-基础知识（一）</title>
      <link href="/posts/380e70b.html"/>
      <url>/posts/380e70b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-是什么？"><span class="post-title-index">1. </span><a href="#Nginx-是什么？" class="headerlink" title="Nginx 是什么？"></a><code>Nginx</code> 是什么？</h2><blockquote><p> <code>Nginx</code> 是一款轻量级的 Web 服务器 / 反向代理服务器，广泛用于负载均衡、反向代理和 HTTP 缓存等功能。</p></blockquote><h2 id="Nginx-解决了什么问题？"><span class="post-title-index">2. </span><a href="#Nginx-解决了什么问题？" class="headerlink" title="Nginx 解决了什么问题？"></a><code>Nginx</code> 解决了什么问题？</h2><ul><li>高并发连接数请求处理：<code>Nginx</code> 通过异步非阻塞的设计架构，能够高效地处理高并发连接数的请求。</li><li>负载均衡：<code>Nginx</code> 可以将客户端的请求均衡分发到后端的多台服务器上，从而提供负载均衡服务。</li><li>反向代理：<code>Nginx</code> 可以作为反向代理服务器，将客户端的请求转发到后端的服务器上，从而为客户端提供负载均衡、高可用性和安全性等功能。</li><li>HTTP 缓存：<code>Nginx</code> 可以将常用的静态文件缓存在内存中，从而提升网站的访问速度。</li><li><code>HTTPS</code>服务：<code>Nginx</code> 支持 <code>HTTPS</code>协议，可以为网站提供安全的加密传输服务。</li></ul><h2 id="Nginx-如何使用？"><span class="post-title-index">3. </span><a href="#Nginx-如何使用？" class="headerlink" title="Nginx 如何使用？"></a><code>Nginx</code> 如何使用？</h2><ul><li>在线安装参考（外网博文）：<a href="https://www.runoob.com/linux/`Nginx`-install-setup.html">在线安装 <code>Nginx</code></a></li><li>Docker安装参考（外网博文）：<a href="https://www.runoob.com/docker/docker-install-`Nginx`.html">Docker 安装 <code>Nginx</code></a></li></ul><h2 id="Nginx-相关目录"><span class="post-title-index">4. </span><a href="#Nginx-相关目录" class="headerlink" title="Nginx 相关目录"></a><code>Nginx</code> 相关目录</h2><ul><li><p><code>Nginx</code> 安装目录</p><ul><li>外网（在线安装）：<code>/usr/local/Nginx</code></li></ul></li><li><p><code>Nginx</code> 启动目录</p><ul><li>外网（在线安装）：<code>/usr/local/Nginx/sbin</code></li></ul></li><li><p><code>Nginx</code> 日志目录</p><ul><li>外网（在线安装）：<code>/usr/local/Nginx/logs</code></li></ul></li></ul><h2 id="Nginx-常用命令"><span class="post-title-index">5. </span><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a><code>Nginx</code> 常用命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>Nginx</code> -t</td><td>执行配置文件检测</td></tr><tr><td><code>Nginx</code> -t -q</td><td>执行配置文件检测，且只输出错误信息</td></tr><tr><td><code>Nginx</code> -v</td><td>显示<code>Nginx</code>执行文件的版本信息</td></tr><tr><td><code>Nginx</code> -s stop</td><td>快速停止<code>Nginx</code></td></tr><tr><td><code>Nginx</code> -s reload</td><td>重新加载配置文件</td></tr><tr><td><code>Nginx</code> -c /etc/<code>Nginx</code>/<code>Nginx</code>.conf</td><td>指定 <code>Nginx</code>.conf 文件的位置</td></tr></tbody></table></div><h2 id="Nginx-代理"><span class="post-title-index">6. </span><a href="#Nginx-代理" class="headerlink" title="Nginx 代理"></a><code>Nginx</code> 代理</h2><h3 id="正向代理"><span class="post-title-index">6.1. </span><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><blockquote><p>正向代理：当我们站在客户端的角度想访问 Google， 正向代理服务器类似一个跳板机，代理访问外部资源。</p></blockquote><p>例如，下面这个例子，我们想访问 Google，但是存在相应的防火墙，无法访问。</p><ul><li><p>首先，先找一个能访问到 Google 的服务器。</p></li><li><p>然后，我们能够访问这台服务器，作为我们能够访问Google的桥梁。</p></li><li><p>最后，在让代理服务器将我们想要的数据返回给我们。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305101524071.png" alt="image2023-1-3_19-20-3.png"></p><h3 id="反向代理"><span class="post-title-index">6.2. </span><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote><p>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受 <code>internet</code> 上的连接请求。</p><p>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理，因为客户端不需要任何配置就可以访问。</p><p>例如，我们访问 <code>taobao.com</code> 或者 <code>jd.com</code> 其实 都经过了 很多次代理然后才到的目标服务器。</p></blockquote><p>例子，我们部署的项目</p><ul><li><p>首先，我们通过客户端访问 106.12.78.90 时，会在浏览器得到我们想看到的内容。</p></li><li><p>然后，但项目部署在 10.10.20.200 这台服务器中，并暴露外网 106.12.78.90 暴露出去。</p></li><li><p>最后，在服务器 10.10.20.200 内部可能做了多次代理，才访问到我们的Web服务器（10.10.20.189）中。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305101532396.png" alt="image2023-1-3_19-27-24.png"></p><h3 id="正向代理、方向代理区别"><span class="post-title-index">6.3. </span><a href="#正向代理、方向代理区别" class="headerlink" title="正向代理、方向代理区别"></a>正向代理、方向代理区别</h3><blockquote><p>来自知乎：<a href="https://www.zhihu.com/question/24723688">https://www.zhihu.com/question/24723688</a></p></blockquote><ul><li><p>正向代理中，proxy和client同属一个LAN，对server透明；</p></li><li><p>反向代理中，proxy和server同属一个LAN，对client透明。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305101537454.png" alt="image2023-1-3_19-40-39.png"></p><h2 id="Nginx-负载均衡"><span class="post-title-index">7. </span><a href="#Nginx-负载均衡" class="headerlink" title="Nginx 负载均衡"></a><code>Nginx</code> 负载均衡</h2><blockquote><p>负载均衡，通过反向代理服务器来优化网站的负载，一台服务器不行就搞多台。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305101527469.png" alt="image2023-1-3_19-36-41.png"></p><h2 id="Nginx-配置文件"><span class="post-title-index">8. </span><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a><code>Nginx</code> 配置文件</h2><blockquote><p><code>nginx.conf</code> 配置文件分为如下三个板块：</p><ul><li>全局配置</li><li>I/O 事件配置</li><li><code>http</code> 配置</li></ul></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>; <span class="comment"># 只启动一个工作进程</span></span><br><span class="line"> </span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>; <span class="comment"># 每个工作进程的最大连接为1024</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types; <span class="comment"># 引入MIME类型映射表文件</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream; <span class="comment"># 全局默认映射类型为application/octet-stream</span></span><br><span class="line"> </span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>; <span class="comment"># 启用零复制机制</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>; <span class="comment"># 保持连接超时时间为65s</span></span><br><span class="line">     </span><br><span class="line">    <span class="section">server</span> &#123; <span class="comment"># 虚拟主机配置</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>; <span class="comment"># 监听80端口的网络连接请求</span></span><br><span class="line">        <span class="attribute">server_name</span> localhost; <span class="comment"># 虚拟主机名为localhost</span></span><br><span class="line"> </span><br><span class="line">        <span class="section">location</span> / &#123; <span class="comment"># 匹配路径</span></span><br><span class="line">            <span class="attribute">root</span> html; <span class="comment"># 文件根目录</span></span><br><span class="line">            <span class="attribute">index</span> index.html index.htm; <span class="comment"># 默认页名称</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html; <span class="comment"># 报错编码对应页面</span></span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 引入其他 nginx 配置文件</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考博文"><span class="post-title-index">9. </span><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><blockquote><ul><li><a href="https://www.cnblogs.com/anker/p/6056540.html">正向代理与反向代理</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web服务器 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Shell-MySQL</title>
      <link href="/posts/3ffb66e.html"/>
      <url>/posts/3ffb66e.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><span class="post-title-index">1. </span><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>现在 <code>MySQL</code> 虽说可以通过 <code>Docker</code> 一键安装，但是还是有很多公司的项目依旧在使用传统的方式进行安装。</p><p>如下方式可以通过脚本一键安装 <code>MySQL 5.7.35</code></p><p>准备环境：</p><ul><li>操作系统：CentOS 7.6 64位</li><li>实例配置：1核 1GB 5Mbps</li><li>MySQL：<code>mysql 5.7.35</code></li></ul><p>准备脚本（网盘自取）：</p><ul><li>链接：<a href="https://pan.baidu.com/s/1vXElBOA_zM1dlwxUT-wi7Q">https://pan.baidu.com/s/1vXElBOA_zM1dlwxUT-wi7Q</a> </li><li>提取码：kh9m </li></ul></blockquote><h2 id="步骤"><span class="post-title-index">2. </span><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote><ol><li>将脚本上传至 <code>/tmp</code> 目录下</li><li>给脚本添加权限添加权限</li><li>执行脚本</li><li>开放防火墙端口，并刷新配置</li><li>配置 <code>MySQL</code> </li><li>测试链接</li></ol></blockquote><ol><li><p>将脚本上传至 <code>/tmp</code> 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111335799.png" alt="image-20230511133516733"></p></li><li><p>给脚本添加权限添加权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># chmod +x mysqlinstall_auto.sh </span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># ./mysqlinstall_auto.sh </span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line">MySQL自动部署脚本执行</span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line">发现MySQL-server安装文件 mysql-community-server-5.7.35-1.el7.x86_64.rpm</span><br><span class="line">发现MySQL-client安装文件 mysql-community-client-5.7.35-1.el7.x86_64.rpm</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">正在安装MySQL...</span><br><span class="line">正在卸载MariaDB</span><br><span class="line">已卸载MariaDB</span><br><span class="line">正在安装MySQL-server...</span><br><span class="line">warning: mysql-community-server-5.7.35-1.el7.x86_64.rpm: Header V3 DSA/SHA256 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line">server安装完成</span><br><span class="line">正在安装MySQL-client...</span><br><span class="line">warning: mysql-community-client-5.7.35-1.el7.x86_64.rpm: Header V3 DSA/SHA256 Signature, key ID 5072e1f5: NOKEY</span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line">client安装完成</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">正在启动MySQL...</span><br><span class="line">启动成功</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line">正在获取mysql初始密码</span><br><span class="line">mysql初始密码: )tLp(LCD&lt;6*S</span><br><span class="line">-------------------------------------------------</span><br><span class="line">部署脚本执行完成</span><br></pre></td></tr></table></figure></li><li><p>开放防火墙端口，并刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># firewall-cmd --zone=public --add-port=3306/tcp --permanent # 开放3306端口</span></span><br><span class="line">success</span><br><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># firewall-cmd --reload # 刷新防火墙配置</span></span><br><span class="line">success</span><br><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>配置 <code>MySQL</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># mysql -u root -p </span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 3</span><br><span class="line">Server version: 5.7.35</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次操作要求重置密码,必须大小写特殊字符组成, 我设置的密码为 P@ssw0rd</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;P@ssw0rd&#x27;</span>; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权远程访问 % 表示所有主机都可以访问</span></span><br><span class="line">mysql&gt; grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;P@ssw0rd&#x27;</span> with grant option; </span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges; <span class="comment"># 刷新权限信息</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br><span class="line">[root@VM-24-4-centos tmp]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>测试链接</p><p><img src="https://cdn.jsdelivr.net/gh/wicksonZhang/static-source-cdn/images/202305111401493.png" alt="image-20230511140119459"></p></li></ol><h2 id="脚本解析"><span class="post-title-index">3. </span><a href="#脚本解析" class="headerlink" title="脚本解析"></a>脚本解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定安装文件夹</span></span><br><span class="line">package_dir=<span class="string">&quot;/tmp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#################################################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MySQL自动部署脚本执行&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#################################################&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$&#123;package_dir&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找MySQL-server和MySQL-client的安装包</span></span><br><span class="line">server=$(find -maxdepth 1 -name <span class="string">&#x27;*mysql*&#x27;</span> | grep server | awk -F <span class="string">&quot;/&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">client=$(find -maxdepth 1 -name <span class="string">&#x27;*mysql*&#x27;</span> | grep client | awk -F <span class="string">&quot;/&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查MySQL-server安装包是否存在，不存在则退出</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$&#123;server&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;未找到MySQL-server安装文件&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;发现MySQL-server安装文件 <span class="variable">$&#123;server&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查MySQL-client安装包是否存在，不存在则退出</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$&#123;client&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;未找到MySQL-client安装文件&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;发现MySQL-client安装文件 <span class="variable">$&#123;client&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MySQL</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_mysql</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;--------------------------------------------------------------------&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在安装MySQL...&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查系统自带数据库MariaDB是否存在，如果存在则卸载</span></span><br><span class="line">    mariadb=$(rpm -qa | grep mariadb)</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;mariadb&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在卸载MariaDB&quot;</span></span><br><span class="line">        rpm -e <span class="string">&quot;<span class="variable">$&#123;mariadb&#125;</span>&quot;</span> --nodeps</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已卸载MariaDB&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;未找到MariaDB软件包&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查服务器上是否已安装MySQL，如果已经安装则退出</span></span><br><span class="line">    ismysql=$(rpm -qa | grep mysql)</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;ismysql&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;mysql已存在，请确认&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 安装MySQL-server和MySQL-client</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在安装MySQL-server...&quot;</span></span><br><span class="line">        rpm -ih <span class="string">&quot;<span class="variable">$&#123;server&#125;</span>&quot;</span> --force --nodeps</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;server安装完成&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;server安装失败，请检查报错信息！&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;正在安装MySQL-client...&quot;</span></span><br><span class="line">        rpm -ih <span class="string">&quot;<span class="variable">$&#123;client&#125;</span>&quot;</span> --force --nodeps</span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;client安装完成&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;client安装失败，请检查报错信息！&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动MySQL</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">startup</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;--------------------------------------------------------------------&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在启动MySQL...&quot;</span></span><br><span class="line">    systemctl restart mysqld</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> netstat -ntulp | grep -q 3306</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;启动成功&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;启动失败，请查看日志！&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;启动失败，请查看日志！&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取MySQL的初始密码</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">get_password</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--------------------------------------------------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在获取mysql初始密码&quot;</span></span><br><span class="line">init_password=$(grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mysql初始密码: <span class="variable">$init_password</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_mysql</span><br><span class="line">startup</span><br><span class="line">get_password</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-------------------------------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;部署脚本执行完成&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Shell</title>
      <link href="/posts/ccf232fc.html"/>
      <url>/posts/ccf232fc.html</url>
      
        <content type="html"><![CDATA[<h3 id="变量"><span class="post-title-index">.1. </span><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量是 Shell 脚本编程中最基本的概念之一，用于存储数据。Shell 中的变量不需要事先声明，只需要在变量名前加上 <code>$</code> 符号即可引用该变量。</p></blockquote><ul><li>命令语法</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">变量名 = 值</span><br><span class="line"><span class="comment"># 调用变量</span></span><br><span class="line">$变量名</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is <span class="variable">$name</span>.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="常用判断"><span class="post-title-index">.2. </span><a href="#常用判断" class="headerlink" title="常用判断"></a>常用判断</h3><blockquote><p>在 Shell 脚本编程中，常常需要根据某些条件进行判断。</p></blockquote><h4 id="if-语句"><span class="post-title-index">.2.1. </span><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 语句判断变量 num 是否大于 10，如果成立则输出 &quot;The number is greater than 10.&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -gt 10 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;The number is greater than 10.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="case-语句"><span class="post-title-index">.2.2. </span><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$variable</span> <span class="keyword">in</span></span><br><span class="line">  value1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Variable is value1.&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">  value2)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Variable is value2.&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Variable is neither value1 nor value2.&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="流程控制"><span class="post-title-index">.3. </span><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="for-循环语句"><span class="post-title-index">.3.1. </span><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="while-语句"><span class="post-title-index">.3.2. </span><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ <span class="variable">$num</span> -le 10 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line">  num=$((num+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="传参"><span class="post-title-index">.4. </span><a href="#传参" class="headerlink" title="传参"></a>传参</h3><blockquote><p>在 Shell 脚本中，可以通过命令行参数来传递参数值。</p></blockquote><ul><li>示例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The first parameter is: <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The second parameter is: <span class="variable">$2</span>&quot;</span></span><br></pre></td></tr></table></figure><p>在上述代码中，使用 <code>$1</code> 和 <code>$2</code> 来引用第一个和第二个参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./script.sh foo bar</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The first parameter is: foo</span><br><span class="line">The second parameter is: bar</span><br></pre></td></tr></table></figure><h3 id="函数"><span class="post-title-index">.5. </span><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数来封装重复使用的代码.</p></blockquote><ul><li>示例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">greeting</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$1</span>!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeting <span class="string">&quot;John&quot;</span></span><br></pre></td></tr></table></figure><ul><li>调用脚本 <code>./script.sh</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ./script.sh </span></span><br><span class="line">Hello, John!</span><br></pre></td></tr></table></figure><h3 id="数组"><span class="post-title-index">.6. </span><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>在 Shell 脚本中，可以使用数组来存储一组数据。</p></blockquote><ul><li>示例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">fruits=(<span class="string">&quot;apple&quot;</span> <span class="string">&quot;banana&quot;</span> <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;fruits[0]&#125;</span>  <span class="comment"># 输出 &quot;apple&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;fruits[1]&#125;</span>  <span class="comment"># 输出 &quot;banana&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;fruits[2]&#125;</span>  <span class="comment"># 输出 &quot;orange&quot;</span></span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ./script.sh </span></span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br></pre></td></tr></table></figure><h3 id="示例"><span class="post-title-index">.7. </span><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>以下是一个综合使用变量、常用判断、流程控制、传参、函数、数组的 Shell 脚本示例</p></blockquote><ul><li>示例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">name=<span class="string">&quot;John&quot;</span></span><br><span class="line">age=20</span><br><span class="line">fruits=(<span class="string">&quot;apple&quot;</span> <span class="string">&quot;banana&quot;</span> <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$age</span> -ge 18 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> is an adult.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> is not an adult.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> <span class="variable">$&#123;fruits[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;I like <span class="variable">$fruit</span>.&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">greeting</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$1</span>!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeting <span class="variable">$name</span></span><br></pre></td></tr></table></figure><ul><li>调用脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ./script.sh </span></span><br><span class="line">John is an adult.</span><br><span class="line">I like apple.</span><br><span class="line">I like banana.</span><br><span class="line">I like orange.</span><br><span class="line">Hello, John!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-网络监测</title>
      <link href="/posts/4f449b15.html"/>
      <url>/posts/4f449b15.html</url>
      
        <content type="html"><![CDATA[<h2 id="curl"><span class="post-title-index">1. </span><a href="#curl" class="headerlink" title="curl"></a>curl</h2><blockquote><p>curl：该命令可视为不带参数的GET请求。</p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 服务地址</span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><div class="tabs" id="curl"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#curl-1"><i class="fas fa-check"></i>【正常示例】</button></li><li class="tab"><button type="button" data-href="#curl-2"><i class="fas fa-xmark"></i>【失败示例】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="curl-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># curl http://localhost:80</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="curl-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># curl http://localhost:8080</span></span><br><span class="line">curl: (7) Failed connect to localhost:8080; Connection refused</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="netstat"><span class="post-title-index">2. </span><a href="#netstat" class="headerlink" title="netstat"></a><code>netstat</code></h2><blockquote><p><code>netstat</code> ：监听端口状态</p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat 参数 | grep 端口号</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-a</strong>：显示所有socket</p><p><strong>-l</strong>：显示所有处于监听中的端口</p><p><strong>-n</strong>：显示本地的<code>IP</code>地址</p><p><strong>-p</strong>：显示<code>pid</code>及进程名称</p><p><strong>-t</strong>：只显示<code>tcp</code>端口</p><p><strong>-u</strong>：只显示<code>udp</code>端口</p></div><ul><li>操作示例</li></ul><div class="tabs" id="netstat"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#netstat-1">【监听tcp端口】</button></li><li class="tab"><button type="button" data-href="#netstat-2">【查询包含80的端口】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="netstat-1"><p><code>netstat -ltnp</code>：查询所有处于监听状态的tcp端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># netstat -ltnp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      3781/nginx: master  </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1457/sshd           </span><br><span class="line">tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      1455/python         </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="netstat-2"><p><code>netstat -anp | grep 80</code>：查询所有处于监听状态的tcp端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># netstat -anp | grep 80</span></span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      3781/nginx: master  </span><br><span class="line">tcp        0      0 10.0.0.9:42842          169.254.0.55:8080       TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 10.0.0.9:80             170.64.161.204:38658    TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 10.0.0.9:35380          169.254.0.55:5574       ESTABLISHED 5133/YDService      </span><br><span class="line">tcp        0      0 10.0.0.9:80             170.64.161.204:38694    TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 10.0.0.9:80             170.64.161.204:38660    TIME_WAIT   -                   </span><br><span class="line">udp6       0      0 fe80::5054:ff:fead::123 :::*                                657/ntpd            </span><br><span class="line">unix  2      [ ACC ]     STREAM     LISTENING     8005     1/systemd            /run/systemd/journal/stdout</span><br><span class="line">unix  5      [ ]         DGRAM                    8008     1/systemd            /run/systemd/journal/socket</span><br><span class="line">unix  12     [ ]         DGRAM                    8010     1/systemd            /dev/log</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="telnet"><span class="post-title-index">3. </span><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><blockquote><p>telnet：用来探测指定 <code>ip</code> 是否开放指定端口。</p><p>在 Linux 环境下 <code>Telnet</code> 是需要安装的。 安装命令：<code>yum install telnet</code></p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet IP 端口</span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><div class="tabs" id="curl"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#curl-1"><i class="fas fa-check"></i>【正常示例】</button></li><li class="tab"><button type="button" data-href="#curl-2"><i class="fas fa-xmark"></i>【失败示例】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="curl-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># telnet 127.0.0.1 80</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="curl-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># telnet 127.0.0.1 8080</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">telnet: connect to address 127.0.0.1: Connection refused</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-基础命令</title>
      <link href="/posts/5c7d7d77.html"/>
      <url>/posts/5c7d7d77.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-目录操作"><span class="post-title-index">1. </span><a href="#Linux-目录操作" class="headerlink" title="Linux - 目录操作"></a>Linux - 目录操作</h2><h3 id="cd"><span class="post-title-index">1.1. </span><a href="#cd" class="headerlink" title="cd"></a>cd</h3><blockquote><p>cd：进入对应目录，类似 windows 打开文件夹</p></blockquote><ul><li>命令语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 【<span class="built_in">dir</span>】</span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><div class="tabs" id="cd"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cd-1">【cd ~】</button></li><li class="tab"><button type="button" data-href="#cd-2">【cd ..】</button></li><li class="tab"><button type="button" data-href="#cd-3">【cd -】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cd-1"><p><strong>cd ~ ：回到当前登录账号的home目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd ~</span></span><br><span class="line">[root@VM-0-9-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cd-2"><p><strong>cd .. || cd ./.. ：进到当前目录的父级目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos /]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd ./..</span></span><br><span class="line">[root@VM-0-9-centos usr]<span class="comment"># pwd</span></span><br><span class="line">/usr</span><br><span class="line">[root@VM-0-9-centos usr]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd ..</span></span><br><span class="line">[root@VM-0-9-centos usr]<span class="comment"># pwd</span></span><br><span class="line">/usr</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cd-3"><p><strong>cd - ：跳转到之前所在目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd -</span></span><br><span class="line">/home</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="cp"><span class="post-title-index">1.2. </span><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>cp：文件拷贝</p></blockquote><ul><li>命令语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> 参数 源文件 目标位置</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-r/R</strong>：递归，使用于目录复制</p><p><strong>-n</strong>：不覆盖，不加该参数默认覆盖</p></div><ul><li>操作示例</li></ul><div class="tabs" id="cp"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cp-1">【cp 源文件 目标位置】</button></li><li class="tab"><button type="button" data-href="#cp-2">【cp -r 源文件 目标位置】</button></li><li class="tab"><button type="button" data-href="#cp-3">【cp -n 源文件 目标位置】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cp-1"><p>【cp 源文件 目标位置】：覆盖复制当前目录下bbb文件至/tmp目录下，命名为aaa文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># touch bbb.md</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># ll</span></span><br><span class="line">...</span><br><span class="line">-rw-r--r--   1 root root    0 May  9 12:01 bbb.md</span><br><span class="line">...</span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cp bbb.md /tmp/aaa</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ll</span></span><br><span class="line">...</span><br><span class="line">-rw-r--r-- 1 root root    0 May  9 12:01 aaa</span><br><span class="line">...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp-2"><p>【cp -r 源文件 目标位置】：覆盖复制ccc目录至/tmp目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># mkdir ccc</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cp -r ccc/ /tmp/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ll</span></span><br><span class="line">drwxr-xr-x 2 root root 4096 May  9 13:32 ccc</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp-3"><p>【cp -n 源文件 目标位置】：复制bbb文件至/tmp目录下，并跳过重名文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># touch bbb.md</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cp -n bbb.md /tmp/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r-- 1 root root    0 May  9 13:36 bbb.md</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="find"><span class="post-title-index">1.3. </span><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>find：查找文件</p></blockquote><ul><li>命令语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 查找目录 参数</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-name</strong>：名称匹配</p><p><strong>-mindepth</strong>：目录深度最小限制</p><p><strong>-maxdepth</strong>：目录深度最大限制</p><p><strong>-type</strong>：文件类型匹配（<strong>f</strong> 普通文件 <strong>l</strong> 符号连接 <strong>d</strong> 目录）</p></div><ul><li>操作示例</li></ul><div class="tabs" id="find"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#find-1">【find 路径 -mindepth -maxdepth】</button></li><li class="tab"><button type="button" data-href="#find-2">【find 路径 -type f -name filename】</button></li><li class="tab"><button type="button" data-href="#find-3">【find 路径 -name *.jpg】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="find-1"><p>find 路径 -mindepth -maxdepth：查找目录下目录深度2层与3层的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># find /home -mindepth 2 -maxdepth 3</span></span><br><span class="line">/home/www/.bashrc</span><br><span class="line">/home/www/.bash_logout</span><br><span class="line">/home/www/.bash_profile</span><br><span class="line">...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="find-2"><p>find 路径 -type f -name filename：查找/home目录下名称为aaa的普通文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># find /home -type f -name aaa</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># touch aaa</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># find /home -type f -name aaa</span></span><br><span class="line">/home/aaa</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="find-3"><p>find 路径 -name *.jpg：查找/home目录下后缀为.jpg的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># find /home -name *.jpg</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># touch aa.jpg</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># find /home -name *.jpg</span></span><br><span class="line">/home/aa.jpg</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="ls"><span class="post-title-index">1.4. </span><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>ls：显示当前目录下的信息</p></blockquote><ul><li>命令语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-a</strong> ：显示所有文件，包括隐藏文件</p><p><strong>-l</strong> ：显示文件属性，文件大小以字节显示</p><p><strong>-h</strong> ：按K\M\G的形式显示文件大小信息</p><p><strong>-S</strong> ：按文件大小排序</p></div><ul><li>操作示例</li></ul><div class="tabs" id="ls"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ls-1">【ls】</button></li><li class="tab"><button type="button" data-href="#ls-2">【ls -a】</button></li><li class="tab"><button type="button" data-href="#ls-3">【ls -l】</button></li><li class="tab"><button type="button" data-href="#ls-4">【ls -al】</button></li><li class="tab"><button type="button" data-href="#ls-5">【ls -lh】</button></li><li class="tab"><button type="button" data-href="#ls-6">【ls -lhS】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ls-1"><p>ls：显示当前目录下的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls # 显示当前目录下的信息</span></span><br><span class="line">aaa  aa.jpg  lighthouse  www</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ls-2"><p>ls -a：显示所有文件，包括隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls -a # 显示所有文件，包括隐藏文件</span></span><br><span class="line">.  ..  aaa  aa.jpg  lighthouse  www</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ls-3"><p>ls -l：显示文件属性，文件大小以字节显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls -l # 显示文件属性，文件大小以字节显示</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root       root          0 May  9 13:44 aaa</span><br><span class="line">-rw-r--r-- 1 root       root          0 May  9 13:46 aa.jpg</span><br><span class="line">drwx------ 5 lighthouse lighthouse 4096 Oct 12  2022 lighthouse</span><br><span class="line">drwx------ 2 www        www        4096 Aug 11  2022 www</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ls-4"><p>ls -al：显示所有文件，包括隐藏文件，文件属性，文件大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls -al # 显示所有文件，包括隐藏文件，文件属性，文件大小</span></span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x.  4 root       root       4096 May  9 13:46 .</span><br><span class="line">dr-xr-xr-x. 21 root       root       4096 May  9 13:50 ..</span><br><span class="line">-rw-r--r--   1 root       root          0 May  9 13:44 aaa</span><br><span class="line">-rw-r--r--   1 root       root          0 May  9 13:46 aa.jpg</span><br><span class="line">drwx------   5 lighthouse lighthouse 4096 Oct 12  2022 lighthouse</span><br><span class="line">drwx------   2 www        www        4096 Aug 11  2022 www</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ls-5"><p>ls -lh（按K\M\G的形式显示文件大小信息）：显示文件属性，文件大小以K显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls -lh # 显示文件属性，文件大小以K显示</span></span><br><span class="line">total 8.0K</span><br><span class="line">-rw-r--r-- 1 root       root          0 May  9 13:44 aaa</span><br><span class="line">-rw-r--r-- 1 root       root          0 May  9 13:46 aa.jpg</span><br><span class="line">drwx------ 5 lighthouse lighthouse 4.0K Oct 12  2022 lighthouse</span><br><span class="line">drwx------ 2 www        www        4.0K Aug 11  2022 www</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ls-6"><p>ls -lhS：显示文件属性，文件大小以K显示，按文件大小排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls -lhS  # 显示文件属性，文件大小以K显示，按文件大小排序</span></span><br><span class="line">total 8.0K</span><br><span class="line">drwx------ 5 lighthouse lighthouse 4.0K Oct 12  2022 lighthouse</span><br><span class="line">drwx------ 2 www        www        4.0K Aug 11  2022 www</span><br><span class="line">-rw-r--r-- 1 root       root          0 May  9 13:44 aaa</span><br><span class="line">-rw-r--r-- 1 root       root          0 May  9 13:46 aa.jpg</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="mkdir"><span class="post-title-index">1.5. </span><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote><p>创建文件目录</p></blockquote><ul><li>命令语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 参数 文件名</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-p</strong> ：嵌套关系目录创建;</p></div><ul><li>操作示例</li></ul><div class="tabs" id="mkdir"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mkdir-1">【mkdir dir】</button></li><li class="tab"><button type="button" data-href="#mkdir-2">【mkdir -p dir】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mkdir-1"><p><strong>mkdir dir</strong>：创建空白目录；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls</span></span><br><span class="line">lighthouse  www</span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># mkdir v1</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls</span></span><br><span class="line">lighthouse  v1  www</span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># mkdir v2 v3 v4</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls</span></span><br><span class="line">lighthouse  v1  v2  v3  v4  www</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mkdir-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># rm -rf v1 v2 v3 v4</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># mkdir -p v1/v2/v3</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># ls</span></span><br><span class="line">lighthouse  v1  www</span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># find v1 -mindepth 2 -maxdepth 3</span></span><br><span class="line">v1/v2/v3</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="mv"><span class="post-title-index">1.6. </span><a href="#mv" class="headerlink" title="mv"></a>mv</h3><blockquote><p>mv：移动文件，可以操作目录和文件。</p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> 源路径 目标路径</span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><div class="tabs" id="mv"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mv-1">【mv file 目标路径】</button></li><li class="tab"><button type="button" data-href="#mv-2">【mv dir 目标路径】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mv-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos home]<span class="comment"># touch ccc</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># mv ccc /tmp/aaa</span></span><br><span class="line">[root@VM-0-9-centos home]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ls</span></span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="mv-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># mkdir bbb</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># mv bbb/ /tmp/</span></span><br><span class="line">[root@VM-0-9-centos <span class="built_in">local</span>]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># ls</span></span><br><span class="line">bbb</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="pwd"><span class="post-title-index">1.7. </span><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><blockquote><p>显示当前工作目录</p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># pwd</span></span><br><span class="line">/tmp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="rm"><span class="post-title-index">1.8. </span><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>rm：删除目录或文件</p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> 参数 路径</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-r</strong>：递归，用于目录</p><p><strong>-f</strong>：强制删除，不显示任何信息（会使前边的参数 i 失效）</p><p><strong>-i</strong>：进行任何操作前需确认，只能操作文件（会使前边的参数 f 失效）</p></div><ul><li>操作示例</li></ul><div class="tabs" id="rm"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#rm-1">【rm -ir 路径】</button></li><li class="tab"><button type="button" data-href="#rm-2">【rm -rf 路径】</button></li><li class="tab"><button type="button" data-href="#rm-3">【rm -i 文件】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="rm-1"><p>rm -ir 路径：删除目录下所有文件，并在每一步执行操作前进行确认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># rm -ir bbb/</span></span><br><span class="line"><span class="built_in">rm</span>: remove directory ‘bbb/’? y</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rm-2"><p>rm -rf 路径：强制删除目录下所有文件，中间不会产生任何提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># rm -rf ccc/</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># </span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rm-3"><p>rm -i 路径：删除test1文件，在删除前进行确认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># touch ccc.md</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># rm -i ccc.md </span></span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘ccc.md’? y</span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># </span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Linux-文件编辑"><span class="post-title-index">2. </span><a href="#Linux-文件编辑" class="headerlink" title="Linux - 文件编辑"></a>Linux - 文件编辑</h2><blockquote><p>vi：自带文本编辑器</p></blockquote><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi filename</span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><div class="tabs" id="linux---vi"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#linux---vi-1">【插入模式（insert mode）】</button></li><li class="tab"><button type="button" data-href="#linux---vi-2">【命令模式（command mode）】</button></li><li class="tab"><button type="button" data-href="#linux---vi-3">【底行模式（last line mode）】</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="linux---vi-1"><ul><li><p>第一步：进入文件编辑器后，按 <strong>i</strong> 进入插入模式</p></li><li><p>第二步：插入模式下，文本编辑按常规模式进行操作</p></li><li><p>第三步：按 <strong>ESC</strong> 退出插入模式</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="linux---vi-2"><ul><li><p>移动光标</p><ul><li><p><strong>ctrl + b</strong>  屏幕向后移动一页</p></li><li><p><strong>ctrl + f</strong>  屏幕向前移动一页</p></li><li><p><strong>ctrl + u</strong>  屏幕向后移动半页</p></li><li><p><strong>ctrl + d</strong>  屏幕向前移动半页</p></li><li><p><strong>$</strong>  光标移动到行尾</p></li><li><p><strong>^</strong>  光标移动到行首</p></li></ul></li><li><p>删除操作</p><ul><li><strong>x</strong>  删除光标后一位字符</li><li><strong>#x</strong>  删除光标后#位字符</li><li><strong>dd</strong>  删除光标所在行</li></ul></li><li><p>撤回操作</p><ul><li><strong>u</strong>  撤回上一步操作</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="linux---vi-3"><ul><li><p>命令模式下，按 <strong>：</strong> 进入底行模式</p></li><li><p>字符查找</p><ul><li><strong>/keywords</strong>  命令模式下按 <strong>/</strong> ，接着输入查找关键字后回车进行查找，接着按 <strong>n</strong> 转到下一个查找结果</li></ul></li><li><p>保存文件</p><ul><li><p><strong>:w filename</strong>  以 <strong>filename</strong> 为文件名另存为</p></li><li><p><strong>:wq</strong>  保存并退出</p></li></ul></li><li><p>退出编辑</p><ul><li><strong>:q!</strong>  不存盘强制退出</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Linux-文件查看"><span class="post-title-index">3. </span><a href="#Linux-文件查看" class="headerlink" title="Linux - 文件查看"></a>Linux - 文件查看</h2><h3 id="cat"><span class="post-title-index">3.1. </span><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> filename <span class="comment"># 查看文件</span></span><br><span class="line"><span class="built_in">cat</span> -n filename <span class="comment"># 查看文件内容并附带行号</span></span><br></pre></td></tr></table></figure><ul><li>操作示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># touch Readme.md</span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># vi Readme.md </span></span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># cat Readme.md </span></span><br><span class="line">this is Readme</span><br><span class="line">[root@VM-0-9-centos tmp]<span class="comment"># cat -n Readme.md </span></span><br><span class="line">     1this is Readme</span><br></pre></td></tr></table></figure><h3 id="less"><span class="post-title-index">3.2. </span><a href="#less" class="headerlink" title="less"></a>less</h3><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less filename</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>Space</strong> 或 <strong>PageUp</strong>：向前一屏</p><p><strong>B</strong> 或 <strong>PageDown</strong>：向后一屏</p><p><strong>Enter</strong> ：向后一行</p><p><strong>K</strong> ：向前一行</p></div><h3 id="tail"><span class="post-title-index">3.3. </span><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> 参数 filename</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><div class="note orange simple"><p><strong>-n</strong> ：指定显示文件的最后多少行。</p><p><strong>-f</strong> ：动态显示，默认显示文件末尾10行，并且一直保持显示状态。</p></div>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><span class="post-title-index">1. </span><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><span class="post-title-index">1.1. </span><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><span class="post-title-index">1.2. </span><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><span class="post-title-index">1.3. </span><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><span class="post-title-index">1.4. </span><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
